
3D_accelerator_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003940  08003940  00013940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08003a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          00000250  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200002c4  200002c4  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d067  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000265d  00000000  00000000  0002d10b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a60  00000000  00000000  0002f768  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  000301c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000137a5  00000000  00000000  00030ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b8c1  00000000  00000000  00044265  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00063803  00000000  00000000  0004fb26  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000b3329  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002b6c  00000000  00000000  000b33a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  000b5f10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003928 	.word	0x08003928

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003928 	.word	0x08003928

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000288:	2300      	movs	r3, #0
 800028a:	73fb      	strb	r3, [r7, #15]
 800028c:	2300      	movs	r3, #0
 800028e:	73bb      	strb	r3, [r7, #14]
 8000290:	230f      	movs	r3, #15
 8000292:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d039      	beq.n	8000310 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800029c:	4b27      	ldr	r3, [pc, #156]	; (800033c <NVIC_Init+0xbc>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	43db      	mvns	r3, r3
 80002a2:	0a1b      	lsrs	r3, r3, #8
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	f003 0307 	and.w	r3, r3, #7
 80002aa:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
 80002ae:	f1c3 0304 	rsb	r3, r3, #4
 80002b2:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80002b4:	7b7a      	ldrb	r2, [r7, #13]
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	fa42 f303 	asr.w	r3, r2, r3
 80002bc:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	785b      	ldrb	r3, [r3, #1]
 80002c2:	461a      	mov	r2, r3
 80002c4:	7bbb      	ldrb	r3, [r7, #14]
 80002c6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ca:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	789a      	ldrb	r2, [r3, #2]
 80002d0:	7b7b      	ldrb	r3, [r7, #13]
 80002d2:	4013      	ands	r3, r2
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	4313      	orrs	r3, r2
 80002da:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80002dc:	7bfb      	ldrb	r3, [r7, #15]
 80002de:	011b      	lsls	r3, r3, #4
 80002e0:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80002e2:	4a17      	ldr	r2, [pc, #92]	; (8000340 <NVIC_Init+0xc0>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	4413      	add	r3, r2
 80002ea:	7bfa      	ldrb	r2, [r7, #15]
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002f8:	4911      	ldr	r1, [pc, #68]	; (8000340 <NVIC_Init+0xc0>)
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	0952      	lsrs	r2, r2, #5
 8000300:	b2d2      	uxtb	r2, r2
 8000302:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000304:	2201      	movs	r2, #1
 8000306:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800030a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800030e:	e00f      	b.n	8000330 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000318:	4909      	ldr	r1, [pc, #36]	; (8000340 <NVIC_Init+0xc0>)
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	7812      	ldrb	r2, [r2, #0]
 800031e:	0952      	lsrs	r2, r2, #5
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000324:	2201      	movs	r2, #1
 8000326:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000328:	f100 0320 	add.w	r3, r0, #32
 800032c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00
 8000340:	e000e100 	.word	0xe000e100

08000344 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800035a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800035e:	d102      	bne.n	8000366 <CAN_Transmit+0x22>
  {
    transmit_mailbox = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	73fb      	strb	r3, [r7, #15]
 8000364:	e015      	b.n	8000392 <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800036e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000372:	d102      	bne.n	800037a <CAN_Transmit+0x36>
  {
    transmit_mailbox = 1;
 8000374:	2301      	movs	r3, #1
 8000376:	73fb      	strb	r3, [r7, #15]
 8000378:	e00b      	b.n	8000392 <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000386:	d102      	bne.n	800038e <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 2;
 8000388:	2302      	movs	r3, #2
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e001      	b.n	8000392 <CAN_Transmit+0x4e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 800038e:	2304      	movs	r3, #4
 8000390:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	2b04      	cmp	r3, #4
 8000396:	f000 809f 	beq.w	80004d8 <CAN_Transmit+0x194>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	3318      	adds	r3, #24
 80003a0:	011b      	lsls	r3, r3, #4
 80003a2:	4413      	add	r3, r2
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	f002 0201 	and.w	r2, r2, #1
 80003ac:	6879      	ldr	r1, [r7, #4]
 80003ae:	3318      	adds	r3, #24
 80003b0:	011b      	lsls	r3, r3, #4
 80003b2:	440b      	add	r3, r1
 80003b4:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	7a1b      	ldrb	r3, [r3, #8]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d113      	bne.n	80003e6 <CAN_Transmit+0xa2>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80003be:	7bfb      	ldrb	r3, [r7, #15]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	3318      	adds	r3, #24
 80003c4:	011b      	lsls	r3, r3, #4
 80003c6:	4413      	add	r3, r2
 80003c8:	6819      	ldr	r1, [r3, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
 80003d0:	683a      	ldr	r2, [r7, #0]
 80003d2:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80003d4:	431a      	orrs	r2, r3
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	430a      	orrs	r2, r1
 80003da:	6879      	ldr	r1, [r7, #4]
 80003dc:	3318      	adds	r3, #24
 80003de:	011b      	lsls	r3, r3, #4
 80003e0:	440b      	add	r3, r1
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	e015      	b.n	8000412 <CAN_Transmit+0xce>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	3318      	adds	r3, #24
 80003ec:	011b      	lsls	r3, r3, #4
 80003ee:	4413      	add	r3, r2
 80003f0:	6819      	ldr	r1, [r3, #0]
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
 80003f8:	683a      	ldr	r2, [r7, #0]
 80003fa:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80003fc:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
 80003fe:	683a      	ldr	r2, [r7, #0]
 8000400:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
 8000402:	431a      	orrs	r2, r3
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	430a      	orrs	r2, r1
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	3318      	adds	r3, #24
 800040c:	011b      	lsls	r3, r3, #4
 800040e:	440b      	add	r3, r1
 8000410:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	7a9b      	ldrb	r3, [r3, #10]
 8000416:	f003 030f 	and.w	r3, r3, #15
 800041a:	b2da      	uxtb	r2, r3
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8000420:	7bfb      	ldrb	r3, [r7, #15]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	3318      	adds	r3, #24
 8000426:	011b      	lsls	r3, r3, #4
 8000428:	4413      	add	r3, r2
 800042a:	3304      	adds	r3, #4
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	f022 020f 	bic.w	r2, r2, #15
 8000434:	6879      	ldr	r1, [r7, #4]
 8000436:	3318      	adds	r3, #24
 8000438:	011b      	lsls	r3, r3, #4
 800043a:	440b      	add	r3, r1
 800043c:	3304      	adds	r3, #4
 800043e:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	3318      	adds	r3, #24
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	4413      	add	r3, r2
 800044a:	3304      	adds	r3, #4
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	7a9b      	ldrb	r3, [r3, #10]
 8000452:	4619      	mov	r1, r3
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	430a      	orrs	r2, r1
 8000458:	6879      	ldr	r1, [r7, #4]
 800045a:	3318      	adds	r3, #24
 800045c:	011b      	lsls	r3, r3, #4
 800045e:	440b      	add	r3, r1
 8000460:	3304      	adds	r3, #4
 8000462:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	7b9b      	ldrb	r3, [r3, #14]
 8000468:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	7b5b      	ldrb	r3, [r3, #13]
 800046e:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000470:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	7b1b      	ldrb	r3, [r3, #12]
 8000476:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8000478:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[0]));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	7adb      	ldrb	r3, [r3, #11]
 800047e:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000480:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8000482:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	011b      	lsls	r3, r3, #4
 8000488:	440b      	add	r3, r1
 800048a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800048e:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	7c9b      	ldrb	r3, [r3, #18]
 8000494:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	7c5b      	ldrb	r3, [r3, #17]
 800049a:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800049c:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	7c1b      	ldrb	r3, [r3, #16]
 80004a2:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80004a4:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[4]));
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	7bdb      	ldrb	r3, [r3, #15]
 80004aa:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80004ac:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80004ae:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80004b0:	6879      	ldr	r1, [r7, #4]
 80004b2:	011b      	lsls	r3, r3, #4
 80004b4:	440b      	add	r3, r1
 80004b6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80004ba:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	3318      	adds	r3, #24
 80004c2:	011b      	lsls	r3, r3, #4
 80004c4:	4413      	add	r3, r2
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	f042 0201 	orr.w	r2, r2, #1
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	3318      	adds	r3, #24
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	440b      	add	r3, r1
 80004d6:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 80004e6:	b480      	push	{r7}
 80004e8:	b085      	sub	sp, #20
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	60f8      	str	r0, [r7, #12]
 80004ee:	460b      	mov	r3, r1
 80004f0:	607a      	str	r2, [r7, #4]
 80004f2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80004f4:	7afb      	ldrb	r3, [r7, #11]
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	331b      	adds	r3, #27
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	4413      	add	r3, r2
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	b2da      	uxtb	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	7a1b      	ldrb	r3, [r3, #8]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10b      	bne.n	800052c <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000514:	7afb      	ldrb	r3, [r7, #11]
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	331b      	adds	r3, #27
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	4413      	add	r3, r2
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	0d5b      	lsrs	r3, r3, #21
 8000522:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e00a      	b.n	8000542 <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 800052c:	7afb      	ldrb	r3, [r7, #11]
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	331b      	adds	r3, #27
 8000532:	011b      	lsls	r3, r3, #4
 8000534:	4413      	add	r3, r2
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	08db      	lsrs	r3, r3, #3
 800053a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	331b      	adds	r3, #27
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	4413      	add	r3, r2
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	b2da      	uxtb	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 800055a:	7afb      	ldrb	r3, [r7, #11]
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	331b      	adds	r3, #27
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	4413      	add	r3, r2
 8000564:	3304      	adds	r3, #4
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	f003 030f 	and.w	r3, r3, #15
 800056e:	b2da      	uxtb	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000574:	7afb      	ldrb	r3, [r7, #11]
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	331b      	adds	r3, #27
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	4413      	add	r3, r2
 800057e:	3304      	adds	r3, #4
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	0a1b      	lsrs	r3, r3, #8
 8000584:	b2da      	uxtb	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 800058a:	7afb      	ldrb	r3, [r7, #11]
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	4413      	add	r3, r2
 8000592:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 800059e:	7afb      	ldrb	r3, [r7, #11]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	011b      	lsls	r3, r3, #4
 80005a4:	4413      	add	r3, r2
 80005a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	0a1b      	lsrs	r3, r3, #8
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 80005b4:	7afb      	ldrb	r3, [r7, #11]
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	4413      	add	r3, r2
 80005bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	0c1b      	lsrs	r3, r3, #16
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 80005ca:	7afb      	ldrb	r3, [r7, #11]
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	4413      	add	r3, r2
 80005d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	0e1b      	lsrs	r3, r3, #24
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 80005e0:	7afb      	ldrb	r3, [r7, #11]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	4413      	add	r3, r2
 80005e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80005f4:	7afb      	ldrb	r3, [r7, #11]
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	4413      	add	r3, r2
 80005fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	b2da      	uxtb	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 800060a:	7afb      	ldrb	r3, [r7, #11]
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	4413      	add	r3, r2
 8000612:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	0c1b      	lsrs	r3, r3, #16
 800061a:	b2da      	uxtb	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000620:	7afb      	ldrb	r3, [r7, #11]
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	4413      	add	r3, r2
 8000628:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	0e1b      	lsrs	r3, r3, #24
 8000630:	b2da      	uxtb	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d106      	bne.n	800064a <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	f043 0220 	orr.w	r2, r3, #32
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8000648:	e005      	b.n	8000656 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	691b      	ldr	r3, [r3, #16]
 800064e:	f043 0220 	orr.w	r2, r3, #32
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	611a      	str	r2, [r3, #16]
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	695a      	ldr	r2, [r3, #20]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	4013      	ands	r3, r2
 800067a:	2b00      	cmp	r3, #0
 800067c:	f000 80b2 	beq.w	80007e4 <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	2b40      	cmp	r3, #64	; 0x40
 8000684:	d062      	beq.n	800074c <CAN_GetITStatus+0xe8>
 8000686:	2b40      	cmp	r3, #64	; 0x40
 8000688:	d80f      	bhi.n	80006aa <CAN_GetITStatus+0x46>
 800068a:	2b04      	cmp	r3, #4
 800068c:	d03a      	beq.n	8000704 <CAN_GetITStatus+0xa0>
 800068e:	2b04      	cmp	r3, #4
 8000690:	d804      	bhi.n	800069c <CAN_GetITStatus+0x38>
 8000692:	2b01      	cmp	r3, #1
 8000694:	d024      	beq.n	80006e0 <CAN_GetITStatus+0x7c>
 8000696:	2b02      	cmp	r3, #2
 8000698:	d02b      	beq.n	80006f2 <CAN_GetITStatus+0x8e>
 800069a:	e09f      	b.n	80007dc <CAN_GetITStatus+0x178>
 800069c:	2b10      	cmp	r3, #16
 800069e:	d043      	beq.n	8000728 <CAN_GetITStatus+0xc4>
 80006a0:	2b20      	cmp	r3, #32
 80006a2:	d04a      	beq.n	800073a <CAN_GetITStatus+0xd6>
 80006a4:	2b08      	cmp	r3, #8
 80006a6:	d036      	beq.n	8000716 <CAN_GetITStatus+0xb2>
 80006a8:	e098      	b.n	80007dc <CAN_GetITStatus+0x178>
 80006aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006ae:	f000 8083 	beq.w	80007b8 <CAN_GetITStatus+0x154>
 80006b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006b6:	d809      	bhi.n	80006cc <CAN_GetITStatus+0x68>
 80006b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006bc:	d06a      	beq.n	8000794 <CAN_GetITStatus+0x130>
 80006be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006c2:	d070      	beq.n	80007a6 <CAN_GetITStatus+0x142>
 80006c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006c8:	d05b      	beq.n	8000782 <CAN_GetITStatus+0x11e>
 80006ca:	e087      	b.n	80007dc <CAN_GetITStatus+0x178>
 80006cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006d0:	d045      	beq.n	800075e <CAN_GetITStatus+0xfa>
 80006d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006d6:	d04b      	beq.n	8000770 <CAN_GetITStatus+0x10c>
 80006d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006dc:	d075      	beq.n	80007ca <CAN_GetITStatus+0x166>
 80006de:	e07d      	b.n	80007dc <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	4943      	ldr	r1, [pc, #268]	; (80007f4 <CAN_GetITStatus+0x190>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f886 	bl	80007f8 <CheckITStatus>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]
        break;
 80006f0:	e07a      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	2103      	movs	r1, #3
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f87d 	bl	80007f8 <CheckITStatus>
 80006fe:	4603      	mov	r3, r0
 8000700:	73fb      	strb	r3, [r7, #15]
        break;
 8000702:	e071      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	2108      	movs	r1, #8
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f874 	bl	80007f8 <CheckITStatus>
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
        break;
 8000714:	e068      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	2110      	movs	r1, #16
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f86b 	bl	80007f8 <CheckITStatus>
 8000722:	4603      	mov	r3, r0
 8000724:	73fb      	strb	r3, [r7, #15]
        break;
 8000726:	e05f      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	2103      	movs	r1, #3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f862 	bl	80007f8 <CheckITStatus>
 8000734:	4603      	mov	r3, r0
 8000736:	73fb      	strb	r3, [r7, #15]
        break;
 8000738:	e056      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	2108      	movs	r1, #8
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f859 	bl	80007f8 <CheckITStatus>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
        break;
 800074a:	e04d      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	2110      	movs	r1, #16
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f850 	bl	80007f8 <CheckITStatus>
 8000758:	4603      	mov	r3, r0
 800075a:	73fb      	strb	r3, [r7, #15]
        break;
 800075c:	e044      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	2108      	movs	r1, #8
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f847 	bl	80007f8 <CheckITStatus>
 800076a:	4603      	mov	r3, r0
 800076c:	73fb      	strb	r3, [r7, #15]
        break;
 800076e:	e03b      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	2110      	movs	r1, #16
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f83e 	bl	80007f8 <CheckITStatus>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
        break;
 8000780:	e032      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f835 	bl	80007f8 <CheckITStatus>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
        break;
 8000792:	e029      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	2102      	movs	r1, #2
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f82c 	bl	80007f8 <CheckITStatus>
 80007a0:	4603      	mov	r3, r0
 80007a2:	73fb      	strb	r3, [r7, #15]
        break;
 80007a4:	e020      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	2104      	movs	r1, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f823 	bl	80007f8 <CheckITStatus>
 80007b2:	4603      	mov	r3, r0
 80007b4:	73fb      	strb	r3, [r7, #15]
        break;
 80007b6:	e017      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	2170      	movs	r1, #112	; 0x70
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f81a 	bl	80007f8 <CheckITStatus>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
        break;
 80007c8:	e00e      	b.n	80007e8 <CAN_GetITStatus+0x184>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	2104      	movs	r1, #4
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f811 	bl	80007f8 <CheckITStatus>
 80007d6:	4603      	mov	r3, r0
 80007d8:	73fb      	strb	r3, [r7, #15]
        break;
 80007da:	e005      	b.n	80007e8 <CAN_GetITStatus+0x184>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]
        break;
 80007e0:	bf00      	nop
 80007e2:	e001      	b.n	80007e8 <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	00010101 	.word	0x00010101

080007f8 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	4013      	ands	r3, r2
 800080c:	2b00      	cmp	r3, #0
 800080e:	d002      	beq.n	8000816 <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8000810:	2301      	movs	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	e001      	b.n	800081a <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 800081a:	7bfb      	ldrb	r3, [r7, #15]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000834:	4b34      	ldr	r3, [pc, #208]	; (8000908 <EXTI_Init+0xe0>)
 8000836:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	799b      	ldrb	r3, [r3, #6]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d04f      	beq.n	80008e0 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <EXTI_Init+0xe0>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	43db      	mvns	r3, r3
 800084a:	492f      	ldr	r1, [pc, #188]	; (8000908 <EXTI_Init+0xe0>)
 800084c:	4013      	ands	r3, r2
 800084e:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <EXTI_Init+0xe0>)
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	43db      	mvns	r3, r3
 800085a:	492b      	ldr	r1, [pc, #172]	; (8000908 <EXTI_Init+0xe0>)
 800085c:	4013      	ands	r3, r2
 800085e:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	461a      	mov	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4413      	add	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	6819      	ldr	r1, [r3, #0]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	430a      	orrs	r2, r1
 8000878:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <EXTI_Init+0xe0>)
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	43db      	mvns	r3, r3
 8000884:	4920      	ldr	r1, [pc, #128]	; (8000908 <EXTI_Init+0xe0>)
 8000886:	4013      	ands	r3, r2
 8000888:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <EXTI_Init+0xe0>)
 800088c:	68da      	ldr	r2, [r3, #12]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	43db      	mvns	r3, r3
 8000894:	491c      	ldr	r1, [pc, #112]	; (8000908 <EXTI_Init+0xe0>)
 8000896:	4013      	ands	r3, r2
 8000898:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	795b      	ldrb	r3, [r3, #5]
 800089e:	2b10      	cmp	r3, #16
 80008a0:	d10e      	bne.n	80008c0 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <EXTI_Init+0xe0>)
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4917      	ldr	r1, [pc, #92]	; (8000908 <EXTI_Init+0xe0>)
 80008ac:	4313      	orrs	r3, r2
 80008ae:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <EXTI_Init+0xe0>)
 80008b2:	68da      	ldr	r2, [r3, #12]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4913      	ldr	r1, [pc, #76]	; (8000908 <EXTI_Init+0xe0>)
 80008ba:	4313      	orrs	r3, r2
 80008bc:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80008be:	e01d      	b.n	80008fc <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <EXTI_Init+0xe0>)
 80008c2:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	795b      	ldrb	r3, [r3, #5]
 80008c8:	461a      	mov	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4413      	add	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	430a      	orrs	r2, r1
 80008dc:	601a      	str	r2, [r3, #0]
}
 80008de:	e00d      	b.n	80008fc <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	461a      	mov	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4413      	add	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6819      	ldr	r1, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	43da      	mvns	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	400a      	ands	r2, r1
 80008fa:	601a      	str	r2, [r3, #0]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	40013c00 	.word	0x40013c00

0800090c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <EXTI_GetITStatus+0x44>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	4013      	ands	r3, r2
 8000924:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <EXTI_GetITStatus+0x44>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4013      	ands	r3, r2
 800092e:	2b00      	cmp	r3, #0
 8000930:	d005      	beq.n	800093e <EXTI_GetITStatus+0x32>
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e001      	b.n	8000942 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000942:	7bfb      	ldrb	r3, [r7, #15]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40013c00 	.word	0x40013c00

08000954 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <EXTI_ClearITPendingBit+0x1c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6153      	str	r3, [r2, #20]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40013c00 	.word	0x40013c00

08000974 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000974:	b480      	push	{r7}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	e076      	b.n	8000a7e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000990:	2201      	movs	r2, #1
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d165      	bne.n	8000a78 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2103      	movs	r1, #3
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	401a      	ands	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	791b      	ldrb	r3, [r3, #4]
 80009ca:	4619      	mov	r1, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	fa01 f303 	lsl.w	r3, r1, r3
 80009d4:	431a      	orrs	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	791b      	ldrb	r3, [r3, #4]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d003      	beq.n	80009ea <GPIO_Init+0x76>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	791b      	ldrb	r3, [r3, #4]
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d12e      	bne.n	8000a48 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	2103      	movs	r1, #3
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	401a      	ands	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689a      	ldr	r2, [r3, #8]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	795b      	ldrb	r3, [r3, #5]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	431a      	orrs	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	2301      	movs	r3, #1
 8000a24:	408b      	lsls	r3, r1
 8000a26:	43db      	mvns	r3, r3
 8000a28:	401a      	ands	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	7992      	ldrb	r2, [r2, #6]
 8000a36:	4611      	mov	r1, r2
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	b292      	uxth	r2, r2
 8000a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a40:	b292      	uxth	r2, r2
 8000a42:	431a      	orrs	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2103      	movs	r1, #3
 8000a54:	fa01 f303 	lsl.w	r3, r1, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	79db      	ldrb	r3, [r3, #7]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d985      	bls.n	8000990 <GPIO_Init+0x1c>
    }
  }
}
 8000a84:	bf00      	nop
 8000a86:	371c      	adds	r7, #28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	887a      	ldrh	r2, [r7, #2]
 8000aa0:	831a      	strh	r2, [r3, #24]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	887a      	ldrh	r2, [r7, #2]
 8000abe:	835a      	strh	r2, [r3, #26]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	695a      	ldr	r2, [r3, #20]
 8000adc:	887b      	ldrh	r3, [r7, #2]
 8000ade:	405a      	eors	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	615a      	str	r2, [r3, #20]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
 8000afc:	4613      	mov	r3, r2
 8000afe:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000b08:	787a      	ldrb	r2, [r7, #1]
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	f003 0307 	and.w	r3, r3, #7
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3208      	adds	r2, #8
 8000b24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b28:	887b      	ldrh	r3, [r7, #2]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	210f      	movs	r1, #15
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	8879      	ldrh	r1, [r7, #2]
 8000b3a:	08c9      	lsrs	r1, r1, #3
 8000b3c:	b289      	uxth	r1, r1
 8000b3e:	4608      	mov	r0, r1
 8000b40:	ea02 0103 	and.w	r1, r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f100 0208 	add.w	r2, r0, #8
 8000b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	08db      	lsrs	r3, r3, #3
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3208      	adds	r2, #8
 8000b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	08db      	lsrs	r3, r3, #3
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3208      	adds	r2, #8
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <I2C_DeInit+0x68>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d10a      	bne.n	8000baa <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000b94:	2101      	movs	r1, #1
 8000b96:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000b9a:	f000 fb57 	bl	800124c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000ba4:	f000 fb52 	bl	800124c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8000ba8:	e01c      	b.n	8000be4 <I2C_DeInit+0x60>
  else if (I2Cx == I2C2)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <I2C_DeInit+0x6c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10a      	bne.n	8000bc8 <I2C_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000bb8:	f000 fb48 	bl	800124c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000bc2:	f000 fb43 	bl	800124c <RCC_APB1PeriphResetCmd>
}
 8000bc6:	e00d      	b.n	8000be4 <I2C_DeInit+0x60>
    if (I2Cx == I2C3)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <I2C_DeInit+0x70>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d109      	bne.n	8000be4 <I2C_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000bd6:	f000 fb39 	bl	800124c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8000bda:	2100      	movs	r1, #0
 8000bdc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000be0:	f000 fb34 	bl	800124c <RCC_APB1PeriphResetCmd>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	40005800 	.word	0x40005800
 8000bf4:	40005c00 	.word	0x40005c00

08000bf8 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000c06:	2300      	movs	r3, #0
 8000c08:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000c0e:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <I2C_Init+0x174>)
 8000c10:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	889b      	ldrh	r3, [r3, #4]
 8000c16:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000c18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c1e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fa09 	bl	800103c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	4a4f      	ldr	r2, [pc, #316]	; (8000d70 <I2C_Init+0x178>)
 8000c32:	fba2 2303 	umull	r2, r3, r2, r3
 8000c36:	0c9b      	lsrs	r3, r3, #18
 8000c38:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000c3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c46:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	f023 0301 	bic.w	r3, r3, #1
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a44      	ldr	r2, [pc, #272]	; (8000d74 <I2C_Init+0x17c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d815      	bhi.n	8000c92 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	69fa      	ldr	r2, [r7, #28]
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000c74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d801      	bhi.n	8000c7e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000c7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c82:	4313      	orrs	r3, r2
 8000c84:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000c86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	841a      	strh	r2, [r3, #32]
 8000c90:	e040      	b.n	8000d14 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	88db      	ldrh	r3, [r3, #6]
 8000c96:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d109      	bne.n	8000cb2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	69fa      	ldr	r2, [r7, #28]
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000cb0:	e00e      	b.n	8000cd0 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	009a      	lsls	r2, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	69fa      	ldr	r2, [r7, #28]
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000cc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cce:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000cd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000ce2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000cf2:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000cf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000cf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cfa:	fb02 f303 	mul.w	r3, r2, r3
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <I2C_Init+0x180>)
 8000d00:	fb82 1203 	smull	r1, r2, r2, r3
 8000d04:	1192      	asrs	r2, r2, #6
 8000d06:	17db      	asrs	r3, r3, #31
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d18:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000d30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d32:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000d36:	f023 0302 	bic.w	r3, r3, #2
 8000d3a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	889a      	ldrh	r2, [r3, #4]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	895b      	ldrh	r3, [r3, #10]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d52:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	899a      	ldrh	r2, [r3, #12]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	891b      	ldrh	r3, [r3, #8]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	811a      	strh	r2, [r3, #8]
}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	007a1200 	.word	0x007a1200
 8000d70:	431bde83 	.word	0x431bde83
 8000d74:	000186a0 	.word	0x000186a0
 8000d78:	10624dd3 	.word	0x10624dd3

08000d7c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d008      	beq.n	8000da0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000d9e:	e007      	b.n	8000db0 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	f023 0301 	bic.w	r3, r3, #1
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	801a      	strh	r2, [r3, #0]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d008      	beq.n	8000de0 <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	f023 0310 	bic.w	r3, r3, #16
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	849a      	strh	r2, [r3, #36]	; 0x24
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
  }
}
 8000dde:	e007      	b.n	8000df0 <I2C_AnalogFilterCmd+0x34>
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d008      	beq.n	8000e20 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8000e1e:	e007      	b.n	8000e30 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	801a      	strh	r2, [r3, #0]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d008      	beq.n	8000e60 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000e5e:	e007      	b.n	8000e70 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	801a      	strh	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000e8c:	78bb      	ldrb	r3, [r7, #2]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d004      	beq.n	8000e9c <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8000e92:	78fb      	ldrb	r3, [r7, #3]
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	70fb      	strb	r3, [r7, #3]
 8000e9a:	e003      	b.n	8000ea4 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	f023 0301 	bic.w	r3, r3, #1
 8000ea2:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	821a      	strh	r2, [r3, #16]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d008      	beq.n	8000edc <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8000eda:	e007      	b.n	8000eec <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	801a      	strh	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f0a:	d108      	bne.n	8000f1e <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
  }
}
 8000f1c:	e007      	b.n	8000f2e <I2C_NACKPositionConfig+0x36>
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	801a      	strh	r2, [r3, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	821a      	strh	r2, [r3, #16]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	8a1b      	ldrh	r3, [r3, #16]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b087      	sub	sp, #28
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	8a9b      	ldrh	r3, [r3, #20]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	8b1b      	ldrh	r3, [r3, #24]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	041b      	lsls	r3, r3, #16
 8000fa4:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000fb0:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d102      	bne.n	8000fc4 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	75fb      	strb	r3, [r7, #23]
 8000fc2:	e001      	b.n	8000fc8 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	0f1b      	lsrs	r3, r3, #28
 8000ff4:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ffc:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3314      	adds	r3, #20
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e005      	b.n	8001018 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	0c1b      	lsrs	r3, r3, #16
 8001010:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3318      	adds	r3, #24
 8001016:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	4013      	ands	r3, r2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001024:	2301      	movs	r3, #1
 8001026:	75fb      	strb	r3, [r7, #23]
 8001028:	e001      	b.n	800102e <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800102e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001030:	4618      	mov	r0, r3
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	2302      	movs	r3, #2
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800105c:	4b47      	ldr	r3, [pc, #284]	; (800117c <RCC_GetClocksFreq+0x140>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b04      	cmp	r3, #4
 800106a:	d007      	beq.n	800107c <RCC_GetClocksFreq+0x40>
 800106c:	2b08      	cmp	r3, #8
 800106e:	d009      	beq.n	8001084 <RCC_GetClocksFreq+0x48>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d13d      	bne.n	80010f0 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a42      	ldr	r2, [pc, #264]	; (8001180 <RCC_GetClocksFreq+0x144>)
 8001078:	601a      	str	r2, [r3, #0]
      break;
 800107a:	e03d      	b.n	80010f8 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a41      	ldr	r2, [pc, #260]	; (8001184 <RCC_GetClocksFreq+0x148>)
 8001080:	601a      	str	r2, [r3, #0]
      break;
 8001082:	e039      	b.n	80010f8 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001084:	4b3d      	ldr	r3, [pc, #244]	; (800117c <RCC_GetClocksFreq+0x140>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	0d9b      	lsrs	r3, r3, #22
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001090:	4b3a      	ldr	r3, [pc, #232]	; (800117c <RCC_GetClocksFreq+0x140>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001098:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00c      	beq.n	80010ba <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010a0:	4a38      	ldr	r2, [pc, #224]	; (8001184 <RCC_GetClocksFreq+0x148>)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a8:	4a34      	ldr	r2, [pc, #208]	; (800117c <RCC_GetClocksFreq+0x140>)
 80010aa:	6852      	ldr	r2, [r2, #4]
 80010ac:	0992      	lsrs	r2, r2, #6
 80010ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	e00b      	b.n	80010d2 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80010ba:	4a31      	ldr	r2, [pc, #196]	; (8001180 <RCC_GetClocksFreq+0x144>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4a2e      	ldr	r2, [pc, #184]	; (800117c <RCC_GetClocksFreq+0x140>)
 80010c4:	6852      	ldr	r2, [r2, #4]
 80010c6:	0992      	lsrs	r2, r2, #6
 80010c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010cc:	fb02 f303 	mul.w	r3, r2, r3
 80010d0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <RCC_GetClocksFreq+0x140>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	0c1b      	lsrs	r3, r3, #16
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	3301      	adds	r3, #1
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80010e2:	69fa      	ldr	r2, [r7, #28]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	601a      	str	r2, [r3, #0]
      break;
 80010ee:	e003      	b.n	80010f8 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a23      	ldr	r2, [pc, #140]	; (8001180 <RCC_GetClocksFreq+0x144>)
 80010f4:	601a      	str	r2, [r3, #0]
      break;
 80010f6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <RCC_GetClocksFreq+0x140>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001100:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001108:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <RCC_GetClocksFreq+0x14c>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	40da      	lsrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <RCC_GetClocksFreq+0x140>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001128:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	0a9b      	lsrs	r3, r3, #10
 800112e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <RCC_GetClocksFreq+0x14c>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	40da      	lsrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <RCC_GetClocksFreq+0x140>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001150:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	0b5b      	lsrs	r3, r3, #13
 8001156:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <RCC_GetClocksFreq+0x14c>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	40da      	lsrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	60da      	str	r2, [r3, #12]
}
 8001170:	bf00      	nop
 8001172:	3724      	adds	r7, #36	; 0x24
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40023800 	.word	0x40023800
 8001180:	00f42400 	.word	0x00f42400
 8001184:	007a1200 	.word	0x007a1200
 8001188:	20000000 	.word	0x20000000

0800118c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a2:	4909      	ldr	r1, [pc, #36]	; (80011c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80011aa:	e006      	b.n	80011ba <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4904      	ldr	r1, [pc, #16]	; (80011c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <RCC_APB1PeriphClockCmd+0x3c>)
 80011e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e2:	4909      	ldr	r1, [pc, #36]	; (8001208 <RCC_APB1PeriphClockCmd+0x3c>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80011ea:	e006      	b.n	80011fa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <RCC_APB1PeriphClockCmd+0x3c>)
 80011ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4904      	ldr	r1, [pc, #16]	; (8001208 <RCC_APB1PeriphClockCmd+0x3c>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <RCC_APB2PeriphClockCmd+0x3c>)
 8001220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001222:	4909      	ldr	r1, [pc, #36]	; (8001248 <RCC_APB2PeriphClockCmd+0x3c>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800122a:	e006      	b.n	800123a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <RCC_APB2PeriphClockCmd+0x3c>)
 800122e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	43db      	mvns	r3, r3
 8001234:	4904      	ldr	r1, [pc, #16]	; (8001248 <RCC_APB2PeriphClockCmd+0x3c>)
 8001236:	4013      	ands	r3, r2
 8001238:	644b      	str	r3, [r1, #68]	; 0x44
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <RCC_APB1PeriphResetCmd+0x3c>)
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	4909      	ldr	r1, [pc, #36]	; (8001288 <RCC_APB1PeriphResetCmd+0x3c>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4313      	orrs	r3, r2
 8001268:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800126a:	e006      	b.n	800127a <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <RCC_APB1PeriphResetCmd+0x3c>)
 800126e:	6a1a      	ldr	r2, [r3, #32]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	43db      	mvns	r3, r3
 8001274:	4904      	ldr	r1, [pc, #16]	; (8001288 <RCC_APB1PeriphResetCmd+0x3c>)
 8001276:	4013      	ands	r3, r2
 8001278:	620b      	str	r3, [r1, #32]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	460a      	mov	r2, r1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	4613      	mov	r3, r2
 800129a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80012b0:	4a16      	ldr	r2, [pc, #88]	; (800130c <SYSCFG_EXTILineConfig+0x80>)
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4812      	ldr	r0, [pc, #72]	; (800130c <SYSCFG_EXTILineConfig+0x80>)
 80012c4:	79b9      	ldrb	r1, [r7, #6]
 80012c6:	0889      	lsrs	r1, r1, #2
 80012c8:	b2c9      	uxtb	r1, r1
 80012ca:	401a      	ands	r2, r3
 80012cc:	1c8b      	adds	r3, r1, #2
 80012ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <SYSCFG_EXTILineConfig+0x80>)
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3302      	adds	r3, #2
 80012dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012e0:	79f9      	ldrb	r1, [r7, #7]
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <SYSCFG_EXTILineConfig+0x80>)
 80012f0:	79b9      	ldrb	r1, [r7, #6]
 80012f2:	0889      	lsrs	r1, r1, #2
 80012f4:	b2c9      	uxtb	r1, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	1c8b      	adds	r3, r1, #2
 80012fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40013800 	.word	0x40013800

08001310 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	809a      	strh	r2, [r3, #4]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	889b      	ldrh	r3, [r3, #4]
 8001340:	b29b      	uxth	r3, r3
 8001342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001346:	b29b      	uxth	r3, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	b29a      	uxth	r2, r3
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	4013      	ands	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	e001      	b.n	800137e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <Init_ONBOARD_BUTTONs>:
	gpio_button.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOx, &gpio_button);
};

void Init_ONBOARD_BUTTONs(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
	setup_clock_for_GPIO(GPIOC, ENABLE);
 8001392:	2101      	movs	r1, #1
 8001394:	483b      	ldr	r0, [pc, #236]	; (8001484 <Init_ONBOARD_BUTTONs+0xf8>)
 8001396:	f001 f90f 	bl	80025b8 <setup_clock_for_GPIO>
	setup_clock_for_GPIO(GPIOA, ENABLE);
 800139a:	2101      	movs	r1, #1
 800139c:	483a      	ldr	r0, [pc, #232]	; (8001488 <Init_ONBOARD_BUTTONs+0xfc>)
 800139e:	f001 f90b 	bl	80025b8 <setup_clock_for_GPIO>
	GPIO_InitTypeDef gpio_button;
	gpio_button.GPIO_Pin = BUTTON_PINS;
 80013a2:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 80013a6:	613b      	str	r3, [r7, #16]
	gpio_button.GPIO_OType = GPIO_OType_PP;
 80013a8:	2300      	movs	r3, #0
 80013aa:	75bb      	strb	r3, [r7, #22]
	gpio_button.GPIO_Mode = GPIO_Mode_IN;
 80013ac:	2300      	movs	r3, #0
 80013ae:	753b      	strb	r3, [r7, #20]
	gpio_button.GPIO_PuPd = GPIO_PuPd_DOWN;// GPIO_PuPd_UP
 80013b0:	2302      	movs	r3, #2
 80013b2:	75fb      	strb	r3, [r7, #23]
	gpio_button.GPIO_Speed = GPIO_Speed_50MHz;
 80013b4:	2302      	movs	r3, #2
 80013b6:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOC, &gpio_button);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	4831      	ldr	r0, [pc, #196]	; (8001484 <Init_ONBOARD_BUTTONs+0xf8>)
 80013c0:	f7ff fad8 	bl	8000974 <GPIO_Init>
	gpio_button.GPIO_Pin = USER_DISCO_BUTTON | OK_BUTTON;
 80013c4:	f248 0301 	movw	r3, #32769	; 0x8001
 80013c8:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOA, &gpio_button);//for  OK_BUTTON and USER_DISCO_BUTTON
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	4619      	mov	r1, r3
 80013d0:	482d      	ldr	r0, [pc, #180]	; (8001488 <Init_ONBOARD_BUTTONs+0xfc>)
 80013d2:	f7ff facf 	bl	8000974 <GPIO_Init>

	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80013d6:	2101      	movs	r1, #1
 80013d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013dc:	f7ff ff16 	bl	800120c <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 80013e0:	2100      	movs	r1, #0
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff ff52 	bl	800128c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource15);
 80013e8:	210f      	movs	r1, #15
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff ff4e 	bl	800128c <SYSCFG_EXTILineConfig>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 80013f0:	2106      	movs	r1, #6
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff ff4a 	bl	800128c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource8);
 80013f8:	2108      	movs	r1, #8
 80013fa:	2002      	movs	r0, #2
 80013fc:	f7ff ff46 	bl	800128c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource9);
 8001400:	2109      	movs	r1, #9
 8001402:	2002      	movs	r0, #2
 8001404:	f7ff ff42 	bl	800128c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource11);
 8001408:	210b      	movs	r1, #11
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff ff3e 	bl	800128c <SYSCFG_EXTILineConfig>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI9_5_IRQn;
 8001410:	2317      	movs	r3, #23
 8001412:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800141c:	2301      	movs	r3, #1
 800141e:	71fb      	strb	r3, [r7, #7]

	EXTI_InitStruct.EXTI_Line = EXTI_Line6 | EXTI_Line8 | EXTI_Line9;
 8001420:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001424:	60bb      	str	r3, [r7, #8]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8001426:	2300      	movs	r3, #0
 8001428:	733b      	strb	r3, [r7, #12]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 800142a:	230c      	movs	r3, #12
 800142c:	737b      	strb	r3, [r7, #13]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 800142e:	2301      	movs	r3, #1
 8001430:	73bb      	strb	r3, [r7, #14]

	NVIC_Init(&NVIC_InitStruct);
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe ff23 	bl	8000280 <NVIC_Init>
	EXTI_Init(&EXTI_InitStruct);
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f9f2 	bl	8000828 <EXTI_Init>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI15_10_IRQn;
 8001444:	2328      	movs	r3, #40	; 0x28
 8001446:	713b      	strb	r3, [r7, #4]
	EXTI_InitStruct.EXTI_Line = EXTI_Line11 | EXTI_Line15;
 8001448:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800144c:	60bb      	str	r3, [r7, #8]

	NVIC_Init(&NVIC_InitStruct);
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ff15 	bl	8000280 <NVIC_Init>
	EXTI_Init(&EXTI_InitStruct);
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f9e4 	bl	8000828 <EXTI_Init>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
 8001460:	2306      	movs	r3, #6
 8001462:	713b      	strb	r3, [r7, #4]
	EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 8001464:	2301      	movs	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]

	NVIC_Init(&NVIC_InitStruct);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe ff08 	bl	8000280 <NVIC_Init>
	EXTI_Init(&EXTI_InitStruct);
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f9d7 	bl	8000828 <EXTI_Init>
};
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40020800 	.word	0x40020800
 8001488:	40020000 	.word	0x40020000

0800148c <CAN_transmit_data>:
//	NVIC_Init(&NVIC_InitStructure);

}

void CAN_transmit_data(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
	CanTxMsg TxMessage;
	TxMessage.StdId = CAN_MASSEGE_ID_REQ;
 8001492:	23a1      	movs	r3, #161	; 0xa1
 8001494:	607b      	str	r3, [r7, #4]

	TxMessage.ExtId = 0x00;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]

	TxMessage.IDE = CAN_Id_Standard;
 800149a:	2300      	movs	r3, #0
 800149c:	733b      	strb	r3, [r7, #12]
	TxMessage.RTR = CAN_RTR_DATA;
 800149e:	2300      	movs	r3, #0
 80014a0:	737b      	strb	r3, [r7, #13]
	TxMessage.DLC = 3;
 80014a2:	2303      	movs	r3, #3
 80014a4:	73bb      	strb	r3, [r7, #14]

	TxMessage.Data[0] = 0x31;
 80014a6:	2331      	movs	r3, #49	; 0x31
 80014a8:	73fb      	strb	r3, [r7, #15]
	TxMessage.Data[1] = 0x32;
 80014aa:	2332      	movs	r3, #50	; 0x32
 80014ac:	743b      	strb	r3, [r7, #16]
	TxMessage.Data[2] = 0x33;
 80014ae:	2333      	movs	r3, #51	; 0x33
 80014b0:	747b      	strb	r3, [r7, #17]

	CAN_Transmit(CAN1, &TxMessage);
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4803      	ldr	r0, [pc, #12]	; (80014c4 <CAN_transmit_data+0x38>)
 80014b8:	f7fe ff44 	bl	8000344 <CAN_Transmit>

}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40006400 	.word	0x40006400

080014c8 <Display_Init>:
#include "DISPLAY_WH1602B_4Bit.h"
//#include <stdio.h>

static char empty_field[] = "                                ";
void Display_Init()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	delay_milis(40);
 80014cc:	2028      	movs	r0, #40	; 0x28
 80014ce:	f001 f84f 	bl	8002570 <delay_milis>

	Display_Write_Ins(0x02); 	//as per documentation set 4-bit mode
 80014d2:	2002      	movs	r0, #2
 80014d4:	f000 f81e 	bl	8001514 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 80014d8:	2001      	movs	r0, #1
 80014da:	f001 f849 	bl	8002570 <delay_milis>

//	Display_Write_Ins(0x28);
	Display_Write_Ins(TWO_LINE_MODE);
 80014de:	2028      	movs	r0, #40	; 0x28
 80014e0:	f000 f818 	bl	8001514 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 80014e4:	2001      	movs	r0, #1
 80014e6:	f001 f843 	bl	8002570 <delay_milis>

//	Display_Write_Ins(0x0F);
	Display_Write_Ins(DISPLAY_ON | CURSOR_OFF | CURSOR_BLINK_OFF);
 80014ea:	200c      	movs	r0, #12
 80014ec:	f000 f812 	bl	8001514 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f001 f83d 	bl	8002570 <delay_milis>

//	Display_Write_Ins(0x01);
	Display_Write_Ins(DISPLAY_CLEAR);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f000 f80c 	bl	8001514 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f001 f837 	bl	8002570 <delay_milis>

//	Display_Write_Ins(0x06);
	Display_Write_Ins(INCREMENT_MODE | ENTIRE_SHIFT_OFF);
 8001502:	2006      	movs	r0, #6
 8001504:	f000 f806 	bl	8001514 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8001508:	2001      	movs	r0, #1
 800150a:	f001 f831 	bl	8002570 <delay_milis>

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <Display_Write_Ins>:

void Display_Write_Ins(char instruction)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RS);
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	484a      	ldr	r0, [pc, #296]	; (800164c <Display_Write_Ins+0x138>)
 8001522:	f7ff fac4 	bl	8000aae <GPIO_ResetBits>
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RW);
 8001526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152a:	4848      	ldr	r0, [pc, #288]	; (800164c <Display_Write_Ins+0x138>)
 800152c:	f7ff fabf 	bl	8000aae <GPIO_ResetBits>

	instruction & DISPLAY_BIT_7_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	da05      	bge.n	8001544 <Display_Write_Ins+0x30>
 8001538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153c:	4843      	ldr	r0, [pc, #268]	; (800164c <Display_Write_Ins+0x138>)
 800153e:	f7ff faa7 	bl	8000a90 <GPIO_SetBits>
 8001542:	e004      	b.n	800154e <Display_Write_Ins+0x3a>
 8001544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001548:	4840      	ldr	r0, [pc, #256]	; (800164c <Display_Write_Ins+0x138>)
 800154a:	f7ff fab0 	bl	8000aae <GPIO_ResetBits>
	instruction & DISPLAY_BIT_6_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <Display_Write_Ins+0x50>
 8001558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800155c:	483b      	ldr	r0, [pc, #236]	; (800164c <Display_Write_Ins+0x138>)
 800155e:	f7ff fa97 	bl	8000a90 <GPIO_SetBits>
 8001562:	e004      	b.n	800156e <Display_Write_Ins+0x5a>
 8001564:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001568:	4838      	ldr	r0, [pc, #224]	; (800164c <Display_Write_Ins+0x138>)
 800156a:	f7ff faa0 	bl	8000aae <GPIO_ResetBits>
	instruction & DISPLAY_BIT_5_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 0320 	and.w	r3, r3, #32
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <Display_Write_Ins+0x70>
 8001578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157c:	4833      	ldr	r0, [pc, #204]	; (800164c <Display_Write_Ins+0x138>)
 800157e:	f7ff fa87 	bl	8000a90 <GPIO_SetBits>
 8001582:	e004      	b.n	800158e <Display_Write_Ins+0x7a>
 8001584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001588:	4830      	ldr	r0, [pc, #192]	; (800164c <Display_Write_Ins+0x138>)
 800158a:	f7ff fa90 	bl	8000aae <GPIO_ResetBits>
	instruction & DISPLAY_BIT_4_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 0310 	and.w	r3, r3, #16
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <Display_Write_Ins+0x90>
 8001598:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800159c:	482b      	ldr	r0, [pc, #172]	; (800164c <Display_Write_Ins+0x138>)
 800159e:	f7ff fa77 	bl	8000a90 <GPIO_SetBits>
 80015a2:	e004      	b.n	80015ae <Display_Write_Ins+0x9a>
 80015a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a8:	4828      	ldr	r0, [pc, #160]	; (800164c <Display_Write_Ins+0x138>)
 80015aa:	f7ff fa80 	bl	8000aae <GPIO_ResetBits>

	Display_RW_pusle();
 80015ae:	f000 f939 	bl	8001824 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f000 ffdc 	bl	8002570 <delay_milis>

	instruction & DISPLAY_BIT_3_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <Display_Write_Ins+0xba>
 80015c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c6:	4821      	ldr	r0, [pc, #132]	; (800164c <Display_Write_Ins+0x138>)
 80015c8:	f7ff fa62 	bl	8000a90 <GPIO_SetBits>
 80015cc:	e004      	b.n	80015d8 <Display_Write_Ins+0xc4>
 80015ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d2:	481e      	ldr	r0, [pc, #120]	; (800164c <Display_Write_Ins+0x138>)
 80015d4:	f7ff fa6b 	bl	8000aae <GPIO_ResetBits>
	instruction & DISPLAY_BIT_2_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <Display_Write_Ins+0xda>
 80015e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e6:	4819      	ldr	r0, [pc, #100]	; (800164c <Display_Write_Ins+0x138>)
 80015e8:	f7ff fa52 	bl	8000a90 <GPIO_SetBits>
 80015ec:	e004      	b.n	80015f8 <Display_Write_Ins+0xe4>
 80015ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f2:	4816      	ldr	r0, [pc, #88]	; (800164c <Display_Write_Ins+0x138>)
 80015f4:	f7ff fa5b 	bl	8000aae <GPIO_ResetBits>
	instruction & DISPLAY_BIT_1_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <Display_Write_Ins+0xfa>
 8001602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001606:	4811      	ldr	r0, [pc, #68]	; (800164c <Display_Write_Ins+0x138>)
 8001608:	f7ff fa42 	bl	8000a90 <GPIO_SetBits>
 800160c:	e004      	b.n	8001618 <Display_Write_Ins+0x104>
 800160e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <Display_Write_Ins+0x138>)
 8001614:	f7ff fa4b 	bl	8000aae <GPIO_ResetBits>
	instruction & DISPLAY_BIT_0_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <Display_Write_Ins+0x11a>
 8001622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001626:	4809      	ldr	r0, [pc, #36]	; (800164c <Display_Write_Ins+0x138>)
 8001628:	f7ff fa32 	bl	8000a90 <GPIO_SetBits>
 800162c:	e004      	b.n	8001638 <Display_Write_Ins+0x124>
 800162e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <Display_Write_Ins+0x138>)
 8001634:	f7ff fa3b 	bl	8000aae <GPIO_ResetBits>

	Display_RW_pusle();
 8001638:	f000 f8f4 	bl	8001824 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 800163c:	2001      	movs	r0, #1
 800163e:	f000 ff97 	bl	8002570 <delay_milis>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000

08001650 <Display_Write_Data>:

void Display_Write_Data(char data)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
	GPIO_SetBits(DISPLAY_PORT, DISPLAY_RS);
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	484a      	ldr	r0, [pc, #296]	; (8001788 <Display_Write_Data+0x138>)
 800165e:	f7ff fa17 	bl	8000a90 <GPIO_SetBits>
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RW);
 8001662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001666:	4848      	ldr	r0, [pc, #288]	; (8001788 <Display_Write_Data+0x138>)
 8001668:	f7ff fa21 	bl	8000aae <GPIO_ResetBits>

	data & DISPLAY_BIT_7_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da05      	bge.n	8001680 <Display_Write_Data+0x30>
 8001674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001678:	4843      	ldr	r0, [pc, #268]	; (8001788 <Display_Write_Data+0x138>)
 800167a:	f7ff fa09 	bl	8000a90 <GPIO_SetBits>
 800167e:	e004      	b.n	800168a <Display_Write_Data+0x3a>
 8001680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001684:	4840      	ldr	r0, [pc, #256]	; (8001788 <Display_Write_Data+0x138>)
 8001686:	f7ff fa12 	bl	8000aae <GPIO_ResetBits>
	data & DISPLAY_BIT_6_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <Display_Write_Data+0x50>
 8001694:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001698:	483b      	ldr	r0, [pc, #236]	; (8001788 <Display_Write_Data+0x138>)
 800169a:	f7ff f9f9 	bl	8000a90 <GPIO_SetBits>
 800169e:	e004      	b.n	80016aa <Display_Write_Data+0x5a>
 80016a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a4:	4838      	ldr	r0, [pc, #224]	; (8001788 <Display_Write_Data+0x138>)
 80016a6:	f7ff fa02 	bl	8000aae <GPIO_ResetBits>
	data & DISPLAY_BIT_5_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <Display_Write_Data+0x70>
 80016b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b8:	4833      	ldr	r0, [pc, #204]	; (8001788 <Display_Write_Data+0x138>)
 80016ba:	f7ff f9e9 	bl	8000a90 <GPIO_SetBits>
 80016be:	e004      	b.n	80016ca <Display_Write_Data+0x7a>
 80016c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c4:	4830      	ldr	r0, [pc, #192]	; (8001788 <Display_Write_Data+0x138>)
 80016c6:	f7ff f9f2 	bl	8000aae <GPIO_ResetBits>
	data & DISPLAY_BIT_4_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <Display_Write_Data+0x90>
 80016d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d8:	482b      	ldr	r0, [pc, #172]	; (8001788 <Display_Write_Data+0x138>)
 80016da:	f7ff f9d9 	bl	8000a90 <GPIO_SetBits>
 80016de:	e004      	b.n	80016ea <Display_Write_Data+0x9a>
 80016e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e4:	4828      	ldr	r0, [pc, #160]	; (8001788 <Display_Write_Data+0x138>)
 80016e6:	f7ff f9e2 	bl	8000aae <GPIO_ResetBits>

	Display_RW_pusle();
 80016ea:	f000 f89b 	bl	8001824 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 ff3e 	bl	8002570 <delay_milis>

	data & DISPLAY_BIT_3_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <Display_Write_Data+0xba>
 80016fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001702:	4821      	ldr	r0, [pc, #132]	; (8001788 <Display_Write_Data+0x138>)
 8001704:	f7ff f9c4 	bl	8000a90 <GPIO_SetBits>
 8001708:	e004      	b.n	8001714 <Display_Write_Data+0xc4>
 800170a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800170e:	481e      	ldr	r0, [pc, #120]	; (8001788 <Display_Write_Data+0x138>)
 8001710:	f7ff f9cd 	bl	8000aae <GPIO_ResetBits>
	data & DISPLAY_BIT_2_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <Display_Write_Data+0xda>
 800171e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001722:	4819      	ldr	r0, [pc, #100]	; (8001788 <Display_Write_Data+0x138>)
 8001724:	f7ff f9b4 	bl	8000a90 <GPIO_SetBits>
 8001728:	e004      	b.n	8001734 <Display_Write_Data+0xe4>
 800172a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800172e:	4816      	ldr	r0, [pc, #88]	; (8001788 <Display_Write_Data+0x138>)
 8001730:	f7ff f9bd 	bl	8000aae <GPIO_ResetBits>
	data & DISPLAY_BIT_1_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <Display_Write_Data+0xfa>
 800173e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001742:	4811      	ldr	r0, [pc, #68]	; (8001788 <Display_Write_Data+0x138>)
 8001744:	f7ff f9a4 	bl	8000a90 <GPIO_SetBits>
 8001748:	e004      	b.n	8001754 <Display_Write_Data+0x104>
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <Display_Write_Data+0x138>)
 8001750:	f7ff f9ad 	bl	8000aae <GPIO_ResetBits>
	data & DISPLAY_BIT_0_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <Display_Write_Data+0x11a>
 800175e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <Display_Write_Data+0x138>)
 8001764:	f7ff f994 	bl	8000a90 <GPIO_SetBits>
 8001768:	e004      	b.n	8001774 <Display_Write_Data+0x124>
 800176a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <Display_Write_Data+0x138>)
 8001770:	f7ff f99d 	bl	8000aae <GPIO_ResetBits>

	Display_RW_pusle();
 8001774:	f000 f856 	bl	8001824 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8001778:	2001      	movs	r0, #1
 800177a:	f000 fef9 	bl	8002570 <delay_milis>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <Display_Write_Data_Array>:

void Display_Write_Data_Array(char *data, uint8_t length)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	70fb      	strb	r3, [r7, #3]
	if(length > DISPLAY_MAX_CHARACKTERS_COUNT)
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	2b20      	cmp	r3, #32
 800179c:	d90c      	bls.n	80017b8 <Display_Write_Data_Array+0x2c>
	{
		error_signal(LED_PORT, RED_LED);
 800179e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <Display_Write_Data_Array+0x44>)
 80017a4:	f000 f876 	bl	8001894 <error_signal>
	}
	while(length--)
 80017a8:	e006      	b.n	80017b8 <Display_Write_Data_Array+0x2c>
	{
		Display_Write_Data(*data++);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff4c 	bl	8001650 <Display_Write_Data>
	while(length--)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	1e5a      	subs	r2, r3, #1
 80017bc:	70fa      	strb	r2, [r7, #3]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f3      	bne.n	80017aa <Display_Write_Data_Array+0x1e>
	}
	delay_milis(DISPLAY_DELAY);
 80017c2:	2001      	movs	r0, #1
 80017c4:	f000 fed4 	bl	8002570 <delay_milis>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40020c00 	.word	0x40020c00

080017d4 <Display_init_GPIO>:

void Display_init_GPIO(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
	delay_milis(400);
 80017da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80017de:	f000 fec7 	bl	8002570 <delay_milis>
	setup_clock_for_GPIO(DISPLAY_PORT, ENABLE);
 80017e2:	2101      	movs	r1, #1
 80017e4:	480e      	ldr	r0, [pc, #56]	; (8001820 <Display_init_GPIO+0x4c>)
 80017e6:	f000 fee7 	bl	80025b8 <setup_clock_for_GPIO>
	GPIO_InitTypeDef DISPLAY_GPIO;
	DISPLAY_GPIO.GPIO_Mode = GPIO_Mode_OUT;
 80017ea:	2301      	movs	r3, #1
 80017ec:	713b      	strb	r3, [r7, #4]
	DISPLAY_GPIO.GPIO_Speed = GPIO_Speed_50MHz;
 80017ee:	2302      	movs	r3, #2
 80017f0:	717b      	strb	r3, [r7, #5]
	DISPLAY_GPIO.GPIO_OType = GPIO_OType_PP;
 80017f2:	2300      	movs	r3, #0
 80017f4:	71bb      	strb	r3, [r7, #6]
	DISPLAY_GPIO.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	71fb      	strb	r3, [r7, #7]

	DISPLAY_GPIO.GPIO_Pin = DISPLAY_RS |  DISPLAY_RW | DISPLAY_ENA | DISPLAY_DB7 | DISPLAY_DB6 | DISPLAY_DB5 | DISPLAY_DB4;
 80017fa:	f64f 4380 	movw	r3, #64640	; 0xfc80
 80017fe:	603b      	str	r3, [r7, #0]
	GPIO_Init(DISPLAY_PORT, &DISPLAY_GPIO);
 8001800:	463b      	mov	r3, r7
 8001802:	4619      	mov	r1, r3
 8001804:	4806      	ldr	r0, [pc, #24]	; (8001820 <Display_init_GPIO+0x4c>)
 8001806:	f7ff f8b5 	bl	8000974 <GPIO_Init>
	GPIO_SetBits(DISPLAY_PORT, DISPLAY_GPIO.GPIO_Pin);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4619      	mov	r1, r3
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <Display_init_GPIO+0x4c>)
 8001812:	f7ff f93d 	bl	8000a90 <GPIO_SetBits>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000

08001824 <Display_RW_pusle>:

//pulse
void Display_RW_pusle(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    GPIO_SetBits(DISPLAY_PORT, DISPLAY_ENA);
 8001828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800182c:	4806      	ldr	r0, [pc, #24]	; (8001848 <Display_RW_pusle+0x24>)
 800182e:	f7ff f92f 	bl	8000a90 <GPIO_SetBits>
    delay_milis(DISPLAY_DELAY);
 8001832:	2001      	movs	r0, #1
 8001834:	f000 fe9c 	bl	8002570 <delay_milis>
    GPIO_ResetBits(DISPLAY_PORT, DISPLAY_ENA);
 8001838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <Display_RW_pusle+0x24>)
 800183e:	f7ff f936 	bl	8000aae <GPIO_ResetBits>
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000

0800184c <Display_clear>:
	}

}

void Display_clear(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	Display_Write_Ins(DISPLAY_CLEAR);
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff fe5f 	bl	8001514 <Display_Write_Ins>
	delay_milis(2);
 8001856:	2002      	movs	r0, #2
 8001858:	f000 fe8a 	bl	8002570 <delay_milis>
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <Display_clear_field>:


void Display_clear_field(uint8_t size)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	while(size--)
 800186a:	e002      	b.n	8001872 <Display_clear_field+0x12>
	{
		Display_Write_Data(' ');
 800186c:	2020      	movs	r0, #32
 800186e:	f7ff feef 	bl	8001650 <Display_Write_Data>
	while(size--)
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	1e5a      	subs	r2, r3, #1
 8001876:	71fa      	strb	r2, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f7      	bne.n	800186c <Display_clear_field+0xc>
	}
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <setup_Display>:

void setup_Display(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	Display_init_GPIO();
 8001888:	f7ff ffa4 	bl	80017d4 <Display_init_GPIO>
	Display_Init();
 800188c:	f7ff fe1c 	bl	80014c8 <Display_Init>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <error_signal>:
	GPIO_Init(GPIOx, &gpio_led);
	GPIO_ResetBits(GPIOx, pin_for_LEDx);
}

void error_signal(GPIO_TypeDef* GPIOx, uint16_t pin_for_LEDx)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
	GPIO_SetBits(GPIOx, pin_for_LEDx);
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff f8f3 	bl	8000a90 <GPIO_SetBits>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <MEMS_set_mode>:
#include "MEMS.h"
#include "DISPLAY_WH1602B_4Bit.h"
#include "Buttons.h"

void MEMS_set_mode(MEMS_Mode mode)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d833      	bhi.n	800192c <MEMS_set_mode+0x78>
 80018c4:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <MEMS_set_mode+0x18>)
 80018c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ca:	bf00      	nop
 80018cc:	080018dd 	.word	0x080018dd
 80018d0:	080018eb 	.word	0x080018eb
 80018d4:	080018f9 	.word	0x080018f9
 80018d8:	08001913 	.word	0x08001913
		case ACCELEROMETER:
			I2C_transmit_byte_to_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, CTRL_REG6_XL, ODR_MASK_952_HZ | ACCEL_SCALE_SELECTION_MASK_16G | ACCEL_BANDWIDTH_MASK_408_HZ);
 80018dc:	23c8      	movs	r3, #200	; 0xc8
 80018de:	2220      	movs	r2, #32
 80018e0:	21d6      	movs	r1, #214	; 0xd6
 80018e2:	4815      	ldr	r0, [pc, #84]	; (8001938 <MEMS_set_mode+0x84>)
 80018e4:	f000 ff2c 	bl	8002740 <I2C_transmit_byte_to_reg>
			break;
 80018e8:	e021      	b.n	800192e <MEMS_set_mode+0x7a>
		case ACCELEROMETER_AND_GYROSCOPE:
			I2C_transmit_byte_to_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, CTRL_REG1_G, ODR_MASK_952_HZ | GYRO_SCALE_SELECTION_MASK_245_DPS | GYRO_BANDWIDTH_MASK_0);
 80018ea:	23c0      	movs	r3, #192	; 0xc0
 80018ec:	2210      	movs	r2, #16
 80018ee:	21d6      	movs	r1, #214	; 0xd6
 80018f0:	4811      	ldr	r0, [pc, #68]	; (8001938 <MEMS_set_mode+0x84>)
 80018f2:	f000 ff25 	bl	8002740 <I2C_transmit_byte_to_reg>
			break;
 80018f6:	e01a      	b.n	800192e <MEMS_set_mode+0x7a>
		case MAGNETOMETR:
			I2C_transmit_byte_to_reg(MEMS_I2C_PERIPH, MEMS_MAGNETIC_SLAVE_ADDRESS,  CTRL_REG1_M,  0x1C);
 80018f8:	231c      	movs	r3, #28
 80018fa:	2220      	movs	r2, #32
 80018fc:	213c      	movs	r1, #60	; 0x3c
 80018fe:	480e      	ldr	r0, [pc, #56]	; (8001938 <MEMS_set_mode+0x84>)
 8001900:	f000 ff1e 	bl	8002740 <I2C_transmit_byte_to_reg>
			I2C_transmit_byte_to_reg(MEMS_I2C_PERIPH, MEMS_MAGNETIC_SLAVE_ADDRESS,  CTRL_REG3_M,  MAGNETIC_OPERATING_MODE_CC_MASK);
 8001904:	2300      	movs	r3, #0
 8001906:	2222      	movs	r2, #34	; 0x22
 8001908:	213c      	movs	r1, #60	; 0x3c
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <MEMS_set_mode+0x84>)
 800190c:	f000 ff18 	bl	8002740 <I2C_transmit_byte_to_reg>

			break;
 8001910:	e00d      	b.n	800192e <MEMS_set_mode+0x7a>
		case POWER_DOWN:
			I2C_transmit_byte_to_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, CTRL_REG1_G, ODR_MASK_POWER_DOWN);
 8001912:	2300      	movs	r3, #0
 8001914:	2210      	movs	r2, #16
 8001916:	21d6      	movs	r1, #214	; 0xd6
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <MEMS_set_mode+0x84>)
 800191a:	f000 ff11 	bl	8002740 <I2C_transmit_byte_to_reg>
			I2C_transmit_byte_to_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, CTRL_REG6_XL, ODR_MASK_POWER_DOWN);
 800191e:	2300      	movs	r3, #0
 8001920:	2220      	movs	r2, #32
 8001922:	21d6      	movs	r1, #214	; 0xd6
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MEMS_set_mode+0x84>)
 8001926:	f000 ff0b 	bl	8002740 <I2C_transmit_byte_to_reg>
			break;
 800192a:	e000      	b.n	800192e <MEMS_set_mode+0x7a>
		default:
			break;
 800192c:	bf00      	nop
	}
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40005400 	.word	0x40005400

0800193c <MEMS_Axis_state_ACCEL>:

void MEMS_Axis_state_ACCEL(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	I2C_transmit_byte_to_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, CTRL_REG5_XL, ACCEL_MASK_X_ENABLE | ACCEL_MASK_Y_ENABLE | ACCEL_MASK_Z_ENABLE);
 8001940:	2338      	movs	r3, #56	; 0x38
 8001942:	221f      	movs	r2, #31
 8001944:	21d6      	movs	r1, #214	; 0xd6
 8001946:	4802      	ldr	r0, [pc, #8]	; (8001950 <MEMS_Axis_state_ACCEL+0x14>)
 8001948:	f000 fefa 	bl	8002740 <I2C_transmit_byte_to_reg>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40005400 	.word	0x40005400

08001954 <MEMS_Axis_state_GYRO>:

void MEMS_Axis_state_GYRO(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	I2C_transmit_byte_to_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, CTRL_REG4, ACCEL_MASK_X_ENABLE | ACCEL_MASK_Y_ENABLE | ACCEL_MASK_Z_ENABLE);
 8001958:	2338      	movs	r3, #56	; 0x38
 800195a:	221e      	movs	r2, #30
 800195c:	21d6      	movs	r1, #214	; 0xd6
 800195e:	4802      	ldr	r0, [pc, #8]	; (8001968 <MEMS_Axis_state_GYRO+0x14>)
 8001960:	f000 feee 	bl	8002740 <I2C_transmit_byte_to_reg>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40005400 	.word	0x40005400

0800196c <MEMS_Init>:


void MEMS_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	MEMS_set_mode(ACCELEROMETER);
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff ff9f 	bl	80018b4 <MEMS_set_mode>
	MEMS_set_mode(ACCELEROMETER_AND_GYROSCOPE);
 8001976:	2001      	movs	r0, #1
 8001978:	f7ff ff9c 	bl	80018b4 <MEMS_set_mode>
	MEMS_set_mode(MAGNETOMETR);
 800197c:	2002      	movs	r0, #2
 800197e:	f7ff ff99 	bl	80018b4 <MEMS_set_mode>
//	MEMS_set_mode(POWER_DOWN);
	MEMS_Axis_state_ACCEL();
 8001982:	f7ff ffdb 	bl	800193c <MEMS_Axis_state_ACCEL>
	MEMS_Axis_state_GYRO();
 8001986:	f7ff ffe5 	bl	8001954 <MEMS_Axis_state_GYRO>
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <MEMS_read_GYROSCOPE>:

void MEMS_read_GYROSCOPE(MEMS_data *data)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	737b      	strb	r3, [r7, #13]
	int16_t buff = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	81fb      	strh	r3, [r7, #14]
	data->X = 0; data->Y = 0; data->Z = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	801a      	strh	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	805a      	strh	r2, [r3, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	809a      	strh	r2, [r3, #4]

	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_X_H_G, &tmp);
 80019b2:	f107 030d 	add.w	r3, r7, #13
 80019b6:	2219      	movs	r2, #25
 80019b8:	21d6      	movs	r1, #214	; 0xd6
 80019ba:	4845      	ldr	r0, [pc, #276]	; (8001ad0 <MEMS_read_GYROSCOPE+0x140>)
 80019bc:	f000 ff1c 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff = tmp; buff <<= 8;
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	81fb      	strh	r3, [r7, #14]
 80019c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	81fb      	strh	r3, [r7, #14]
	data->X = tmp; data->X <<= 8;
 80019cc:	7b7b      	ldrb	r3, [r7, #13]
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	801a      	strh	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	b21a      	sxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	801a      	strh	r2, [r3, #0]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_X_L_G, &tmp);
 80019e2:	f107 030d 	add.w	r3, r7, #13
 80019e6:	2218      	movs	r2, #24
 80019e8:	21d6      	movs	r1, #214	; 0xd6
 80019ea:	4839      	ldr	r0, [pc, #228]	; (8001ad0 <MEMS_read_GYROSCOPE+0x140>)
 80019ec:	f000 ff04 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff |= tmp;
 80019f0:	7b7b      	ldrb	r3, [r7, #13]
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	81fb      	strh	r3, [r7, #14]
	data->X |= tmp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a00:	7b7b      	ldrb	r3, [r7, #13]
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	801a      	strh	r2, [r3, #0]
	//data->X = (float)(((0.732)*(float)(buff))/100);

	tmp=0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	737b      	strb	r3, [r7, #13]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_Y_H_G, &tmp);
 8001a10:	f107 030d 	add.w	r3, r7, #13
 8001a14:	221b      	movs	r2, #27
 8001a16:	21d6      	movs	r1, #214	; 0xd6
 8001a18:	482d      	ldr	r0, [pc, #180]	; (8001ad0 <MEMS_read_GYROSCOPE+0x140>)
 8001a1a:	f000 feed 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff = tmp; buff <<= 8;
 8001a1e:	7b7b      	ldrb	r3, [r7, #13]
 8001a20:	81fb      	strh	r3, [r7, #14]
 8001a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	81fb      	strh	r3, [r7, #14]
	data->Y = tmp; data->Y <<= 8;
 8001a2a:	7b7b      	ldrb	r3, [r7, #13]
 8001a2c:	b21a      	sxth	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	805a      	strh	r2, [r3, #2]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	805a      	strh	r2, [r3, #2]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_Y_L_G, &tmp);
 8001a40:	f107 030d 	add.w	r3, r7, #13
 8001a44:	221a      	movs	r2, #26
 8001a46:	21d6      	movs	r1, #214	; 0xd6
 8001a48:	4821      	ldr	r0, [pc, #132]	; (8001ad0 <MEMS_read_GYROSCOPE+0x140>)
 8001a4a:	f000 fed5 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff |= tmp;
 8001a4e:	7b7b      	ldrb	r3, [r7, #13]
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	89fb      	ldrh	r3, [r7, #14]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	81fb      	strh	r3, [r7, #14]
	data->Y |= tmp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001a5e:	7b7b      	ldrb	r3, [r7, #13]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	805a      	strh	r2, [r3, #2]
	//data->Y = (float)(((0.732)*(float)(buff))/100);

	tmp=0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	737b      	strb	r3, [r7, #13]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_Z_H_G, &tmp);
 8001a6e:	f107 030d 	add.w	r3, r7, #13
 8001a72:	221d      	movs	r2, #29
 8001a74:	21d6      	movs	r1, #214	; 0xd6
 8001a76:	4816      	ldr	r0, [pc, #88]	; (8001ad0 <MEMS_read_GYROSCOPE+0x140>)
 8001a78:	f000 febe 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff = tmp; buff <<= 8;
 8001a7c:	7b7b      	ldrb	r3, [r7, #13]
 8001a7e:	81fb      	strh	r3, [r7, #14]
 8001a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	81fb      	strh	r3, [r7, #14]
	data->Z = tmp; data->Z <<= 8;
 8001a88:	7b7b      	ldrb	r3, [r7, #13]
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	809a      	strh	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	809a      	strh	r2, [r3, #4]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_Z_L_G, &tmp);
 8001a9e:	f107 030d 	add.w	r3, r7, #13
 8001aa2:	221c      	movs	r2, #28
 8001aa4:	21d6      	movs	r1, #214	; 0xd6
 8001aa6:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <MEMS_read_GYROSCOPE+0x140>)
 8001aa8:	f000 fea6 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff |= tmp;
 8001aac:	7b7b      	ldrb	r3, [r7, #13]
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	89fb      	ldrh	r3, [r7, #14]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	81fb      	strh	r3, [r7, #14]
	data->Z |= tmp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001abc:	7b7b      	ldrb	r3, [r7, #13]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	809a      	strh	r2, [r3, #4]
	//data->Z = (float)(((0.732)*(float)(buff))/100);

}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40005400 	.word	0x40005400

08001ad4 <MEMS_read_ACCELEROMETR>:

void MEMS_read_ACCELEROMETR(MEMS_data *data)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	737b      	strb	r3, [r7, #13]
	int16_t buff = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	81fb      	strh	r3, [r7, #14]
	data->X = 0; data->Y = 0; data->Z = 0;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	801a      	strh	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	805a      	strh	r2, [r3, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	809a      	strh	r2, [r3, #4]

	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_X_H_XL, &tmp);
 8001af6:	f107 030d 	add.w	r3, r7, #13
 8001afa:	2229      	movs	r2, #41	; 0x29
 8001afc:	21d6      	movs	r1, #214	; 0xd6
 8001afe:	4845      	ldr	r0, [pc, #276]	; (8001c14 <MEMS_read_ACCELEROMETR+0x140>)
 8001b00:	f000 fe7a 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff = tmp; buff <<= 8;
 8001b04:	7b7b      	ldrb	r3, [r7, #13]
 8001b06:	81fb      	strh	r3, [r7, #14]
 8001b08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	81fb      	strh	r3, [r7, #14]
	data->X = tmp; data->X <<= 8;
 8001b10:	7b7b      	ldrb	r3, [r7, #13]
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	801a      	strh	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	801a      	strh	r2, [r3, #0]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_X_L_XL, &tmp);
 8001b26:	f107 030d 	add.w	r3, r7, #13
 8001b2a:	2228      	movs	r2, #40	; 0x28
 8001b2c:	21d6      	movs	r1, #214	; 0xd6
 8001b2e:	4839      	ldr	r0, [pc, #228]	; (8001c14 <MEMS_read_ACCELEROMETR+0x140>)
 8001b30:	f000 fe62 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff |= tmp;
 8001b34:	7b7b      	ldrb	r3, [r7, #13]
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	89fb      	ldrh	r3, [r7, #14]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	81fb      	strh	r3, [r7, #14]
	data->X |= tmp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b44:	7b7b      	ldrb	r3, [r7, #13]
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	801a      	strh	r2, [r3, #0]
	//data->X = (float)(((0.061)*(float)(buff)));

	tmp=0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	737b      	strb	r3, [r7, #13]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_Y_H_XL, &tmp);
 8001b54:	f107 030d 	add.w	r3, r7, #13
 8001b58:	222b      	movs	r2, #43	; 0x2b
 8001b5a:	21d6      	movs	r1, #214	; 0xd6
 8001b5c:	482d      	ldr	r0, [pc, #180]	; (8001c14 <MEMS_read_ACCELEROMETR+0x140>)
 8001b5e:	f000 fe4b 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff = tmp; buff <<= 8;
 8001b62:	7b7b      	ldrb	r3, [r7, #13]
 8001b64:	81fb      	strh	r3, [r7, #14]
 8001b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	81fb      	strh	r3, [r7, #14]
	data->Y = tmp; data->Y <<= 8;
 8001b6e:	7b7b      	ldrb	r3, [r7, #13]
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	805a      	strh	r2, [r3, #2]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	805a      	strh	r2, [r3, #2]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_Y_L_XL, &tmp);
 8001b84:	f107 030d 	add.w	r3, r7, #13
 8001b88:	222a      	movs	r2, #42	; 0x2a
 8001b8a:	21d6      	movs	r1, #214	; 0xd6
 8001b8c:	4821      	ldr	r0, [pc, #132]	; (8001c14 <MEMS_read_ACCELEROMETR+0x140>)
 8001b8e:	f000 fe33 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff |= tmp;
 8001b92:	7b7b      	ldrb	r3, [r7, #13]
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	89fb      	ldrh	r3, [r7, #14]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	81fb      	strh	r3, [r7, #14]
	data->Y |= tmp;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001ba2:	7b7b      	ldrb	r3, [r7, #13]
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	805a      	strh	r2, [r3, #2]
	//data->Y = (float)(((0.061)*(float)(buff)));

	tmp=0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	737b      	strb	r3, [r7, #13]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_Z_H_XL, &tmp);
 8001bb2:	f107 030d 	add.w	r3, r7, #13
 8001bb6:	222d      	movs	r2, #45	; 0x2d
 8001bb8:	21d6      	movs	r1, #214	; 0xd6
 8001bba:	4816      	ldr	r0, [pc, #88]	; (8001c14 <MEMS_read_ACCELEROMETR+0x140>)
 8001bbc:	f000 fe1c 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff = tmp; buff <<= 8;
 8001bc0:	7b7b      	ldrb	r3, [r7, #13]
 8001bc2:	81fb      	strh	r3, [r7, #14]
 8001bc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	81fb      	strh	r3, [r7, #14]
	data->Z = tmp; data->Z <<= 8;
 8001bcc:	7b7b      	ldrb	r3, [r7, #13]
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	809a      	strh	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	809a      	strh	r2, [r3, #4]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_ACCEL_SLAVE_ADDRESS, OUT_Z_L_XL, &tmp);
 8001be2:	f107 030d 	add.w	r3, r7, #13
 8001be6:	222c      	movs	r2, #44	; 0x2c
 8001be8:	21d6      	movs	r1, #214	; 0xd6
 8001bea:	480a      	ldr	r0, [pc, #40]	; (8001c14 <MEMS_read_ACCELEROMETR+0x140>)
 8001bec:	f000 fe04 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff |= tmp;
 8001bf0:	7b7b      	ldrb	r3, [r7, #13]
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	89fb      	ldrh	r3, [r7, #14]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	81fb      	strh	r3, [r7, #14]
	data->Z |= tmp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001c00:	7b7b      	ldrb	r3, [r7, #13]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	809a      	strh	r2, [r3, #4]
	//data->Z = (float)(((0.061)*(float)(buff)));

}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40005400 	.word	0x40005400

08001c18 <MEMS_read_MAGNETOMETR>:


void MEMS_read_MAGNETOMETR(MEMS_data *data)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	737b      	strb	r3, [r7, #13]
	int16_t buff = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	81fb      	strh	r3, [r7, #14]
	data->X = 0; data->Y = 0; data->Z = 0;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	805a      	strh	r2, [r3, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	809a      	strh	r2, [r3, #4]

	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_MAGNETIC_SLAVE_ADDRESS, OUT_X_H_M, &tmp);
 8001c3a:	f107 030d 	add.w	r3, r7, #13
 8001c3e:	2229      	movs	r2, #41	; 0x29
 8001c40:	213c      	movs	r1, #60	; 0x3c
 8001c42:	4845      	ldr	r0, [pc, #276]	; (8001d58 <MEMS_read_MAGNETOMETR+0x140>)
 8001c44:	f000 fdd8 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff = tmp; buff <<= 8;
 8001c48:	7b7b      	ldrb	r3, [r7, #13]
 8001c4a:	81fb      	strh	r3, [r7, #14]
 8001c4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	81fb      	strh	r3, [r7, #14]
	data->X = tmp; data->X <<= 8;
 8001c54:	7b7b      	ldrb	r3, [r7, #13]
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	801a      	strh	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	801a      	strh	r2, [r3, #0]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_MAGNETIC_SLAVE_ADDRESS, OUT_X_L_M, &tmp);
 8001c6a:	f107 030d 	add.w	r3, r7, #13
 8001c6e:	2228      	movs	r2, #40	; 0x28
 8001c70:	213c      	movs	r1, #60	; 0x3c
 8001c72:	4839      	ldr	r0, [pc, #228]	; (8001d58 <MEMS_read_MAGNETOMETR+0x140>)
 8001c74:	f000 fdc0 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff |= tmp;
 8001c78:	7b7b      	ldrb	r3, [r7, #13]
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	89fb      	ldrh	r3, [r7, #14]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	81fb      	strh	r3, [r7, #14]
	data->X |= tmp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c88:	7b7b      	ldrb	r3, [r7, #13]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	801a      	strh	r2, [r3, #0]
	//data->X = (float)(((0.14)*(float)(buff))/100);

	tmp=0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	737b      	strb	r3, [r7, #13]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_MAGNETIC_SLAVE_ADDRESS, OUT_Y_H_M, &tmp);
 8001c98:	f107 030d 	add.w	r3, r7, #13
 8001c9c:	222b      	movs	r2, #43	; 0x2b
 8001c9e:	213c      	movs	r1, #60	; 0x3c
 8001ca0:	482d      	ldr	r0, [pc, #180]	; (8001d58 <MEMS_read_MAGNETOMETR+0x140>)
 8001ca2:	f000 fda9 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff = tmp; buff <<= 8;
 8001ca6:	7b7b      	ldrb	r3, [r7, #13]
 8001ca8:	81fb      	strh	r3, [r7, #14]
 8001caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	81fb      	strh	r3, [r7, #14]
	data->Y = tmp; data->Y <<= 8;
 8001cb2:	7b7b      	ldrb	r3, [r7, #13]
 8001cb4:	b21a      	sxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	805a      	strh	r2, [r3, #2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	805a      	strh	r2, [r3, #2]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_MAGNETIC_SLAVE_ADDRESS, OUT_Y_L_M, &tmp);
 8001cc8:	f107 030d 	add.w	r3, r7, #13
 8001ccc:	222a      	movs	r2, #42	; 0x2a
 8001cce:	213c      	movs	r1, #60	; 0x3c
 8001cd0:	4821      	ldr	r0, [pc, #132]	; (8001d58 <MEMS_read_MAGNETOMETR+0x140>)
 8001cd2:	f000 fd91 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff |= tmp;
 8001cd6:	7b7b      	ldrb	r3, [r7, #13]
 8001cd8:	b21a      	sxth	r2, r3
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	81fb      	strh	r3, [r7, #14]
	data->Y |= tmp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001ce6:	7b7b      	ldrb	r3, [r7, #13]
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	805a      	strh	r2, [r3, #2]
	//data->Y = (float)(((0.14)*(float)(buff))/100);

	tmp=0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	737b      	strb	r3, [r7, #13]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_MAGNETIC_SLAVE_ADDRESS, OUT_Z_H_M, &tmp);
 8001cf6:	f107 030d 	add.w	r3, r7, #13
 8001cfa:	222d      	movs	r2, #45	; 0x2d
 8001cfc:	213c      	movs	r1, #60	; 0x3c
 8001cfe:	4816      	ldr	r0, [pc, #88]	; (8001d58 <MEMS_read_MAGNETOMETR+0x140>)
 8001d00:	f000 fd7a 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff = tmp; buff <<= 8;
 8001d04:	7b7b      	ldrb	r3, [r7, #13]
 8001d06:	81fb      	strh	r3, [r7, #14]
 8001d08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	81fb      	strh	r3, [r7, #14]
	data->Z = tmp; data->Z <<= 8;
 8001d10:	7b7b      	ldrb	r3, [r7, #13]
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	809a      	strh	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	809a      	strh	r2, [r3, #4]
	I2C_receive_byte_from_reg(MEMS_I2C_PERIPH, MEMS_MAGNETIC_SLAVE_ADDRESS, OUT_Z_L_M, &tmp);
 8001d26:	f107 030d 	add.w	r3, r7, #13
 8001d2a:	222c      	movs	r2, #44	; 0x2c
 8001d2c:	213c      	movs	r1, #60	; 0x3c
 8001d2e:	480a      	ldr	r0, [pc, #40]	; (8001d58 <MEMS_read_MAGNETOMETR+0x140>)
 8001d30:	f000 fd62 	bl	80027f8 <I2C_receive_byte_from_reg>
	buff |= tmp;
 8001d34:	7b7b      	ldrb	r3, [r7, #13]
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	89fb      	ldrh	r3, [r7, #14]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	81fb      	strh	r3, [r7, #14]
	data->Z |= tmp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001d44:	7b7b      	ldrb	r3, [r7, #13]
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	809a      	strh	r2, [r3, #4]
	//data->Z = (float)(((0.14)*(float)(buff))/100);
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40005400 	.word	0x40005400

08001d5c <setup_MEMS>:

void setup_MEMS(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	//setup_Display();
	setup_I2C(I2C1);
 8001d60:	4803      	ldr	r0, [pc, #12]	; (8001d70 <setup_MEMS+0x14>)
 8001d62:	f000 fcbb 	bl	80026dc <setup_I2C>
	MEMS_Init();
 8001d66:	f7ff fe01 	bl	800196c <MEMS_Init>
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40005400 	.word	0x40005400

08001d74 <MEMS_example_with_menu>:

	}
}

void MEMS_example_with_menu(void)
{
 8001d74:	b5b0      	push	{r4, r5, r7, lr}
 8001d76:	b0a8      	sub	sp, #160	; 0xa0
 8001d78:	af00      	add	r7, sp, #0
	Display_clear();
 8001d7a:	f7ff fd67 	bl	800184c <Display_clear>
	setup_Display();
 8001d7e:	f7ff fd81 	bl	8001884 <setup_Display>
	Init_ONBOARD_BUTTONs();
 8001d82:	f7ff fb03 	bl	800138c <Init_ONBOARD_BUTTONs>

	char MEMS_modes_list[3][16] = {"ACCELEROMETER", "GYROSCOPE", "MAGNETOMETER"};
 8001d86:	4bcd      	ldr	r3, [pc, #820]	; (80020bc <MEMS_example_with_menu+0x348>)
 8001d88:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001d8c:	461d      	mov	r5, r3
 8001d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char MEMS_axises_list[4][16] = {"Only X", "Only Y", "Only Z", "All axes"};
 8001d9e:	4bc8      	ldr	r3, [pc, #800]	; (80020c0 <MEMS_example_with_menu+0x34c>)
 8001da0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001da4:	461d      	mov	r5, r3
 8001da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001db6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Display_Write_Ins(GO_TO_START_FIRST_LINE);
 8001dba:	2080      	movs	r0, #128	; 0x80
 8001dbc:	f7ff fbaa 	bl	8001514 <Display_Write_Ins>
	Display_Write_Data_Array("<----[MODE]---->", 16);
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	48c0      	ldr	r0, [pc, #768]	; (80020c4 <MEMS_example_with_menu+0x350>)
 8001dc4:	f7ff fce2 	bl	800178c <Display_Write_Data_Array>


	uint8_t i = 0, select = 1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	MEMS_Mode mode; uint8_t axis = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	while(1)
	{

		if(OK_BUTTON_state)
 8001dda:	4bbb      	ldr	r3, [pc, #748]	; (80020c8 <MEMS_example_with_menu+0x354>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d025      	beq.n	8001e2e <MEMS_example_with_menu+0xba>
		{
			OK_BUTTON_state=~OK_BUTTON_state;
 8001de2:	4bb9      	ldr	r3, [pc, #740]	; (80020c8 <MEMS_example_with_menu+0x354>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4bb7      	ldr	r3, [pc, #732]	; (80020c8 <MEMS_example_with_menu+0x354>)
 8001dec:	701a      	strb	r2, [r3, #0]
			Display_Write_Ins(GO_TO_START_SECOND_LINE + 15);
 8001dee:	20cf      	movs	r0, #207	; 0xcf
 8001df0:	f7ff fb90 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array("*", 1);
 8001df4:	2101      	movs	r1, #1
 8001df6:	48b5      	ldr	r0, [pc, #724]	; (80020cc <MEMS_example_with_menu+0x358>)
 8001df8:	f7ff fcc8 	bl	800178c <Display_Write_Data_Array>
			delay_milis(750);
 8001dfc:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001e00:	f000 fbb6 	bl	8002570 <delay_milis>
			mode = i;
 8001e04:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e08:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			i=0; select = 1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001e12:	2301      	movs	r3, #1
 8001e14:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			break;
 8001e18:	bf00      	nop
		}

	}


	Display_clear();
 8001e1a:	f7ff fd17 	bl	800184c <Display_clear>
	Display_Write_Ins(GO_TO_START_FIRST_LINE);
 8001e1e:	2080      	movs	r0, #128	; 0x80
 8001e20:	f7ff fb78 	bl	8001514 <Display_Write_Ins>
	Display_Write_Data_Array("<----[AXIS]---->", 16);
 8001e24:	2110      	movs	r1, #16
 8001e26:	48aa      	ldr	r0, [pc, #680]	; (80020d0 <MEMS_example_with_menu+0x35c>)
 8001e28:	f7ff fcb0 	bl	800178c <Display_Write_Data_Array>
 8001e2c:	e070      	b.n	8001f10 <MEMS_example_with_menu+0x19c>
		if(LEFT_BUTTON_state)
 8001e2e:	4ba9      	ldr	r3, [pc, #676]	; (80020d4 <MEMS_example_with_menu+0x360>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d019      	beq.n	8001e6a <MEMS_example_with_menu+0xf6>
			(i > 0 && i < 3)? (i--) : (i=2);
 8001e36:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <MEMS_example_with_menu+0xde>
 8001e3e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d805      	bhi.n	8001e52 <MEMS_example_with_menu+0xde>
 8001e46:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001e50:	e002      	b.n	8001e58 <MEMS_example_with_menu+0xe4>
 8001e52:	2302      	movs	r3, #2
 8001e54:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			LEFT_BUTTON_state=~LEFT_BUTTON_state;
 8001e58:	4b9e      	ldr	r3, [pc, #632]	; (80020d4 <MEMS_example_with_menu+0x360>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b9c      	ldr	r3, [pc, #624]	; (80020d4 <MEMS_example_with_menu+0x360>)
 8001e62:	701a      	strb	r2, [r3, #0]
			select = 1;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		if(RIGHT_BUTTON_state)
 8001e6a:	4b9b      	ldr	r3, [pc, #620]	; (80020d8 <MEMS_example_with_menu+0x364>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d015      	beq.n	8001e9e <MEMS_example_with_menu+0x12a>
			(i >= 0 && i < 2)? (i++) : (i=0);
 8001e72:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d805      	bhi.n	8001e86 <MEMS_example_with_menu+0x112>
 8001e7a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001e84:	e002      	b.n	8001e8c <MEMS_example_with_menu+0x118>
 8001e86:	2300      	movs	r3, #0
 8001e88:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			RIGHT_BUTTON_state=~RIGHT_BUTTON_state;
 8001e8c:	4b92      	ldr	r3, [pc, #584]	; (80020d8 <MEMS_example_with_menu+0x364>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b90      	ldr	r3, [pc, #576]	; (80020d8 <MEMS_example_with_menu+0x364>)
 8001e96:	701a      	strb	r2, [r3, #0]
			select = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		if(select)
 8001e9e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d099      	beq.n	8001dda <MEMS_example_with_menu+0x66>
			Display_Write_Ins(GO_TO_START_SECOND_LINE);
 8001ea6:	20c0      	movs	r0, #192	; 0xc0
 8001ea8:	f7ff fb34 	bl	8001514 <Display_Write_Ins>
			Display_clear_field(DISPLAY_MAX_SECOND_LINE);
 8001eac:	2010      	movs	r0, #16
 8001eae:	f7ff fcd7 	bl	8001860 <Display_clear_field>
			uint8_t offset = (DISPLAY_MAX_SECOND_LINE - strlen(MEMS_modes_list[i]))/2;
 8001eb2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001eb6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe f986 	bl	80001d0 <strlen>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f1c3 0310 	rsb	r3, r3, #16
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
			Display_Write_Ins(GO_TO_START_SECOND_LINE + offset);
 8001ed0:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8001ed4:	3b40      	subs	r3, #64	; 0x40
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fb1b 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(MEMS_modes_list[i], strlen(MEMS_modes_list[i]));
 8001ede:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001ee2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	18d4      	adds	r4, r2, r3
 8001eea:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001eee:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe f96a 	bl	80001d0 <strlen>
 8001efc:	4603      	mov	r3, r0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	4619      	mov	r1, r3
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7ff fc42 	bl	800178c <Display_Write_Data_Array>
			select = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		if(OK_BUTTON_state)
 8001f0e:	e764      	b.n	8001dda <MEMS_example_with_menu+0x66>


	while(1)
	{

		if(OK_BUTTON_state)
 8001f10:	4b6d      	ldr	r3, [pc, #436]	; (80020c8 <MEMS_example_with_menu+0x354>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d05e      	beq.n	8001fd6 <MEMS_example_with_menu+0x262>
		{
			OK_BUTTON_state=~OK_BUTTON_state;
 8001f18:	4b6b      	ldr	r3, [pc, #428]	; (80020c8 <MEMS_example_with_menu+0x354>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b69      	ldr	r3, [pc, #420]	; (80020c8 <MEMS_example_with_menu+0x354>)
 8001f22:	701a      	strb	r2, [r3, #0]
			Display_Write_Ins(GO_TO_START_SECOND_LINE + 15);
 8001f24:	20cf      	movs	r0, #207	; 0xcf
 8001f26:	f7ff faf5 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array("*", 1);
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4867      	ldr	r0, [pc, #412]	; (80020cc <MEMS_example_with_menu+0x358>)
 8001f2e:	f7ff fc2d 	bl	800178c <Display_Write_Data_Array>
			delay_milis(750);
 8001f32:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001f36:	f000 fb1b 	bl	8002570 <delay_milis>
			axis = i;
 8001f3a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001f3e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
			i=0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
 8001f48:	bf00      	nop
		}

	}


	Display_clear();
 8001f4a:	f7ff fc7f 	bl	800184c <Display_clear>
	Display_Write_Ins(GO_TO_START_FIRST_LINE);
 8001f4e:	2080      	movs	r0, #128	; 0x80
 8001f50:	f7ff fae0 	bl	8001514 <Display_Write_Ins>
	Display_Write_Data_Array("M->", 3);
 8001f54:	2103      	movs	r1, #3
 8001f56:	4861      	ldr	r0, [pc, #388]	; (80020dc <MEMS_example_with_menu+0x368>)
 8001f58:	f7ff fc18 	bl	800178c <Display_Write_Data_Array>
	Display_Write_Data_Array(MEMS_modes_list[mode], strlen(MEMS_modes_list[mode]));
 8001f5c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001f60:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	18d4      	adds	r4, r2, r3
 8001f68:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001f6c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	4413      	add	r3, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe f92b 	bl	80001d0 <strlen>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff fc03 	bl	800178c <Display_Write_Data_Array>

	Display_Write_Ins(GO_TO_START_SECOND_LINE);
 8001f86:	20c0      	movs	r0, #192	; 0xc0
 8001f88:	f7ff fac4 	bl	8001514 <Display_Write_Ins>
	Display_Write_Data_Array("XYZ->", 5);
 8001f8c:	2105      	movs	r1, #5
 8001f8e:	4854      	ldr	r0, [pc, #336]	; (80020e0 <MEMS_example_with_menu+0x36c>)
 8001f90:	f7ff fbfc 	bl	800178c <Display_Write_Data_Array>
	Display_Write_Data_Array(MEMS_axises_list[axis], strlen(MEMS_axises_list[axis]));
 8001f94:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8001f98:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	18d4      	adds	r4, r2, r3
 8001fa0:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8001fa4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4413      	add	r3, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe f90f 	bl	80001d0 <strlen>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7ff fbe7 	bl	800178c <Display_Write_Data_Array>
	delay_milis(750);
 8001fbe:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001fc2:	f000 fad5 	bl	8002570 <delay_milis>

	Display_clear();
 8001fc6:	f7ff fc41 	bl	800184c <Display_clear>


	if(axis == Axis_All)
 8001fca:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	f040 80ae 	bne.w	8002130 <MEMS_example_with_menu+0x3bc>
 8001fd4:	e086      	b.n	80020e4 <MEMS_example_with_menu+0x370>
		if(LEFT_BUTTON_state)
 8001fd6:	4b3f      	ldr	r3, [pc, #252]	; (80020d4 <MEMS_example_with_menu+0x360>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d019      	beq.n	8002012 <MEMS_example_with_menu+0x29e>
			(i > 0 && i < 4)? (i--) : (i=3);
 8001fde:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <MEMS_example_with_menu+0x286>
 8001fe6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d805      	bhi.n	8001ffa <MEMS_example_with_menu+0x286>
 8001fee:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001ff8:	e002      	b.n	8002000 <MEMS_example_with_menu+0x28c>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			LEFT_BUTTON_state=~LEFT_BUTTON_state;
 8002000:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <MEMS_example_with_menu+0x360>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	43db      	mvns	r3, r3
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <MEMS_example_with_menu+0x360>)
 800200a:	701a      	strb	r2, [r3, #0]
			select = 1;
 800200c:	2301      	movs	r3, #1
 800200e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		if(RIGHT_BUTTON_state)
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <MEMS_example_with_menu+0x364>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d015      	beq.n	8002046 <MEMS_example_with_menu+0x2d2>
			(i >= 0 && i < 3)? (i++) : (i=0);
 800201a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800201e:	2b02      	cmp	r3, #2
 8002020:	d805      	bhi.n	800202e <MEMS_example_with_menu+0x2ba>
 8002022:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002026:	3301      	adds	r3, #1
 8002028:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800202c:	e002      	b.n	8002034 <MEMS_example_with_menu+0x2c0>
 800202e:	2300      	movs	r3, #0
 8002030:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			RIGHT_BUTTON_state=~RIGHT_BUTTON_state;
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <MEMS_example_with_menu+0x364>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	43db      	mvns	r3, r3
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <MEMS_example_with_menu+0x364>)
 800203e:	701a      	strb	r2, [r3, #0]
			select = 1;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		if(select)
 8002046:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800204a:	2b00      	cmp	r3, #0
 800204c:	f43f af60 	beq.w	8001f10 <MEMS_example_with_menu+0x19c>
			Display_Write_Ins(GO_TO_START_SECOND_LINE);
 8002050:	20c0      	movs	r0, #192	; 0xc0
 8002052:	f7ff fa5f 	bl	8001514 <Display_Write_Ins>
			Display_clear_field(DISPLAY_MAX_SECOND_LINE);
 8002056:	2010      	movs	r0, #16
 8002058:	f7ff fc02 	bl	8001860 <Display_clear_field>
			uint8_t offset = (DISPLAY_MAX_SECOND_LINE - strlen(MEMS_axises_list[i]))/2;
 800205c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002060:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	4413      	add	r3, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe f8b1 	bl	80001d0 <strlen>
 800206e:	4603      	mov	r3, r0
 8002070:	f1c3 0310 	rsb	r3, r3, #16
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
			Display_Write_Ins(GO_TO_START_SECOND_LINE + offset);
 800207a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800207e:	3b40      	subs	r3, #64	; 0x40
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fa46 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(MEMS_axises_list[i], strlen(MEMS_axises_list[i]));
 8002088:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800208c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	18d4      	adds	r4, r2, r3
 8002094:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002098:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4413      	add	r3, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f895 	bl	80001d0 <strlen>
 80020a6:	4603      	mov	r3, r0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	4619      	mov	r1, r3
 80020ac:	4620      	mov	r0, r4
 80020ae:	f7ff fb6d 	bl	800178c <Display_Write_Data_Array>
			select = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		if(OK_BUTTON_state)
 80020b8:	e72a      	b.n	8001f10 <MEMS_example_with_menu+0x19c>
 80020ba:	bf00      	nop
 80020bc:	0800399c 	.word	0x0800399c
 80020c0:	080039cc 	.word	0x080039cc
 80020c4:	08003958 	.word	0x08003958
 80020c8:	200001af 	.word	0x200001af
 80020cc:	0800396c 	.word	0x0800396c
 80020d0:	08003970 	.word	0x08003970
 80020d4:	200001b1 	.word	0x200001b1
 80020d8:	200001ac 	.word	0x200001ac
 80020dc:	08003984 	.word	0x08003984
 80020e0:	08003988 	.word	0x08003988
	{
		Display_Write_Ins(GO_TO_START_FIRST_LINE);
 80020e4:	2080      	movs	r0, #128	; 0x80
 80020e6:	f7ff fa15 	bl	8001514 <Display_Write_Ins>
		Display_Write_Data_Array("x=", 2);
 80020ea:	2102      	movs	r1, #2
 80020ec:	48ec      	ldr	r0, [pc, #944]	; (80024a0 <MEMS_example_with_menu+0x72c>)
 80020ee:	f7ff fb4d 	bl	800178c <Display_Write_Data_Array>

		Display_Write_Ins(GO_TO_START_FIRST_LINE+8);
 80020f2:	2088      	movs	r0, #136	; 0x88
 80020f4:	f7ff fa0e 	bl	8001514 <Display_Write_Ins>
		Display_Write_Data_Array("y=", 2);
 80020f8:	2102      	movs	r1, #2
 80020fa:	48ea      	ldr	r0, [pc, #936]	; (80024a4 <MEMS_example_with_menu+0x730>)
 80020fc:	f7ff fb46 	bl	800178c <Display_Write_Data_Array>
		Display_Write_Ins(GO_TO_START_SECOND_LINE);
 8002100:	20c0      	movs	r0, #192	; 0xc0
 8002102:	f7ff fa07 	bl	8001514 <Display_Write_Ins>
		Display_Write_Data_Array("z=", 2);
 8002106:	2102      	movs	r1, #2
 8002108:	48e7      	ldr	r0, [pc, #924]	; (80024a8 <MEMS_example_with_menu+0x734>)
 800210a:	f7ff fb3f 	bl	800178c <Display_Write_Data_Array>

		Display_Write_Ins(GO_TO_START_SECOND_LINE+8);
 800210e:	20c8      	movs	r0, #200	; 0xc8
 8002110:	f7ff fa00 	bl	8001514 <Display_Write_Ins>
		Display_Write_Data_Array("MODE=", 5);
 8002114:	2105      	movs	r1, #5
 8002116:	48e5      	ldr	r0, [pc, #916]	; (80024ac <MEMS_example_with_menu+0x738>)
 8002118:	f7ff fb38 	bl	800178c <Display_Write_Data_Array>
		Display_Write_Data_Array(MEMS_modes_list[mode], 3);
 800211c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002120:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4413      	add	r3, r2
 8002128:	2103      	movs	r1, #3
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fb2e 	bl	800178c <Display_Write_Data_Array>
	}
	if(axis == Axis_X)
 8002130:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8002134:	2b00      	cmp	r3, #0
 8002136:	d11e      	bne.n	8002176 <MEMS_example_with_menu+0x402>
	{
		Display_Write_Ins(GO_TO_START_FIRST_LINE);
 8002138:	2080      	movs	r0, #128	; 0x80
 800213a:	f7ff f9eb 	bl	8001514 <Display_Write_Ins>
		Display_Write_Data_Array(MEMS_modes_list[mode], strlen(MEMS_modes_list[mode]));
 800213e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002142:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	18d4      	adds	r4, r2, r3
 800214a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800214e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	4413      	add	r3, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f83a 	bl	80001d0 <strlen>
 800215c:	4603      	mov	r3, r0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	4619      	mov	r1, r3
 8002162:	4620      	mov	r0, r4
 8002164:	f7ff fb12 	bl	800178c <Display_Write_Data_Array>
		Display_Write_Ins(GO_TO_START_SECOND_LINE);
 8002168:	20c0      	movs	r0, #192	; 0xc0
 800216a:	f7ff f9d3 	bl	8001514 <Display_Write_Ins>
		Display_Write_Data_Array("X=", 2);
 800216e:	2102      	movs	r1, #2
 8002170:	48cf      	ldr	r0, [pc, #828]	; (80024b0 <MEMS_example_with_menu+0x73c>)
 8002172:	f7ff fb0b 	bl	800178c <Display_Write_Data_Array>
	}
	if(axis == Axis_Y)
 8002176:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800217a:	2b01      	cmp	r3, #1
 800217c:	d11e      	bne.n	80021bc <MEMS_example_with_menu+0x448>
	{
		Display_Write_Ins(GO_TO_START_FIRST_LINE);
 800217e:	2080      	movs	r0, #128	; 0x80
 8002180:	f7ff f9c8 	bl	8001514 <Display_Write_Ins>
		Display_Write_Data_Array(MEMS_modes_list[mode], strlen(MEMS_modes_list[mode]));
 8002184:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002188:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	18d4      	adds	r4, r2, r3
 8002190:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002194:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	4413      	add	r3, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f817 	bl	80001d0 <strlen>
 80021a2:	4603      	mov	r3, r0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4619      	mov	r1, r3
 80021a8:	4620      	mov	r0, r4
 80021aa:	f7ff faef 	bl	800178c <Display_Write_Data_Array>
		Display_Write_Ins(GO_TO_START_SECOND_LINE);
 80021ae:	20c0      	movs	r0, #192	; 0xc0
 80021b0:	f7ff f9b0 	bl	8001514 <Display_Write_Ins>
		Display_Write_Data_Array("Y=", 2);
 80021b4:	2102      	movs	r1, #2
 80021b6:	48bf      	ldr	r0, [pc, #764]	; (80024b4 <MEMS_example_with_menu+0x740>)
 80021b8:	f7ff fae8 	bl	800178c <Display_Write_Data_Array>
	}
	if(axis == Axis_Z)
 80021bc:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d11e      	bne.n	8002202 <MEMS_example_with_menu+0x48e>
	{
		Display_Write_Ins(GO_TO_START_FIRST_LINE);
 80021c4:	2080      	movs	r0, #128	; 0x80
 80021c6:	f7ff f9a5 	bl	8001514 <Display_Write_Ins>
		Display_Write_Data_Array(MEMS_modes_list[mode], strlen(MEMS_modes_list[mode]));
 80021ca:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80021ce:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	18d4      	adds	r4, r2, r3
 80021d6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80021da:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	4413      	add	r3, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fd fff4 	bl	80001d0 <strlen>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4619      	mov	r1, r3
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7ff facc 	bl	800178c <Display_Write_Data_Array>
		Display_Write_Ins(GO_TO_START_SECOND_LINE);
 80021f4:	20c0      	movs	r0, #192	; 0xc0
 80021f6:	f7ff f98d 	bl	8001514 <Display_Write_Ins>
		Display_Write_Data_Array("Z=", 2);
 80021fa:	2102      	movs	r1, #2
 80021fc:	48ae      	ldr	r0, [pc, #696]	; (80024b8 <MEMS_example_with_menu+0x744>)
 80021fe:	f7ff fac5 	bl	800178c <Display_Write_Data_Array>
	}
	setup_MEMS();
 8002202:	f7ff fdab 	bl	8001d5c <setup_MEMS>
	MEMS_data XYZ;
	char tmp[32];
	uint8_t len = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	while(1)
	{

		mode == ACCELEROMETER ? MEMS_read_ACCELEROMETR(&XYZ) : __NOP;
 800220c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002210:	2b00      	cmp	r3, #0
 8002212:	d104      	bne.n	800221e <MEMS_example_with_menu+0x4aa>
 8002214:	f107 0320 	add.w	r3, r7, #32
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fc5b 	bl	8001ad4 <MEMS_read_ACCELEROMETR>
		mode == ACCELEROMETER_AND_GYROSCOPE ? MEMS_read_GYROSCOPE(&XYZ) : __NOP;
 800221e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002222:	2b01      	cmp	r3, #1
 8002224:	d104      	bne.n	8002230 <MEMS_example_with_menu+0x4bc>
 8002226:	f107 0320 	add.w	r3, r7, #32
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fbb0 	bl	8001990 <MEMS_read_GYROSCOPE>
		mode == MAGNETOMETR ? MEMS_read_MAGNETOMETR(&XYZ) : __NOP;
 8002230:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002234:	2b02      	cmp	r3, #2
 8002236:	d104      	bne.n	8002242 <MEMS_example_with_menu+0x4ce>
 8002238:	f107 0320 	add.w	r3, r7, #32
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fceb 	bl	8001c18 <MEMS_read_MAGNETOMETR>
		if (axis == Axis_All)
 8002242:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8002246:	2b03      	cmp	r3, #3
 8002248:	d176      	bne.n	8002338 <MEMS_example_with_menu+0x5c4>
		{
			sprintf(tmp, "%d", XYZ.X);
 800224a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800224e:	461a      	mov	r2, r3
 8002250:	463b      	mov	r3, r7
 8002252:	499a      	ldr	r1, [pc, #616]	; (80024bc <MEMS_example_with_menu+0x748>)
 8002254:	4618      	mov	r0, r3
 8002256:	f000 ff11 	bl	800307c <siprintf>
			len = strlen(tmp);
 800225a:	463b      	mov	r3, r7
 800225c:	4618      	mov	r0, r3
 800225e:	f7fd ffb7 	bl	80001d0 <strlen>
 8002262:	4603      	mov	r3, r0
 8002264:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			Display_Write_Ins(GO_TO_START_FIRST_LINE + 2);
 8002268:	2082      	movs	r0, #130	; 0x82
 800226a:	f7ff f953 	bl	8001514 <Display_Write_Ins>
			Display_clear_field(6);
 800226e:	2006      	movs	r0, #6
 8002270:	f7ff faf6 	bl	8001860 <Display_clear_field>
			Display_Write_Ins(GO_TO_START_FIRST_LINE + 2);
 8002274:	2082      	movs	r0, #130	; 0x82
 8002276:	f7ff f94d 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(tmp, len);
 800227a:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800227e:	463b      	mov	r3, r7
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fa82 	bl	800178c <Display_Write_Data_Array>

			sprintf(tmp, "%d", XYZ.Y);
 8002288:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800228c:	461a      	mov	r2, r3
 800228e:	463b      	mov	r3, r7
 8002290:	498a      	ldr	r1, [pc, #552]	; (80024bc <MEMS_example_with_menu+0x748>)
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fef2 	bl	800307c <siprintf>
			len = strlen(tmp);
 8002298:	463b      	mov	r3, r7
 800229a:	4618      	mov	r0, r3
 800229c:	f7fd ff98 	bl	80001d0 <strlen>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			Display_Write_Ins(GO_TO_START_FIRST_LINE + 8 + 2);
 80022a6:	208a      	movs	r0, #138	; 0x8a
 80022a8:	f7ff f934 	bl	8001514 <Display_Write_Ins>
			Display_clear_field(6);
 80022ac:	2006      	movs	r0, #6
 80022ae:	f7ff fad7 	bl	8001860 <Display_clear_field>
			Display_Write_Ins(GO_TO_START_FIRST_LINE + 8 + 2);
 80022b2:	208a      	movs	r0, #138	; 0x8a
 80022b4:	f7ff f92e 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(tmp, len);
 80022b8:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80022bc:	463b      	mov	r3, r7
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fa63 	bl	800178c <Display_Write_Data_Array>

			sprintf(tmp, "%d", XYZ.Z);
 80022c6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80022ca:	461a      	mov	r2, r3
 80022cc:	463b      	mov	r3, r7
 80022ce:	497b      	ldr	r1, [pc, #492]	; (80024bc <MEMS_example_with_menu+0x748>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fed3 	bl	800307c <siprintf>
			len = strlen(tmp);
 80022d6:	463b      	mov	r3, r7
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fd ff79 	bl	80001d0 <strlen>
 80022de:	4603      	mov	r3, r0
 80022e0:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			Display_Write_Ins(GO_TO_START_SECOND_LINE + 2);
 80022e4:	20c2      	movs	r0, #194	; 0xc2
 80022e6:	f7ff f915 	bl	8001514 <Display_Write_Ins>
			Display_clear_field(6);
 80022ea:	2006      	movs	r0, #6
 80022ec:	f7ff fab8 	bl	8001860 <Display_clear_field>
			Display_Write_Ins(GO_TO_START_SECOND_LINE + 2);
 80022f0:	20c2      	movs	r0, #194	; 0xc2
 80022f2:	f7ff f90f 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(tmp, len);
 80022f6:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80022fa:	463b      	mov	r3, r7
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fa44 	bl	800178c <Display_Write_Data_Array>

			sprintf(tmp, "ALL");
 8002304:	463b      	mov	r3, r7
 8002306:	4a6e      	ldr	r2, [pc, #440]	; (80024c0 <MEMS_example_with_menu+0x74c>)
 8002308:	601a      	str	r2, [r3, #0]
			len = strlen(tmp);
 800230a:	463b      	mov	r3, r7
 800230c:	4618      	mov	r0, r3
 800230e:	f7fd ff5f 	bl	80001d0 <strlen>
 8002312:	4603      	mov	r3, r0
 8002314:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			Display_Write_Ins(GO_TO_START_SECOND_LINE + 8 + 5);
 8002318:	20cd      	movs	r0, #205	; 0xcd
 800231a:	f7ff f8fb 	bl	8001514 <Display_Write_Ins>
			Display_clear_field(6);
 800231e:	2006      	movs	r0, #6
 8002320:	f7ff fa9e 	bl	8001860 <Display_clear_field>
			Display_Write_Ins(GO_TO_START_SECOND_LINE + 8 + 5);
 8002324:	20cd      	movs	r0, #205	; 0xcd
 8002326:	f7ff f8f5 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(tmp, len);
 800232a:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800232e:	463b      	mov	r3, r7
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fa2a 	bl	800178c <Display_Write_Data_Array>
		}
		if (axis == Axis_X)
 8002338:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800233c:	2b00      	cmp	r3, #0
 800233e:	d136      	bne.n	80023ae <MEMS_example_with_menu+0x63a>
		{
			Display_Write_Ins(GO_TO_START_FIRST_LINE);
 8002340:	2080      	movs	r0, #128	; 0x80
 8002342:	f7ff f8e7 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(MEMS_modes_list[mode],strlen(MEMS_modes_list[mode]));
 8002346:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800234a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	18d4      	adds	r4, r2, r3
 8002352:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002356:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	4413      	add	r3, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f7fd ff36 	bl	80001d0 <strlen>
 8002364:	4603      	mov	r3, r0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4619      	mov	r1, r3
 800236a:	4620      	mov	r0, r4
 800236c:	f7ff fa0e 	bl	800178c <Display_Write_Data_Array>
			sprintf(tmp, "%d", XYZ.X);
 8002370:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002374:	461a      	mov	r2, r3
 8002376:	463b      	mov	r3, r7
 8002378:	4950      	ldr	r1, [pc, #320]	; (80024bc <MEMS_example_with_menu+0x748>)
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fe7e 	bl	800307c <siprintf>
			len = strlen(tmp);
 8002380:	463b      	mov	r3, r7
 8002382:	4618      	mov	r0, r3
 8002384:	f7fd ff24 	bl	80001d0 <strlen>
 8002388:	4603      	mov	r3, r0
 800238a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			Display_Write_Ins(GO_TO_START_SECOND_LINE+2);
 800238e:	20c2      	movs	r0, #194	; 0xc2
 8002390:	f7ff f8c0 	bl	8001514 <Display_Write_Ins>
			Display_clear_field(14);
 8002394:	200e      	movs	r0, #14
 8002396:	f7ff fa63 	bl	8001860 <Display_clear_field>
			Display_Write_Ins(GO_TO_START_SECOND_LINE+2);
 800239a:	20c2      	movs	r0, #194	; 0xc2
 800239c:	f7ff f8ba 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(tmp, len);
 80023a0:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80023a4:	463b      	mov	r3, r7
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff f9ef 	bl	800178c <Display_Write_Data_Array>
		}
		if (axis == Axis_Y)
 80023ae:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d136      	bne.n	8002424 <MEMS_example_with_menu+0x6b0>
		{
			Display_Write_Ins(GO_TO_START_FIRST_LINE);
 80023b6:	2080      	movs	r0, #128	; 0x80
 80023b8:	f7ff f8ac 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(MEMS_modes_list[mode], strlen(MEMS_modes_list[mode]));
 80023bc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80023c0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	18d4      	adds	r4, r2, r3
 80023c8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80023cc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fd fefb 	bl	80001d0 <strlen>
 80023da:	4603      	mov	r3, r0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff f9d3 	bl	800178c <Display_Write_Data_Array>
			sprintf(tmp, "%d", XYZ.Y);
 80023e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80023ea:	461a      	mov	r2, r3
 80023ec:	463b      	mov	r3, r7
 80023ee:	4933      	ldr	r1, [pc, #204]	; (80024bc <MEMS_example_with_menu+0x748>)
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fe43 	bl	800307c <siprintf>
			len = strlen(tmp);
 80023f6:	463b      	mov	r3, r7
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fd fee9 	bl	80001d0 <strlen>
 80023fe:	4603      	mov	r3, r0
 8002400:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			Display_Write_Ins(GO_TO_START_SECOND_LINE+2);
 8002404:	20c2      	movs	r0, #194	; 0xc2
 8002406:	f7ff f885 	bl	8001514 <Display_Write_Ins>
			Display_clear_field(14);
 800240a:	200e      	movs	r0, #14
 800240c:	f7ff fa28 	bl	8001860 <Display_clear_field>
			Display_Write_Ins(GO_TO_START_SECOND_LINE+2);
 8002410:	20c2      	movs	r0, #194	; 0xc2
 8002412:	f7ff f87f 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(tmp, len);
 8002416:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800241a:	463b      	mov	r3, r7
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f9b4 	bl	800178c <Display_Write_Data_Array>
		}
		if (axis == Axis_Z)
 8002424:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8002428:	2b02      	cmp	r3, #2
 800242a:	f47f aeef 	bne.w	800220c <MEMS_example_with_menu+0x498>
		{
			Display_Write_Ins(GO_TO_START_FIRST_LINE);
 800242e:	2080      	movs	r0, #128	; 0x80
 8002430:	f7ff f870 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(MEMS_modes_list[mode],strlen(MEMS_modes_list[mode]));
 8002434:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002438:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	18d4      	adds	r4, r2, r3
 8002440:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002444:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	4413      	add	r3, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7fd febf 	bl	80001d0 <strlen>
 8002452:	4603      	mov	r3, r0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	4620      	mov	r0, r4
 800245a:	f7ff f997 	bl	800178c <Display_Write_Data_Array>
			sprintf(tmp, "%d", XYZ.Z);
 800245e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002462:	461a      	mov	r2, r3
 8002464:	463b      	mov	r3, r7
 8002466:	4915      	ldr	r1, [pc, #84]	; (80024bc <MEMS_example_with_menu+0x748>)
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fe07 	bl	800307c <siprintf>
			len = strlen(tmp);
 800246e:	463b      	mov	r3, r7
 8002470:	4618      	mov	r0, r3
 8002472:	f7fd fead 	bl	80001d0 <strlen>
 8002476:	4603      	mov	r3, r0
 8002478:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			Display_Write_Ins(GO_TO_START_SECOND_LINE+2);
 800247c:	20c2      	movs	r0, #194	; 0xc2
 800247e:	f7ff f849 	bl	8001514 <Display_Write_Ins>
			Display_clear_field(14);
 8002482:	200e      	movs	r0, #14
 8002484:	f7ff f9ec 	bl	8001860 <Display_clear_field>
			Display_Write_Ins(GO_TO_START_SECOND_LINE+2);
 8002488:	20c2      	movs	r0, #194	; 0xc2
 800248a:	f7ff f843 	bl	8001514 <Display_Write_Ins>
			Display_Write_Data_Array(tmp, len);
 800248e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8002492:	463b      	mov	r3, r7
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff f978 	bl	800178c <Display_Write_Data_Array>
		mode == ACCELEROMETER ? MEMS_read_ACCELEROMETR(&XYZ) : __NOP;
 800249c:	e6b6      	b.n	800220c <MEMS_example_with_menu+0x498>
 800249e:	bf00      	nop
 80024a0:	08003940 	.word	0x08003940
 80024a4:	08003944 	.word	0x08003944
 80024a8:	08003948 	.word	0x08003948
 80024ac:	0800394c 	.word	0x0800394c
 80024b0:	08003990 	.word	0x08003990
 80024b4:	08003994 	.word	0x08003994
 80024b8:	08003998 	.word	0x08003998
 80024bc:	08003954 	.word	0x08003954
 80024c0:	004c4c41 	.word	0x004c4c41

080024c4 <USART_send_character>:
	USART_Cmd(USARTx, ENABLE);

}

void USART_send_character(USART_TypeDef *USARTx, char ch)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET){}
 80024d0:	bf00      	nop
 80024d2:	2140      	movs	r1, #64	; 0x40
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7fe ff3d 	bl	8001354 <USART_GetFlagStatus>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f8      	beq.n	80024d2 <USART_send_character+0xe>
	USART_SendData(USARTx, (uint16_t)ch);
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4619      	mov	r1, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe ff12 	bl	8001310 <USART_SendData>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <USART_send_string>:

void USART_send_string(USART_TypeDef *USARTx, char *str)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
	while(*str != '\0')
 80024fe:	e007      	b.n	8002510 <USART_send_string+0x1c>
	{
		USART_send_character(USARTx, *str++);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	603a      	str	r2, [r7, #0]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ffda 	bl	80024c4 <USART_send_character>
	while(*str != '\0')
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f3      	bne.n	8002500 <USART_send_string+0xc>
	}
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <USART_receive_character>:
	USART_send_character(USARTx, '\n');
	USART_send_character(USARTx, '\r');
}

char USART_receive_character(USART_TypeDef *USARTx)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	return USART_ReceiveData(USARTx);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fe ff03 	bl	8001334 <USART_ReceiveData>
 800252e:	4603      	mov	r3, r0
 8002530:	b2db      	uxtb	r3, r3
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <USART_printf>:
{
	memset(USART_printf_buffer, 0, USART3_BUFF_MAX_SIZE);
}

void USART_printf(USART_TypeDef *USARTx, char *formater, ...)
{
 800253c:	b40e      	push	{r1, r2, r3}
 800253e:	b580      	push	{r7, lr}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
	va_list argumerts_list;
	va_start (argumerts_list, formater);
 8002546:	f107 0320 	add.w	r3, r7, #32
 800254a:	60fb      	str	r3, [r7, #12]
	vsprintf(USART_printf_buffer, formater, argumerts_list);
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	69f9      	ldr	r1, [r7, #28]
 8002550:	4806      	ldr	r0, [pc, #24]	; (800256c <USART_printf+0x30>)
 8002552:	f000 fdeb 	bl	800312c <vsiprintf>
	USART_send_string(USARTx, USART_printf_buffer);
 8002556:	4905      	ldr	r1, [pc, #20]	; (800256c <USART_printf+0x30>)
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ffcb 	bl	80024f4 <USART_send_string>

}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002568:	b003      	add	sp, #12
 800256a:	4770      	bx	lr
 800256c:	20000090 	.word	0x20000090

08002570 <delay_milis>:
//	timing_dalay = RCC_Clocks.HCLK_Frequency/1000 * milisecond;
//	while(timing_dalay--);
}

void delay_milis(uint32_t milisecond)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
//	timing_dalay = RCC_Clocks.HCLK_Frequency/10000000 * microsecond;
//	while(timing_dalay--);
//	timing_dalay = microsecond;
//	while(timing_dalay);

	RCC_GetClocksFreq(&RCC_Clocks);
 8002578:	480c      	ldr	r0, [pc, #48]	; (80025ac <delay_milis+0x3c>)
 800257a:	f7fe fd5f 	bl	800103c <RCC_GetClocksFreq>
	timing_dalay = RCC_Clocks.HCLK_Frequency/10000 * milisecond;
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <delay_milis+0x3c>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <delay_milis+0x40>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	0b5b      	lsrs	r3, r3, #13
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <delay_milis+0x44>)
 8002592:	6013      	str	r3, [r2, #0]
	while(timing_dalay--);
 8002594:	bf00      	nop
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <delay_milis+0x44>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	1e5a      	subs	r2, r3, #1
 800259c:	4905      	ldr	r1, [pc, #20]	; (80025b4 <delay_milis+0x44>)
 800259e:	600a      	str	r2, [r1, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f8      	bne.n	8002596 <delay_milis+0x26>

//	milisecond*=800000;
//	while(milisecond--);
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000190 	.word	0x20000190
 80025b0:	d1b71759 	.word	0xd1b71759
 80025b4:	200001b4 	.word	0x200001b4

080025b8 <setup_clock_for_GPIO>:

void setup_clock_for_GPIO(GPIO_TypeDef* GPIOx, FunctionalState state)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]
	switch ((int)GPIOx) {
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <setup_clock_for_GPIO+0x7c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d01c      	beq.n	8002606 <setup_clock_for_GPIO+0x4e>
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <setup_clock_for_GPIO+0x7c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	dc06      	bgt.n	80025e0 <setup_clock_for_GPIO+0x28>
 80025d2:	4a19      	ldr	r2, [pc, #100]	; (8002638 <setup_clock_for_GPIO+0x80>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00a      	beq.n	80025ee <setup_clock_for_GPIO+0x36>
 80025d8:	4a18      	ldr	r2, [pc, #96]	; (800263c <setup_clock_for_GPIO+0x84>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00d      	beq.n	80025fa <setup_clock_for_GPIO+0x42>
			break;
		case (int)GPIOE:
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, state); //APB1
			break;
		default:
			break;
 80025de:	e024      	b.n	800262a <setup_clock_for_GPIO+0x72>
	switch ((int)GPIOx) {
 80025e0:	4a17      	ldr	r2, [pc, #92]	; (8002640 <setup_clock_for_GPIO+0x88>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d015      	beq.n	8002612 <setup_clock_for_GPIO+0x5a>
 80025e6:	4a17      	ldr	r2, [pc, #92]	; (8002644 <setup_clock_for_GPIO+0x8c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d018      	beq.n	800261e <setup_clock_for_GPIO+0x66>
			break;
 80025ec:	e01d      	b.n	800262a <setup_clock_for_GPIO+0x72>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, state); //APB1
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	4619      	mov	r1, r3
 80025f2:	2001      	movs	r0, #1
 80025f4:	f7fe fdca 	bl	800118c <RCC_AHB1PeriphClockCmd>
			break;
 80025f8:	e017      	b.n	800262a <setup_clock_for_GPIO+0x72>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, state); //APB1
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	4619      	mov	r1, r3
 80025fe:	2002      	movs	r0, #2
 8002600:	f7fe fdc4 	bl	800118c <RCC_AHB1PeriphClockCmd>
			break;
 8002604:	e011      	b.n	800262a <setup_clock_for_GPIO+0x72>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, state); //APB1
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	4619      	mov	r1, r3
 800260a:	2004      	movs	r0, #4
 800260c:	f7fe fdbe 	bl	800118c <RCC_AHB1PeriphClockCmd>
			break;
 8002610:	e00b      	b.n	800262a <setup_clock_for_GPIO+0x72>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, state); //APB1
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	4619      	mov	r1, r3
 8002616:	2008      	movs	r0, #8
 8002618:	f7fe fdb8 	bl	800118c <RCC_AHB1PeriphClockCmd>
			break;
 800261c:	e005      	b.n	800262a <setup_clock_for_GPIO+0x72>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, state); //APB1
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	4619      	mov	r1, r3
 8002622:	2010      	movs	r0, #16
 8002624:	f7fe fdb2 	bl	800118c <RCC_AHB1PeriphClockCmd>
			break;
 8002628:	bf00      	nop
	}
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40020800 	.word	0x40020800
 8002638:	40020000 	.word	0x40020000
 800263c:	40020400 	.word	0x40020400
 8002640:	40020c00 	.word	0x40020c00
 8002644:	40021000 	.word	0x40021000

08002648 <setup_clock_for_I2C>:
			break;
	}
}

void setup_clock_for_I2C(I2C_TypeDef *I2Cx, FunctionalState state)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
	switch ((int)I2Cx) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a11      	ldr	r2, [pc, #68]	; (800269c <setup_clock_for_I2C+0x54>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00d      	beq.n	8002678 <setup_clock_for_I2C+0x30>
 800265c:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <setup_clock_for_I2C+0x58>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d011      	beq.n	8002686 <setup_clock_for_I2C+0x3e>
 8002662:	4a10      	ldr	r2, [pc, #64]	; (80026a4 <setup_clock_for_I2C+0x5c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d000      	beq.n	800266a <setup_clock_for_I2C+0x22>
			break;
		case (int)I2C3:
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C3, state); //APB1
			break;
		default:
			break;
 8002668:	e014      	b.n	8002694 <setup_clock_for_I2C+0x4c>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, state); //APB1
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	4619      	mov	r1, r3
 800266e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002672:	f7fe fdab 	bl	80011cc <RCC_APB1PeriphClockCmd>
			break;
 8002676:	e00d      	b.n	8002694 <setup_clock_for_I2C+0x4c>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, state); //APB1
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	4619      	mov	r1, r3
 800267c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002680:	f7fe fda4 	bl	80011cc <RCC_APB1PeriphClockCmd>
			break;
 8002684:	e006      	b.n	8002694 <setup_clock_for_I2C+0x4c>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C3, state); //APB1
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	4619      	mov	r1, r3
 800268a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800268e:	f7fe fd9d 	bl	80011cc <RCC_APB1PeriphClockCmd>
			break;
 8002692:	bf00      	nop
	}
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40005800 	.word	0x40005800
 80026a0:	40005c00 	.word	0x40005c00
 80026a4:	40005400 	.word	0x40005400

080026a8 <I2C_TransmitData>:
#include "i2c.h"
#include "LEDs.h"
#include "USART.h"

static void I2C_TransmitData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_TXE) == RESET){}
 80026b4:	bf00      	nop
 80026b6:	4908      	ldr	r1, [pc, #32]	; (80026d8 <I2C_TransmitData+0x30>)
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7fe fc8c 	bl	8000fd6 <I2C_GetFlagStatus>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f8      	beq.n	80026b6 <I2C_TransmitData+0xe>
	I2C_SendData(I2Cx, Data);
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7fe fc36 	bl	8000f3a <I2C_SendData>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	10000080 	.word	0x10000080

080026dc <setup_I2C>:

void setup_I2C(I2C_TypeDef* I2Cx)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
//	I2C_Cmd(I2Cx, DISABLE);
	setup_clock_for_I2C(I2Cx, ENABLE);
 80026e4:	2101      	movs	r1, #1
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffae 	bl	8002648 <setup_clock_for_I2C>
	setup_pinout_for_I2C(I2Cx);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fa49 	bl	8002b84 <setup_pinout_for_I2C>
	I2C_InitTypeDef i2c_InitStructure;
	i2c_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80026f2:	2300      	movs	r3, #0
 80026f4:	81bb      	strh	r3, [r7, #12]
	i2c_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80026f6:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80026fa:	81fb      	strh	r3, [r7, #14]
	i2c_InitStructure.I2C_ClockSpeed = 100000; // must be less then  400000
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <setup_I2C+0x60>)
 80026fe:	60bb      	str	r3, [r7, #8]
	i2c_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002704:	82bb      	strh	r3, [r7, #20]
	i2c_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270a:	827b      	strh	r3, [r7, #18]
	i2c_InitStructure.I2C_OwnAddress1 = 0x0f;
 800270c:	230f      	movs	r3, #15
 800270e:	823b      	strh	r3, [r7, #16]

	I2C_AnalogFilterCmd(I2Cx, ENABLE);
 8002710:	2101      	movs	r1, #1
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fb52 	bl	8000dbc <I2C_AnalogFilterCmd>
	I2C_DeInit(I2Cx);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7fe fa33 	bl	8000b84 <I2C_DeInit>
	I2C_Init(I2Cx, &i2c_InitStructure);
 800271e:	f107 0308 	add.w	r3, r7, #8
 8002722:	4619      	mov	r1, r3
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7fe fa67 	bl	8000bf8 <I2C_Init>
	I2C_Cmd(I2Cx, ENABLE);
 800272a:	2101      	movs	r1, #1
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7fe fb25 	bl	8000d7c <I2C_Cmd>

}
 8002732:	bf00      	nop
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	000186a0 	.word	0x000186a0

08002740 <I2C_transmit_byte_to_reg>:
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF));

}

void I2C_transmit_byte_to_reg(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	4608      	mov	r0, r1
 800274a:	4611      	mov	r1, r2
 800274c:	461a      	mov	r2, r3
 800274e:	4603      	mov	r3, r0
 8002750:	70fb      	strb	r3, [r7, #3]
 8002752:	460b      	mov	r3, r1
 8002754:	70bb      	strb	r3, [r7, #2]
 8002756:	4613      	mov	r3, r2
 8002758:	707b      	strb	r3, [r7, #1]

	I2C_GenerateSTART(I2Cx, ENABLE);
 800275a:	2101      	movs	r1, #1
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7fe fb4d 	bl	8000dfc <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT)){}
 8002762:	bf00      	nop
 8002764:	491f      	ldr	r1, [pc, #124]	; (80027e4 <I2C_transmit_byte_to_reg+0xa4>)
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fc05 	bl	8000f76 <I2C_CheckEvent>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f8      	beq.n	8002764 <I2C_transmit_byte_to_reg+0x24>

	I2C_Send7bitAddress(I2Cx, address, I2C_Direction_Transmitter);
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	2200      	movs	r2, #0
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7fe fb7f 	bl	8000e7c <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)){}
 800277e:	bf00      	nop
 8002780:	4919      	ldr	r1, [pc, #100]	; (80027e8 <I2C_transmit_byte_to_reg+0xa8>)
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe fbf7 	bl	8000f76 <I2C_CheckEvent>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f8      	beq.n	8002780 <I2C_transmit_byte_to_reg+0x40>

	I2C_TransmitData(I2Cx, reg);
 800278e:	78bb      	ldrb	r3, [r7, #2]
 8002790:	4619      	mov	r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ff88 	bl	80026a8 <I2C_TransmitData>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED)){}
 8002798:	bf00      	nop
 800279a:	4914      	ldr	r1, [pc, #80]	; (80027ec <I2C_transmit_byte_to_reg+0xac>)
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7fe fbea 	bl	8000f76 <I2C_CheckEvent>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f8      	beq.n	800279a <I2C_transmit_byte_to_reg+0x5a>

	I2C_TransmitData(I2Cx, data);
 80027a8:	787b      	ldrb	r3, [r7, #1]
 80027aa:	4619      	mov	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff7b 	bl	80026a8 <I2C_TransmitData>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED)){}
 80027b2:	bf00      	nop
 80027b4:	490d      	ldr	r1, [pc, #52]	; (80027ec <I2C_transmit_byte_to_reg+0xac>)
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe fbdd 	bl	8000f76 <I2C_CheckEvent>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f8      	beq.n	80027b4 <I2C_transmit_byte_to_reg+0x74>

	I2C_GenerateSTOP(I2Cx,ENABLE);
 80027c2:	2101      	movs	r1, #1
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7fe fb39 	bl	8000e3c <I2C_GenerateSTOP>
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF));
 80027ca:	bf00      	nop
 80027cc:	4908      	ldr	r1, [pc, #32]	; (80027f0 <I2C_transmit_byte_to_reg+0xb0>)
 80027ce:	4809      	ldr	r0, [pc, #36]	; (80027f4 <I2C_transmit_byte_to_reg+0xb4>)
 80027d0:	f7fe fc01 	bl	8000fd6 <I2C_GetFlagStatus>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f8      	bne.n	80027cc <I2C_transmit_byte_to_reg+0x8c>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	00030001 	.word	0x00030001
 80027e8:	00070082 	.word	0x00070082
 80027ec:	00070084 	.word	0x00070084
 80027f0:	10000010 	.word	0x10000010
 80027f4:	40005400 	.word	0x40005400

080027f8 <I2C_receive_byte_from_reg>:
	I2C_GenerateSTOP(I2Cx,ENABLE);
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF));
}

void I2C_receive_byte_from_reg(I2C_TypeDef* I2Cx,uint8_t address, uint8_t reg, uint8_t *data)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	72fb      	strb	r3, [r7, #11]
 8002806:	4613      	mov	r3, r2
 8002808:	72bb      	strb	r3, [r7, #10]
	I2C_AcknowledgeConfig(I2Cx, ENABLE);
 800280a:	2101      	movs	r1, #1
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7fe fb53 	bl	8000eb8 <I2C_AcknowledgeConfig>
	I2C_GenerateSTART(I2Cx, ENABLE);
 8002812:	2101      	movs	r1, #1
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7fe faf1 	bl	8000dfc <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT)){}
 800281a:	bf00      	nop
 800281c:	4931      	ldr	r1, [pc, #196]	; (80028e4 <I2C_receive_byte_from_reg+0xec>)
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7fe fba9 	bl	8000f76 <I2C_CheckEvent>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f8      	beq.n	800281c <I2C_receive_byte_from_reg+0x24>

	I2C_Send7bitAddress(I2Cx, address, I2C_Direction_Transmitter);
 800282a:	7afb      	ldrb	r3, [r7, #11]
 800282c:	2200      	movs	r2, #0
 800282e:	4619      	mov	r1, r3
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f7fe fb23 	bl	8000e7c <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)){}
 8002836:	bf00      	nop
 8002838:	492b      	ldr	r1, [pc, #172]	; (80028e8 <I2C_receive_byte_from_reg+0xf0>)
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7fe fb9b 	bl	8000f76 <I2C_CheckEvent>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f8      	beq.n	8002838 <I2C_receive_byte_from_reg+0x40>

	I2C_TransmitData(I2Cx, reg);
 8002846:	7abb      	ldrb	r3, [r7, #10]
 8002848:	4619      	mov	r1, r3
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff ff2c 	bl	80026a8 <I2C_TransmitData>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED)){}
 8002850:	bf00      	nop
 8002852:	4926      	ldr	r1, [pc, #152]	; (80028ec <I2C_receive_byte_from_reg+0xf4>)
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7fe fb8e 	bl	8000f76 <I2C_CheckEvent>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f8      	beq.n	8002852 <I2C_receive_byte_from_reg+0x5a>

	I2C_GenerateSTART(I2Cx, ENABLE);
 8002860:	2101      	movs	r1, #1
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7fe faca 	bl	8000dfc <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT)){}
 8002868:	bf00      	nop
 800286a:	491e      	ldr	r1, [pc, #120]	; (80028e4 <I2C_receive_byte_from_reg+0xec>)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7fe fb82 	bl	8000f76 <I2C_CheckEvent>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f8      	beq.n	800286a <I2C_receive_byte_from_reg+0x72>

	I2C_Send7bitAddress(I2Cx, address, I2C_Direction_Receiver);
 8002878:	7afb      	ldrb	r3, [r7, #11]
 800287a:	2201      	movs	r2, #1
 800287c:	4619      	mov	r1, r3
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7fe fafc 	bl	8000e7c <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)){}
 8002884:	bf00      	nop
 8002886:	491a      	ldr	r1, [pc, #104]	; (80028f0 <I2C_receive_byte_from_reg+0xf8>)
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7fe fb74 	bl	8000f76 <I2C_CheckEvent>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f8      	beq.n	8002886 <I2C_receive_byte_from_reg+0x8e>

	I2C_NACKPositionConfig(I2Cx, I2C_NACKPosition_Current);
 8002894:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7fe fb2d 	bl	8000ef8 <I2C_NACKPositionConfig>
	I2C_AcknowledgeConfig(I2Cx, DISABLE);
 800289e:	2100      	movs	r1, #0
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7fe fb09 	bl	8000eb8 <I2C_AcknowledgeConfig>

	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)){}
 80028a6:	bf00      	nop
 80028a8:	4912      	ldr	r1, [pc, #72]	; (80028f4 <I2C_receive_byte_from_reg+0xfc>)
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7fe fb63 	bl	8000f76 <I2C_CheckEvent>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f8      	beq.n	80028a8 <I2C_receive_byte_from_reg+0xb0>
	*data = I2C_ReceiveData(I2Cx);
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7fe fb4f 	bl	8000f5a <I2C_ReceiveData>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	701a      	strb	r2, [r3, #0]

	I2C_GenerateSTOP(I2Cx,ENABLE);
 80028c4:	2101      	movs	r1, #1
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7fe fab8 	bl	8000e3c <I2C_GenerateSTOP>
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_STOPF));
 80028cc:	bf00      	nop
 80028ce:	490a      	ldr	r1, [pc, #40]	; (80028f8 <I2C_receive_byte_from_reg+0x100>)
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7fe fb80 	bl	8000fd6 <I2C_GetFlagStatus>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f8      	bne.n	80028ce <I2C_receive_byte_from_reg+0xd6>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	00030001 	.word	0x00030001
 80028e8:	00070082 	.word	0x00070082
 80028ec:	00070084 	.word	0x00070084
 80028f0:	00030002 	.word	0x00030002
 80028f4:	00030040 	.word	0x00030040
 80028f8:	10000010 	.word	0x10000010

080028fc <EXTI0_IRQHandler>:

volatile uint32_t usart3_buffer_iterrator;


void EXTI0_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) == SET)
 8002900:	2001      	movs	r0, #1
 8002902:	f7fe f803 	bl	800090c <EXTI_GetITStatus>
 8002906:	4603      	mov	r3, r0
 8002908:	2b01      	cmp	r3, #1
 800290a:	d108      	bne.n	800291e <EXTI0_IRQHandler+0x22>
	{
		//TODO USER_DISCO_BUTTON
		 USER_BUTTON_state =~ USER_BUTTON_state;
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <EXTI0_IRQHandler+0x28>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	43db      	mvns	r3, r3
 8002912:	b2da      	uxtb	r2, r3
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <EXTI0_IRQHandler+0x28>)
 8002916:	701a      	strb	r2, [r3, #0]
		 EXTI_ClearITPendingBit(EXTI_Line0);
 8002918:	2001      	movs	r0, #1
 800291a:	f7fe f81b 	bl	8000954 <EXTI_ClearITPendingBit>

	}
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200001b0 	.word	0x200001b0

08002928 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line6) == SET)
 800292c:	2040      	movs	r0, #64	; 0x40
 800292e:	f7fd ffed 	bl	800090c <EXTI_GetITStatus>
 8002932:	4603      	mov	r3, r0
 8002934:	2b01      	cmp	r3, #1
 8002936:	d108      	bne.n	800294a <EXTI9_5_IRQHandler+0x22>
	{
		//TODO UP_BUTTON
		UP_BUTTON_state =~ UP_BUTTON_state;
 8002938:	4b16      	ldr	r3, [pc, #88]	; (8002994 <EXTI9_5_IRQHandler+0x6c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	43db      	mvns	r3, r3
 800293e:	b2da      	uxtb	r2, r3
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <EXTI9_5_IRQHandler+0x6c>)
 8002942:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line6);
 8002944:	2040      	movs	r0, #64	; 0x40
 8002946:	f7fe f805 	bl	8000954 <EXTI_ClearITPendingBit>

	}
	if(EXTI_GetITStatus(EXTI_Line8) == SET)
 800294a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800294e:	f7fd ffdd 	bl	800090c <EXTI_GetITStatus>
 8002952:	4603      	mov	r3, r0
 8002954:	2b01      	cmp	r3, #1
 8002956:	d109      	bne.n	800296c <EXTI9_5_IRQHandler+0x44>
	{
		//TODO DOWN_BUTTON
		DOWN_BUTTON_state =~ DOWN_BUTTON_state;
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <EXTI9_5_IRQHandler+0x70>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	43db      	mvns	r3, r3
 800295e:	b2da      	uxtb	r2, r3
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <EXTI9_5_IRQHandler+0x70>)
 8002962:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line8);
 8002964:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002968:	f7fd fff4 	bl	8000954 <EXTI_ClearITPendingBit>

	}
	if(EXTI_GetITStatus(EXTI_Line9) == SET)
 800296c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002970:	f7fd ffcc 	bl	800090c <EXTI_GetITStatus>
 8002974:	4603      	mov	r3, r0
 8002976:	2b01      	cmp	r3, #1
 8002978:	d109      	bne.n	800298e <EXTI9_5_IRQHandler+0x66>
	{
		//TODO LEFT_BUTTON
		LEFT_BUTTON_state =~ LEFT_BUTTON_state;
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <EXTI9_5_IRQHandler+0x74>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	43db      	mvns	r3, r3
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <EXTI9_5_IRQHandler+0x74>)
 8002984:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line9);
 8002986:	f44f 7000 	mov.w	r0, #512	; 0x200
 800298a:	f7fd ffe3 	bl	8000954 <EXTI_ClearITPendingBit>
	}
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200001ae 	.word	0x200001ae
 8002998:	200001ad 	.word	0x200001ad
 800299c:	200001b1 	.word	0x200001b1

080029a0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line15) == SET)
 80029a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029a8:	f7fd ffb0 	bl	800090c <EXTI_GetITStatus>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d109      	bne.n	80029c6 <EXTI15_10_IRQHandler+0x26>
	{
		//TODO OK BUTTON
		OK_BUTTON_state =~ OK_BUTTON_state;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <EXTI15_10_IRQHandler+0x4c>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <EXTI15_10_IRQHandler+0x4c>)
 80029bc:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line15);
 80029be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029c2:	f7fd ffc7 	bl	8000954 <EXTI_ClearITPendingBit>
	}
	if(EXTI_GetITStatus(EXTI_Line11) == SET)
 80029c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80029ca:	f7fd ff9f 	bl	800090c <EXTI_GetITStatus>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d109      	bne.n	80029e8 <EXTI15_10_IRQHandler+0x48>
	{
		//TODO RIGTH BUTTON
		RIGHT_BUTTON_state =~ RIGHT_BUTTON_state;
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <EXTI15_10_IRQHandler+0x50>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	43db      	mvns	r3, r3
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <EXTI15_10_IRQHandler+0x50>)
 80029de:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line11);
 80029e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80029e4:	f7fd ffb6 	bl	8000954 <EXTI_ClearITPendingBit>
	}
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200001af 	.word	0x200001af
 80029f0:	200001ac 	.word	0x200001ac

080029f4 <USART3_IRQHandler>:
  * @param  None
  * @retval None
  */

void USART3_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
	if (USART_GetFlagStatus(USART3, USART_FLAG_RXNE) == SET)
 80029fa:	2120      	movs	r1, #32
 80029fc:	4839      	ldr	r0, [pc, #228]	; (8002ae4 <USART3_IRQHandler+0xf0>)
 80029fe:	f7fe fca9 	bl	8001354 <USART_GetFlagStatus>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d169      	bne.n	8002adc <USART3_IRQHandler+0xe8>
	{

		if (USART3_RX_DATA == ALREADY_SENT)
 8002a08:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <USART3_IRQHandler+0xf4>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d102      	bne.n	8002a16 <USART3_IRQHandler+0x22>
		{
			usart3_buffer_iterrator = 0;
 8002a10:	4b36      	ldr	r3, [pc, #216]	; (8002aec <USART3_IRQHandler+0xf8>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
		}
		USART3_RX_DATA = PREPARING;
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <USART3_IRQHandler+0xf4>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
		char ch;
		USART3_BUFFER[USART3_BUFF_MAX_SIZE-1] = '\0';
 8002a1c:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <USART3_IRQHandler+0xfc>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

		ch = USART_receive_character(USART3);
 8002a24:	482f      	ldr	r0, [pc, #188]	; (8002ae4 <USART3_IRQHandler+0xf0>)
 8002a26:	f7ff fd7b 	bl	8002520 <USART_receive_character>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	72fb      	strb	r3, [r7, #11]
		if (ch == 0x0D) //pressed Enter
 8002a2e:	7afb      	ldrb	r3, [r7, #11]
 8002a30:	2b0d      	cmp	r3, #13
 8002a32:	d10b      	bne.n	8002a4c <USART3_IRQHandler+0x58>
		{
			USART3_BUFFER[usart3_buffer_iterrator] = '\0';
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <USART3_IRQHandler+0xf8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a2d      	ldr	r2, [pc, #180]	; (8002af0 <USART3_IRQHandler+0xfc>)
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	54d1      	strb	r1, [r2, r3]
			usart3_buffer_iterrator = 0;
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <USART3_IRQHandler+0xf8>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
			USART3_RX_DATA = READY;
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <USART3_IRQHandler+0xf4>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
			return;
 8002a4a:	e047      	b.n	8002adc <USART3_IRQHandler+0xe8>
		}
		if (ch == 0x7F) //pressed Backspace
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a50:	d12b      	bne.n	8002aaa <USART3_IRQHandler+0xb6>
		{
			if (usart3_buffer_iterrator > 0)
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <USART3_IRQHandler+0xf8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d027      	beq.n	8002aaa <USART3_IRQHandler+0xb6>
			{
				//calculate current length
				uint32_t length;
				length = strlen(USART3_BUFFER);
 8002a5a:	4825      	ldr	r0, [pc, #148]	; (8002af0 <USART3_IRQHandler+0xfc>)
 8002a5c:	f7fd fbb8 	bl	80001d0 <strlen>
 8002a60:	6078      	str	r0, [r7, #4]
				usart3_buffer_iterrator--;
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <USART3_IRQHandler+0xf8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	4a20      	ldr	r2, [pc, #128]	; (8002aec <USART3_IRQHandler+0xf8>)
 8002a6a:	6013      	str	r3, [r2, #0]
				USART3_BUFFER[usart3_buffer_iterrator] = '\0';
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <USART3_IRQHandler+0xf8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <USART3_IRQHandler+0xfc>)
 8002a72:	2100      	movs	r1, #0
 8002a74:	54d1      	strb	r1, [r2, r3]
				// fill current line spaces
				USART_send_character(USART3, '\r');
 8002a76:	210d      	movs	r1, #13
 8002a78:	481a      	ldr	r0, [pc, #104]	; (8002ae4 <USART3_IRQHandler+0xf0>)
 8002a7a:	f7ff fd23 	bl	80024c4 <USART_send_character>
				for (uint32_t j = 0; j < length; ++j)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e006      	b.n	8002a92 <USART3_IRQHandler+0x9e>
				{
					USART_send_character(USART3, ' ');
 8002a84:	2120      	movs	r1, #32
 8002a86:	4817      	ldr	r0, [pc, #92]	; (8002ae4 <USART3_IRQHandler+0xf0>)
 8002a88:	f7ff fd1c 	bl	80024c4 <USART_send_character>
				for (uint32_t j = 0; j < length; ++j)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d3f4      	bcc.n	8002a84 <USART3_IRQHandler+0x90>
				}
				//print new line without deleted character
				USART_send_character(USART3, '\r');
 8002a9a:	210d      	movs	r1, #13
 8002a9c:	4811      	ldr	r0, [pc, #68]	; (8002ae4 <USART3_IRQHandler+0xf0>)
 8002a9e:	f7ff fd11 	bl	80024c4 <USART_send_character>
				USART_send_string(USART3, USART3_BUFFER);
 8002aa2:	4913      	ldr	r1, [pc, #76]	; (8002af0 <USART3_IRQHandler+0xfc>)
 8002aa4:	480f      	ldr	r0, [pc, #60]	; (8002ae4 <USART3_IRQHandler+0xf0>)
 8002aa6:	f7ff fd25 	bl	80024f4 <USART_send_string>
		}
		if (ch >= 0x0 && ch <= 0x1F) //processing ASCII control characters
		{
			//TODO
		}
		if (ch > 0x1F && ch < 0x7F)
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	2b1f      	cmp	r3, #31
 8002aae:	d915      	bls.n	8002adc <USART3_IRQHandler+0xe8>
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	2b7e      	cmp	r3, #126	; 0x7e
 8002ab4:	d812      	bhi.n	8002adc <USART3_IRQHandler+0xe8>
		{
			USART3_BUFFER[usart3_buffer_iterrator] = ch;
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <USART3_IRQHandler+0xf8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	490d      	ldr	r1, [pc, #52]	; (8002af0 <USART3_IRQHandler+0xfc>)
 8002abc:	7afa      	ldrb	r2, [r7, #11]
 8002abe:	54ca      	strb	r2, [r1, r3]
			USART_send_character(USART3, ch); //echo
 8002ac0:	7afb      	ldrb	r3, [r7, #11]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4807      	ldr	r0, [pc, #28]	; (8002ae4 <USART3_IRQHandler+0xf0>)
 8002ac6:	f7ff fcfd 	bl	80024c4 <USART_send_character>
			if(usart3_buffer_iterrator < USART3_BUFF_MAX_SIZE)
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <USART3_IRQHandler+0xf8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2bff      	cmp	r3, #255	; 0xff
 8002ad0:	d804      	bhi.n	8002adc <USART3_IRQHandler+0xe8>
			{
				usart3_buffer_iterrator++;
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <USART3_IRQHandler+0xf8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <USART3_IRQHandler+0xf8>)
 8002ada:	6013      	str	r3, [r2, #0]
			}
		}

	}
}
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40004800 	.word	0x40004800
 8002ae8:	200001b8 	.word	0x200001b8
 8002aec:	200002bc 	.word	0x200002bc
 8002af0:	200001bc 	.word	0x200001bc

08002af4 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
	CanRxMsg RxMessage;
	memset(&RxMessage, 0, sizeof(RxMessage));
 8002afa:	463b      	mov	r3, r7
 8002afc:	2214      	movs	r2, #20
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 faf5 	bl	80030f0 <memset>

	if (CAN_GetITStatus(CAN1, CAN_IT_FMP0) != RESET)
 8002b06:	2102      	movs	r1, #2
 8002b08:	481a      	ldr	r0, [pc, #104]	; (8002b74 <CAN1_RX0_IRQHandler+0x80>)
 8002b0a:	f7fd fdab 	bl	8000664 <CAN_GetITStatus>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d02a      	beq.n	8002b6a <CAN1_RX0_IRQHandler+0x76>
	{
		CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);
 8002b14:	463b      	mov	r3, r7
 8002b16:	461a      	mov	r2, r3
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4816      	ldr	r0, [pc, #88]	; (8002b74 <CAN1_RX0_IRQHandler+0x80>)
 8002b1c:	f7fd fce3 	bl	80004e6 <CAN_Receive>

		if (RxMessage.IDE == CAN_Id_Standard)
 8002b20:	7a3b      	ldrb	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d121      	bne.n	8002b6a <CAN1_RX0_IRQHandler+0x76>
		{
			if (RxMessage.StdId == CAN_MASSEGE_ID_REQ)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2ba1      	cmp	r3, #161	; 0xa1
 8002b2a:	d116      	bne.n	8002b5a <CAN1_RX0_IRQHandler+0x66>
			{
				CAN_transmit_data();
 8002b2c:	f7fe fcae 	bl	800148c <CAN_transmit_data>
				for (int i=0; i < RxMessage.DLC; i++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	e00c      	b.n	8002b50 <CAN1_RX0_IRQHandler+0x5c>
				USART_printf(USART3, "RxMessage.Data[%d] = %c\n\r", i,RxMessage.Data[i]);
 8002b36:	f107 020b 	add.w	r2, r7, #11
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	490d      	ldr	r1, [pc, #52]	; (8002b78 <CAN1_RX0_IRQHandler+0x84>)
 8002b44:	480d      	ldr	r0, [pc, #52]	; (8002b7c <CAN1_RX0_IRQHandler+0x88>)
 8002b46:	f7ff fcf9 	bl	800253c <USART_printf>
				for (int i=0; i < RxMessage.DLC; i++)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	7abb      	ldrb	r3, [r7, #10]
 8002b52:	461a      	mov	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	4293      	cmp	r3, r2
 8002b58:	dbed      	blt.n	8002b36 <CAN1_RX0_IRQHandler+0x42>

			}
			if (RxMessage.StdId == CAN_MASSEGE_ID_RESP)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2ba2      	cmp	r3, #162	; 0xa2
 8002b5e:	d104      	bne.n	8002b6a <CAN1_RX0_IRQHandler+0x76>
			{
				GPIO_ToggleBits(LED_PORT, LED_PINS);
 8002b60:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002b64:	4806      	ldr	r0, [pc, #24]	; (8002b80 <CAN1_RX0_IRQHandler+0x8c>)
 8002b66:	f7fd ffb1 	bl	8000acc <GPIO_ToggleBits>
			}
		}
	}
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40006400 	.word	0x40006400
 8002b78:	08003a0c 	.word	0x08003a0c
 8002b7c:	40004800 	.word	0x40004800
 8002b80:	40020c00 	.word	0x40020c00

08002b84 <setup_pinout_for_I2C>:
		default:
			break;
	}
}
void setup_pinout_for_I2C(I2C_TypeDef *I2Cx)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef I2C_GPIO;
	I2C_GPIO.GPIO_OType = GPIO_OType_OD;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73bb      	strb	r3, [r7, #14]
	I2C_GPIO.GPIO_PuPd 	= GPIO_PuPd_UP;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
	I2C_GPIO.GPIO_Speed	= GPIO_Speed_50MHz;
 8002b94:	2302      	movs	r3, #2
 8002b96:	737b      	strb	r3, [r7, #13]
	I2C_GPIO.GPIO_Mode 	= GPIO_Mode_AF;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	733b      	strb	r3, [r7, #12]
	switch ((int)I2Cx) {
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a37      	ldr	r2, [pc, #220]	; (8002c7c <setup_pinout_for_I2C+0xf8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d02a      	beq.n	8002bfa <setup_pinout_for_I2C+0x76>
 8002ba4:	4a36      	ldr	r2, [pc, #216]	; (8002c80 <setup_pinout_for_I2C+0xfc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d03f      	beq.n	8002c2a <setup_pinout_for_I2C+0xa6>
 8002baa:	4a36      	ldr	r2, [pc, #216]	; (8002c84 <setup_pinout_for_I2C+0x100>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d000      	beq.n	8002bb2 <setup_pinout_for_I2C+0x2e>
			GPIO_PinAFConfig(I2C3_PORT_SDA, I2C3_SDA_AF, GPIO_AF_I2C3);
			GPIO_PinAFConfig(I2C3_PORT_SCL, I2C2_SCL_AF, GPIO_AF_I2C3);
			break;

		default:
			break;
 8002bb0:	e060      	b.n	8002c74 <setup_pinout_for_I2C+0xf0>
			I2C_GPIO.GPIO_Pin = I2C1_SDA | I2C1_SCL;
 8002bb2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002bb6:	60bb      	str	r3, [r7, #8]
			setup_clock_for_GPIO(I2C1_PORT, ENABLE);
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4833      	ldr	r0, [pc, #204]	; (8002c88 <setup_pinout_for_I2C+0x104>)
 8002bbc:	f7ff fcfc 	bl	80025b8 <setup_clock_for_GPIO>
			GPIO_Init(I2C1_PORT, &I2C_GPIO);
 8002bc0:	f107 0308 	add.w	r3, r7, #8
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4830      	ldr	r0, [pc, #192]	; (8002c88 <setup_pinout_for_I2C+0x104>)
 8002bc8:	f7fd fed4 	bl	8000974 <GPIO_Init>
			GPIO_PinAFConfig(I2C1_PORT, I2C1_SDA_AF, GPIO_AF_I2C1);
 8002bcc:	2204      	movs	r2, #4
 8002bce:	2109      	movs	r1, #9
 8002bd0:	482d      	ldr	r0, [pc, #180]	; (8002c88 <setup_pinout_for_I2C+0x104>)
 8002bd2:	f7fd ff8d 	bl	8000af0 <GPIO_PinAFConfig>
			GPIO_PinAFConfig(I2C1_PORT, I2C1_SCL_AF, GPIO_AF_I2C1);
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	2106      	movs	r1, #6
 8002bda:	482b      	ldr	r0, [pc, #172]	; (8002c88 <setup_pinout_for_I2C+0x104>)
 8002bdc:	f7fd ff88 	bl	8000af0 <GPIO_PinAFConfig>
			I2C_GPIO.GPIO_Pin = PWM_CTRL_ONOFF;
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	60bb      	str	r3, [r7, #8]
			setup_clock_for_GPIO(PWM_CTRL_PORT, ENABLE);
 8002be4:	2101      	movs	r1, #1
 8002be6:	4828      	ldr	r0, [pc, #160]	; (8002c88 <setup_pinout_for_I2C+0x104>)
 8002be8:	f7ff fce6 	bl	80025b8 <setup_clock_for_GPIO>
			GPIO_Init(PWM_CTRL_PORT, &I2C_GPIO);
 8002bec:	f107 0308 	add.w	r3, r7, #8
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4825      	ldr	r0, [pc, #148]	; (8002c88 <setup_pinout_for_I2C+0x104>)
 8002bf4:	f7fd febe 	bl	8000974 <GPIO_Init>
			break;
 8002bf8:	e03c      	b.n	8002c74 <setup_pinout_for_I2C+0xf0>
			I2C_GPIO.GPIO_Pin = I2C2_SDA | I2C2_SCL;
 8002bfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bfe:	60bb      	str	r3, [r7, #8]
			setup_clock_for_GPIO(I2C2_PORT, ENABLE);
 8002c00:	2101      	movs	r1, #1
 8002c02:	4821      	ldr	r0, [pc, #132]	; (8002c88 <setup_pinout_for_I2C+0x104>)
 8002c04:	f7ff fcd8 	bl	80025b8 <setup_clock_for_GPIO>
			GPIO_Init(I2C2_PORT, &I2C_GPIO);
 8002c08:	f107 0308 	add.w	r3, r7, #8
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	481e      	ldr	r0, [pc, #120]	; (8002c88 <setup_pinout_for_I2C+0x104>)
 8002c10:	f7fd feb0 	bl	8000974 <GPIO_Init>
			GPIO_PinAFConfig(I2C2_PORT, I2C2_SDA_AF, GPIO_AF_I2C2);
 8002c14:	2204      	movs	r2, #4
 8002c16:	210b      	movs	r1, #11
 8002c18:	481b      	ldr	r0, [pc, #108]	; (8002c88 <setup_pinout_for_I2C+0x104>)
 8002c1a:	f7fd ff69 	bl	8000af0 <GPIO_PinAFConfig>
			GPIO_PinAFConfig(I2C2_PORT, I2C2_SCL_AF, GPIO_AF_I2C2);
 8002c1e:	2204      	movs	r2, #4
 8002c20:	210a      	movs	r1, #10
 8002c22:	4819      	ldr	r0, [pc, #100]	; (8002c88 <setup_pinout_for_I2C+0x104>)
 8002c24:	f7fd ff64 	bl	8000af0 <GPIO_PinAFConfig>
			break;
 8002c28:	e024      	b.n	8002c74 <setup_pinout_for_I2C+0xf0>
			I2C_GPIO.GPIO_Pin = I2C3_SDA;
 8002c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c2e:	60bb      	str	r3, [r7, #8]
			setup_clock_for_GPIO(I2C3_PORT_SDA, ENABLE);
 8002c30:	2101      	movs	r1, #1
 8002c32:	4816      	ldr	r0, [pc, #88]	; (8002c8c <setup_pinout_for_I2C+0x108>)
 8002c34:	f7ff fcc0 	bl	80025b8 <setup_clock_for_GPIO>
			setup_clock_for_GPIO(I2C3_PORT_SCL, ENABLE);
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4815      	ldr	r0, [pc, #84]	; (8002c90 <setup_pinout_for_I2C+0x10c>)
 8002c3c:	f7ff fcbc 	bl	80025b8 <setup_clock_for_GPIO>
			GPIO_Init(I2C3_PORT_SDA, &I2C_GPIO);
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	4619      	mov	r1, r3
 8002c46:	4811      	ldr	r0, [pc, #68]	; (8002c8c <setup_pinout_for_I2C+0x108>)
 8002c48:	f7fd fe94 	bl	8000974 <GPIO_Init>
			I2C_GPIO.GPIO_Pin = I2C3_SCL;
 8002c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c50:	60bb      	str	r3, [r7, #8]
			GPIO_Init(I2C3_PORT_SCL, &I2C_GPIO);
 8002c52:	f107 0308 	add.w	r3, r7, #8
 8002c56:	4619      	mov	r1, r3
 8002c58:	480d      	ldr	r0, [pc, #52]	; (8002c90 <setup_pinout_for_I2C+0x10c>)
 8002c5a:	f7fd fe8b 	bl	8000974 <GPIO_Init>
			GPIO_PinAFConfig(I2C3_PORT_SDA, I2C3_SDA_AF, GPIO_AF_I2C3);
 8002c5e:	2204      	movs	r2, #4
 8002c60:	2109      	movs	r1, #9
 8002c62:	480a      	ldr	r0, [pc, #40]	; (8002c8c <setup_pinout_for_I2C+0x108>)
 8002c64:	f7fd ff44 	bl	8000af0 <GPIO_PinAFConfig>
			GPIO_PinAFConfig(I2C3_PORT_SCL, I2C2_SCL_AF, GPIO_AF_I2C3);
 8002c68:	2204      	movs	r2, #4
 8002c6a:	210a      	movs	r1, #10
 8002c6c:	4808      	ldr	r0, [pc, #32]	; (8002c90 <setup_pinout_for_I2C+0x10c>)
 8002c6e:	f7fd ff3f 	bl	8000af0 <GPIO_PinAFConfig>
			break;
 8002c72:	bf00      	nop
	}
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40005800 	.word	0x40005800
 8002c80:	40005c00 	.word	0x40005c00
 8002c84:	40005400 	.word	0x40005400
 8002c88:	40020400 	.word	0x40020400
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020000 	.word	0x40020000

08002c94 <main>:
#include "drivers/clock_config.h"
#include "drivers/MEMS.h"

uint8_t cycle = 4;
int main(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
	Display_clear();
 8002c98:	f7fe fdd8 	bl	800184c <Display_clear>
	MEMS_example_with_menu();
 8002c9c:	f7ff f86a 	bl	8001d74 <MEMS_example_with_menu>
 8002ca0:	2300      	movs	r3, #0

}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cae:	e003      	b.n	8002cb8 <LoopCopyDataInit>

08002cb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cb6:	3104      	adds	r1, #4

08002cb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cb8:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cc0:	d3f6      	bcc.n	8002cb0 <CopyDataInit>
  ldr  r2, =_sbss
 8002cc2:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cc4:	e002      	b.n	8002ccc <LoopFillZerobss>

08002cc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cc8:	f842 3b04 	str.w	r3, [r2], #4

08002ccc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cd0:	d3f9      	bcc.n	8002cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cd2:	f000 f841 	bl	8002d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f000 f9e7 	bl	80030a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cda:	f7ff ffdb 	bl	8002c94 <main>
  bx  lr    
 8002cde:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ce0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ce4:	08003a64 	.word	0x08003a64
  ldr  r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cec:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002cf0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002cf4:	200002c4 	.word	0x200002c4

08002cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC_IRQHandler>

08002cfa <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <HardFault_Handler+0x4>

08002d0e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002d12:	e7fe      	b.n	8002d12 <MemManage_Handler+0x4>

08002d14 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <BusFault_Handler+0x4>

08002d1a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002d1e:	e7fe      	b.n	8002d1e <UsageFault_Handler+0x4>

08002d20 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d5c:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <SystemInit+0x60>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <SystemInit+0x60>)
 8002d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <SystemInit+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <SystemInit+0x64>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <SystemInit+0x64>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <SystemInit+0x64>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <SystemInit+0x64>)
 8002d84:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <SystemInit+0x64>)
 8002d90:	4a0b      	ldr	r2, [pc, #44]	; (8002dc0 <SystemInit+0x68>)
 8002d92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <SystemInit+0x64>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <SystemInit+0x64>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <SystemInit+0x64>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002da6:	f000 f80d 	bl	8002dc4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002daa:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <SystemInit+0x60>)
 8002dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002db0:	609a      	str	r2, [r3, #8]
#endif
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	24003010 	.word	0x24003010

08002dc4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002dd2:	4b36      	ldr	r3, [pc, #216]	; (8002eac <SetSysClock+0xe8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a35      	ldr	r2, [pc, #212]	; (8002eac <SetSysClock+0xe8>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002dde:	4b33      	ldr	r3, [pc, #204]	; (8002eac <SetSysClock+0xe8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3301      	adds	r3, #1
 8002dec:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d103      	bne.n	8002dfc <SetSysClock+0x38>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002dfa:	d1f0      	bne.n	8002dde <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <SetSysClock+0xe8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	e001      	b.n	8002e12 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d142      	bne.n	8002e9e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002e18:	4b24      	ldr	r3, [pc, #144]	; (8002eac <SetSysClock+0xe8>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	4a23      	ldr	r2, [pc, #140]	; (8002eac <SetSysClock+0xe8>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e22:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <SetSysClock+0xec>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <SetSysClock+0xec>)
 8002e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e2e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <SetSysClock+0xe8>)
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <SetSysClock+0xe8>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002e38:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <SetSysClock+0xe8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <SetSysClock+0xe8>)
 8002e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e42:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <SetSysClock+0xe8>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a18      	ldr	r2, [pc, #96]	; (8002eac <SetSysClock+0xe8>)
 8002e4a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002e4e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <SetSysClock+0xe8>)
 8002e52:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <SetSysClock+0xf0>)
 8002e54:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <SetSysClock+0xe8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a14      	ldr	r2, [pc, #80]	; (8002eac <SetSysClock+0xe8>)
 8002e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e60:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002e62:	bf00      	nop
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <SetSysClock+0xe8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f9      	beq.n	8002e64 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <SetSysClock+0xf4>)
 8002e72:	f240 7205 	movw	r2, #1797	; 0x705
 8002e76:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <SetSysClock+0xe8>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <SetSysClock+0xe8>)
 8002e7e:	f023 0303 	bic.w	r3, r3, #3
 8002e82:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <SetSysClock+0xe8>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <SetSysClock+0xe8>)
 8002e8a:	f043 0302 	orr.w	r3, r3, #2
 8002e8e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002e90:	bf00      	nop
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <SetSysClock+0xe8>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d1f9      	bne.n	8002e92 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	07405419 	.word	0x07405419
 8002eb8:	40023c00 	.word	0x40023c00

08002ebc <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
	int div = 1;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8002ecc:	e004      	b.n	8002ed8 <ts_itoa+0x1c>
		div *= base;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d2f3      	bcs.n	8002ece <ts_itoa+0x12>

	while (div != 0)
 8002ee6:	e029      	b.n	8002f3c <ts_itoa+0x80>
	{
		int num = d/div;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	613b      	str	r3, [r7, #16]
		d = d%div;
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	fbb3 f1f2 	udiv	r1, r3, r2
 8002efa:	fb02 f201 	mul.w	r2, r2, r1
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	60bb      	str	r3, [r7, #8]
		div /= base;
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f0a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b09      	cmp	r3, #9
 8002f10:	dd0a      	ble.n	8002f28 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	1c58      	adds	r0, r3, #1
 8002f1c:	68f9      	ldr	r1, [r7, #12]
 8002f1e:	6008      	str	r0, [r1, #0]
 8002f20:	3237      	adds	r2, #55	; 0x37
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e009      	b.n	8002f3c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	1c58      	adds	r0, r3, #1
 8002f32:	68f9      	ldr	r1, [r7, #12]
 8002f34:	6008      	str	r0, [r1, #0]
 8002f36:	3230      	adds	r2, #48	; 0x30
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1d2      	bne.n	8002ee8 <ts_itoa+0x2c>
	}
}
 8002f42:	bf00      	nop
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b088      	sub	sp, #32
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8002f5e:	e07d      	b.n	800305c <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b25      	cmp	r3, #37	; 0x25
 8002f66:	d171      	bne.n	800304c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d01e      	beq.n	8002fb4 <ts_formatstring+0x66>
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	dc06      	bgt.n	8002f88 <ts_formatstring+0x3a>
 8002f7a:	2b58      	cmp	r3, #88	; 0x58
 8002f7c:	d050      	beq.n	8003020 <ts_formatstring+0xd2>
 8002f7e:	2b63      	cmp	r3, #99	; 0x63
 8002f80:	d00e      	beq.n	8002fa0 <ts_formatstring+0x52>
 8002f82:	2b25      	cmp	r3, #37	; 0x25
 8002f84:	d058      	beq.n	8003038 <ts_formatstring+0xea>
 8002f86:	e05d      	b.n	8003044 <ts_formatstring+0xf6>
 8002f88:	2b73      	cmp	r3, #115	; 0x73
 8002f8a:	d02b      	beq.n	8002fe4 <ts_formatstring+0x96>
 8002f8c:	2b73      	cmp	r3, #115	; 0x73
 8002f8e:	dc02      	bgt.n	8002f96 <ts_formatstring+0x48>
 8002f90:	2b69      	cmp	r3, #105	; 0x69
 8002f92:	d00f      	beq.n	8002fb4 <ts_formatstring+0x66>
 8002f94:	e056      	b.n	8003044 <ts_formatstring+0xf6>
 8002f96:	2b75      	cmp	r3, #117	; 0x75
 8002f98:	d037      	beq.n	800300a <ts_formatstring+0xbc>
 8002f9a:	2b78      	cmp	r3, #120	; 0x78
 8002f9c:	d040      	beq.n	8003020 <ts_formatstring+0xd2>
 8002f9e:	e051      	b.n	8003044 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	1d1a      	adds	r2, r3, #4
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	6819      	ldr	r1, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	60fa      	str	r2, [r7, #12]
 8002fae:	b2ca      	uxtb	r2, r1
 8002fb0:	701a      	strb	r2, [r3, #0]
				break;
 8002fb2:	e047      	b.n	8003044 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	1d1a      	adds	r2, r3, #4
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	da07      	bge.n	8002fd4 <ts_formatstring+0x86>
					{
						val *= -1;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	425b      	negs	r3, r3
 8002fc8:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	60fa      	str	r2, [r7, #12]
 8002fd0:	222d      	movs	r2, #45	; 0x2d
 8002fd2:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8002fd4:	69f9      	ldr	r1, [r7, #28]
 8002fd6:	f107 030c 	add.w	r3, r7, #12
 8002fda:	220a      	movs	r2, #10
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff6d 	bl	8002ebc <ts_itoa>
				}
				break;
 8002fe2:	e02f      	b.n	8003044 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1d1a      	adds	r2, r3, #4
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8002fee:	e007      	b.n	8003000 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	1c53      	adds	r3, r2, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1c59      	adds	r1, r3, #1
 8002ffa:	60f9      	str	r1, [r7, #12]
 8002ffc:	7812      	ldrb	r2, [r2, #0]
 8002ffe:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f3      	bne.n	8002ff0 <ts_formatstring+0xa2>
					}
				}
				break;
 8003008:	e01c      	b.n	8003044 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	1d1a      	adds	r2, r3, #4
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	6819      	ldr	r1, [r3, #0]
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	220a      	movs	r2, #10
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff4f 	bl	8002ebc <ts_itoa>
				break;
 800301e:	e011      	b.n	8003044 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	1d1a      	adds	r2, r3, #4
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4619      	mov	r1, r3
 800302a:	f107 030c 	add.w	r3, r7, #12
 800302e:	2210      	movs	r2, #16
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff43 	bl	8002ebc <ts_itoa>
				break;
 8003036:	e005      	b.n	8003044 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	60fa      	str	r2, [r7, #12]
 800303e:	2225      	movs	r2, #37	; 0x25
 8003040:	701a      	strb	r2, [r3, #0]
				  break;
 8003042:	bf00      	nop
			}
			fmt++;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3301      	adds	r3, #1
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	e007      	b.n	800305c <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	1c53      	adds	r3, r2, #1
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1c59      	adds	r1, r3, #1
 8003056:	60f9      	str	r1, [r7, #12]
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f47f af7d 	bne.w	8002f60 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	461a      	mov	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800307c:	b40e      	push	{r1, r2, r3}
 800307e:	b580      	push	{r7, lr}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8003086:	f107 0320 	add.w	r3, r7, #32
 800308a:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	69f9      	ldr	r1, [r7, #28]
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff5c 	bl	8002f4e <ts_formatstring>
 8003096:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8003098:	68fb      	ldr	r3, [r7, #12]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030a4:	b003      	add	sp, #12
 80030a6:	4770      	bx	lr

080030a8 <__libc_init_array>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	4e0d      	ldr	r6, [pc, #52]	; (80030e0 <__libc_init_array+0x38>)
 80030ac:	4c0d      	ldr	r4, [pc, #52]	; (80030e4 <__libc_init_array+0x3c>)
 80030ae:	1ba4      	subs	r4, r4, r6
 80030b0:	10a4      	asrs	r4, r4, #2
 80030b2:	2500      	movs	r5, #0
 80030b4:	42a5      	cmp	r5, r4
 80030b6:	d109      	bne.n	80030cc <__libc_init_array+0x24>
 80030b8:	4e0b      	ldr	r6, [pc, #44]	; (80030e8 <__libc_init_array+0x40>)
 80030ba:	4c0c      	ldr	r4, [pc, #48]	; (80030ec <__libc_init_array+0x44>)
 80030bc:	f000 fc34 	bl	8003928 <_init>
 80030c0:	1ba4      	subs	r4, r4, r6
 80030c2:	10a4      	asrs	r4, r4, #2
 80030c4:	2500      	movs	r5, #0
 80030c6:	42a5      	cmp	r5, r4
 80030c8:	d105      	bne.n	80030d6 <__libc_init_array+0x2e>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030d0:	4798      	blx	r3
 80030d2:	3501      	adds	r5, #1
 80030d4:	e7ee      	b.n	80030b4 <__libc_init_array+0xc>
 80030d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030da:	4798      	blx	r3
 80030dc:	3501      	adds	r5, #1
 80030de:	e7f2      	b.n	80030c6 <__libc_init_array+0x1e>
 80030e0:	08003a5c 	.word	0x08003a5c
 80030e4:	08003a5c 	.word	0x08003a5c
 80030e8:	08003a5c 	.word	0x08003a5c
 80030ec:	08003a60 	.word	0x08003a60

080030f0 <memset>:
 80030f0:	4402      	add	r2, r0
 80030f2:	4603      	mov	r3, r0
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d100      	bne.n	80030fa <memset+0xa>
 80030f8:	4770      	bx	lr
 80030fa:	f803 1b01 	strb.w	r1, [r3], #1
 80030fe:	e7f9      	b.n	80030f4 <memset+0x4>

08003100 <_vsiprintf_r>:
 8003100:	b500      	push	{lr}
 8003102:	b09b      	sub	sp, #108	; 0x6c
 8003104:	9100      	str	r1, [sp, #0]
 8003106:	9104      	str	r1, [sp, #16]
 8003108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800310c:	9105      	str	r1, [sp, #20]
 800310e:	9102      	str	r1, [sp, #8]
 8003110:	4905      	ldr	r1, [pc, #20]	; (8003128 <_vsiprintf_r+0x28>)
 8003112:	9103      	str	r1, [sp, #12]
 8003114:	4669      	mov	r1, sp
 8003116:	f000 f86d 	bl	80031f4 <_svfiprintf_r>
 800311a:	9b00      	ldr	r3, [sp, #0]
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	b01b      	add	sp, #108	; 0x6c
 8003122:	f85d fb04 	ldr.w	pc, [sp], #4
 8003126:	bf00      	nop
 8003128:	ffff0208 	.word	0xffff0208

0800312c <vsiprintf>:
 800312c:	4613      	mov	r3, r2
 800312e:	460a      	mov	r2, r1
 8003130:	4601      	mov	r1, r0
 8003132:	4802      	ldr	r0, [pc, #8]	; (800313c <vsiprintf+0x10>)
 8003134:	6800      	ldr	r0, [r0, #0]
 8003136:	f7ff bfe3 	b.w	8003100 <_vsiprintf_r>
 800313a:	bf00      	nop
 800313c:	20000010 	.word	0x20000010

08003140 <__ssputs_r>:
 8003140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003144:	688e      	ldr	r6, [r1, #8]
 8003146:	429e      	cmp	r6, r3
 8003148:	4682      	mov	sl, r0
 800314a:	460c      	mov	r4, r1
 800314c:	4690      	mov	r8, r2
 800314e:	4699      	mov	r9, r3
 8003150:	d837      	bhi.n	80031c2 <__ssputs_r+0x82>
 8003152:	898a      	ldrh	r2, [r1, #12]
 8003154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003158:	d031      	beq.n	80031be <__ssputs_r+0x7e>
 800315a:	6825      	ldr	r5, [r4, #0]
 800315c:	6909      	ldr	r1, [r1, #16]
 800315e:	1a6f      	subs	r7, r5, r1
 8003160:	6965      	ldr	r5, [r4, #20]
 8003162:	2302      	movs	r3, #2
 8003164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003168:	fb95 f5f3 	sdiv	r5, r5, r3
 800316c:	f109 0301 	add.w	r3, r9, #1
 8003170:	443b      	add	r3, r7
 8003172:	429d      	cmp	r5, r3
 8003174:	bf38      	it	cc
 8003176:	461d      	movcc	r5, r3
 8003178:	0553      	lsls	r3, r2, #21
 800317a:	d530      	bpl.n	80031de <__ssputs_r+0x9e>
 800317c:	4629      	mov	r1, r5
 800317e:	f000 fb2b 	bl	80037d8 <_malloc_r>
 8003182:	4606      	mov	r6, r0
 8003184:	b950      	cbnz	r0, 800319c <__ssputs_r+0x5c>
 8003186:	230c      	movs	r3, #12
 8003188:	f8ca 3000 	str.w	r3, [sl]
 800318c:	89a3      	ldrh	r3, [r4, #12]
 800318e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003192:	81a3      	strh	r3, [r4, #12]
 8003194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319c:	463a      	mov	r2, r7
 800319e:	6921      	ldr	r1, [r4, #16]
 80031a0:	f000 faa8 	bl	80036f4 <memcpy>
 80031a4:	89a3      	ldrh	r3, [r4, #12]
 80031a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ae:	81a3      	strh	r3, [r4, #12]
 80031b0:	6126      	str	r6, [r4, #16]
 80031b2:	6165      	str	r5, [r4, #20]
 80031b4:	443e      	add	r6, r7
 80031b6:	1bed      	subs	r5, r5, r7
 80031b8:	6026      	str	r6, [r4, #0]
 80031ba:	60a5      	str	r5, [r4, #8]
 80031bc:	464e      	mov	r6, r9
 80031be:	454e      	cmp	r6, r9
 80031c0:	d900      	bls.n	80031c4 <__ssputs_r+0x84>
 80031c2:	464e      	mov	r6, r9
 80031c4:	4632      	mov	r2, r6
 80031c6:	4641      	mov	r1, r8
 80031c8:	6820      	ldr	r0, [r4, #0]
 80031ca:	f000 fa9e 	bl	800370a <memmove>
 80031ce:	68a3      	ldr	r3, [r4, #8]
 80031d0:	1b9b      	subs	r3, r3, r6
 80031d2:	60a3      	str	r3, [r4, #8]
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	441e      	add	r6, r3
 80031d8:	6026      	str	r6, [r4, #0]
 80031da:	2000      	movs	r0, #0
 80031dc:	e7dc      	b.n	8003198 <__ssputs_r+0x58>
 80031de:	462a      	mov	r2, r5
 80031e0:	f000 fb54 	bl	800388c <_realloc_r>
 80031e4:	4606      	mov	r6, r0
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d1e2      	bne.n	80031b0 <__ssputs_r+0x70>
 80031ea:	6921      	ldr	r1, [r4, #16]
 80031ec:	4650      	mov	r0, sl
 80031ee:	f000 faa5 	bl	800373c <_free_r>
 80031f2:	e7c8      	b.n	8003186 <__ssputs_r+0x46>

080031f4 <_svfiprintf_r>:
 80031f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f8:	461d      	mov	r5, r3
 80031fa:	898b      	ldrh	r3, [r1, #12]
 80031fc:	061f      	lsls	r7, r3, #24
 80031fe:	b09d      	sub	sp, #116	; 0x74
 8003200:	4680      	mov	r8, r0
 8003202:	460c      	mov	r4, r1
 8003204:	4616      	mov	r6, r2
 8003206:	d50f      	bpl.n	8003228 <_svfiprintf_r+0x34>
 8003208:	690b      	ldr	r3, [r1, #16]
 800320a:	b96b      	cbnz	r3, 8003228 <_svfiprintf_r+0x34>
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	f000 fae3 	bl	80037d8 <_malloc_r>
 8003212:	6020      	str	r0, [r4, #0]
 8003214:	6120      	str	r0, [r4, #16]
 8003216:	b928      	cbnz	r0, 8003224 <_svfiprintf_r+0x30>
 8003218:	230c      	movs	r3, #12
 800321a:	f8c8 3000 	str.w	r3, [r8]
 800321e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003222:	e0c8      	b.n	80033b6 <_svfiprintf_r+0x1c2>
 8003224:	2340      	movs	r3, #64	; 0x40
 8003226:	6163      	str	r3, [r4, #20]
 8003228:	2300      	movs	r3, #0
 800322a:	9309      	str	r3, [sp, #36]	; 0x24
 800322c:	2320      	movs	r3, #32
 800322e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003232:	2330      	movs	r3, #48	; 0x30
 8003234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003238:	9503      	str	r5, [sp, #12]
 800323a:	f04f 0b01 	mov.w	fp, #1
 800323e:	4637      	mov	r7, r6
 8003240:	463d      	mov	r5, r7
 8003242:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003246:	b10b      	cbz	r3, 800324c <_svfiprintf_r+0x58>
 8003248:	2b25      	cmp	r3, #37	; 0x25
 800324a:	d13e      	bne.n	80032ca <_svfiprintf_r+0xd6>
 800324c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003250:	d00b      	beq.n	800326a <_svfiprintf_r+0x76>
 8003252:	4653      	mov	r3, sl
 8003254:	4632      	mov	r2, r6
 8003256:	4621      	mov	r1, r4
 8003258:	4640      	mov	r0, r8
 800325a:	f7ff ff71 	bl	8003140 <__ssputs_r>
 800325e:	3001      	adds	r0, #1
 8003260:	f000 80a4 	beq.w	80033ac <_svfiprintf_r+0x1b8>
 8003264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003266:	4453      	add	r3, sl
 8003268:	9309      	str	r3, [sp, #36]	; 0x24
 800326a:	783b      	ldrb	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 809d 	beq.w	80033ac <_svfiprintf_r+0x1b8>
 8003272:	2300      	movs	r3, #0
 8003274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800327c:	9304      	str	r3, [sp, #16]
 800327e:	9307      	str	r3, [sp, #28]
 8003280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003284:	931a      	str	r3, [sp, #104]	; 0x68
 8003286:	462f      	mov	r7, r5
 8003288:	2205      	movs	r2, #5
 800328a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800328e:	4850      	ldr	r0, [pc, #320]	; (80033d0 <_svfiprintf_r+0x1dc>)
 8003290:	f7fc ffa6 	bl	80001e0 <memchr>
 8003294:	9b04      	ldr	r3, [sp, #16]
 8003296:	b9d0      	cbnz	r0, 80032ce <_svfiprintf_r+0xda>
 8003298:	06d9      	lsls	r1, r3, #27
 800329a:	bf44      	itt	mi
 800329c:	2220      	movmi	r2, #32
 800329e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032a2:	071a      	lsls	r2, r3, #28
 80032a4:	bf44      	itt	mi
 80032a6:	222b      	movmi	r2, #43	; 0x2b
 80032a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032ac:	782a      	ldrb	r2, [r5, #0]
 80032ae:	2a2a      	cmp	r2, #42	; 0x2a
 80032b0:	d015      	beq.n	80032de <_svfiprintf_r+0xea>
 80032b2:	9a07      	ldr	r2, [sp, #28]
 80032b4:	462f      	mov	r7, r5
 80032b6:	2000      	movs	r0, #0
 80032b8:	250a      	movs	r5, #10
 80032ba:	4639      	mov	r1, r7
 80032bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032c0:	3b30      	subs	r3, #48	; 0x30
 80032c2:	2b09      	cmp	r3, #9
 80032c4:	d94d      	bls.n	8003362 <_svfiprintf_r+0x16e>
 80032c6:	b1b8      	cbz	r0, 80032f8 <_svfiprintf_r+0x104>
 80032c8:	e00f      	b.n	80032ea <_svfiprintf_r+0xf6>
 80032ca:	462f      	mov	r7, r5
 80032cc:	e7b8      	b.n	8003240 <_svfiprintf_r+0x4c>
 80032ce:	4a40      	ldr	r2, [pc, #256]	; (80033d0 <_svfiprintf_r+0x1dc>)
 80032d0:	1a80      	subs	r0, r0, r2
 80032d2:	fa0b f000 	lsl.w	r0, fp, r0
 80032d6:	4318      	orrs	r0, r3
 80032d8:	9004      	str	r0, [sp, #16]
 80032da:	463d      	mov	r5, r7
 80032dc:	e7d3      	b.n	8003286 <_svfiprintf_r+0x92>
 80032de:	9a03      	ldr	r2, [sp, #12]
 80032e0:	1d11      	adds	r1, r2, #4
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	9103      	str	r1, [sp, #12]
 80032e6:	2a00      	cmp	r2, #0
 80032e8:	db01      	blt.n	80032ee <_svfiprintf_r+0xfa>
 80032ea:	9207      	str	r2, [sp, #28]
 80032ec:	e004      	b.n	80032f8 <_svfiprintf_r+0x104>
 80032ee:	4252      	negs	r2, r2
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	9207      	str	r2, [sp, #28]
 80032f6:	9304      	str	r3, [sp, #16]
 80032f8:	783b      	ldrb	r3, [r7, #0]
 80032fa:	2b2e      	cmp	r3, #46	; 0x2e
 80032fc:	d10c      	bne.n	8003318 <_svfiprintf_r+0x124>
 80032fe:	787b      	ldrb	r3, [r7, #1]
 8003300:	2b2a      	cmp	r3, #42	; 0x2a
 8003302:	d133      	bne.n	800336c <_svfiprintf_r+0x178>
 8003304:	9b03      	ldr	r3, [sp, #12]
 8003306:	1d1a      	adds	r2, r3, #4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	9203      	str	r2, [sp, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	bfb8      	it	lt
 8003310:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003314:	3702      	adds	r7, #2
 8003316:	9305      	str	r3, [sp, #20]
 8003318:	4d2e      	ldr	r5, [pc, #184]	; (80033d4 <_svfiprintf_r+0x1e0>)
 800331a:	7839      	ldrb	r1, [r7, #0]
 800331c:	2203      	movs	r2, #3
 800331e:	4628      	mov	r0, r5
 8003320:	f7fc ff5e 	bl	80001e0 <memchr>
 8003324:	b138      	cbz	r0, 8003336 <_svfiprintf_r+0x142>
 8003326:	2340      	movs	r3, #64	; 0x40
 8003328:	1b40      	subs	r0, r0, r5
 800332a:	fa03 f000 	lsl.w	r0, r3, r0
 800332e:	9b04      	ldr	r3, [sp, #16]
 8003330:	4303      	orrs	r3, r0
 8003332:	3701      	adds	r7, #1
 8003334:	9304      	str	r3, [sp, #16]
 8003336:	7839      	ldrb	r1, [r7, #0]
 8003338:	4827      	ldr	r0, [pc, #156]	; (80033d8 <_svfiprintf_r+0x1e4>)
 800333a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800333e:	2206      	movs	r2, #6
 8003340:	1c7e      	adds	r6, r7, #1
 8003342:	f7fc ff4d 	bl	80001e0 <memchr>
 8003346:	2800      	cmp	r0, #0
 8003348:	d038      	beq.n	80033bc <_svfiprintf_r+0x1c8>
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <_svfiprintf_r+0x1e8>)
 800334c:	bb13      	cbnz	r3, 8003394 <_svfiprintf_r+0x1a0>
 800334e:	9b03      	ldr	r3, [sp, #12]
 8003350:	3307      	adds	r3, #7
 8003352:	f023 0307 	bic.w	r3, r3, #7
 8003356:	3308      	adds	r3, #8
 8003358:	9303      	str	r3, [sp, #12]
 800335a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800335c:	444b      	add	r3, r9
 800335e:	9309      	str	r3, [sp, #36]	; 0x24
 8003360:	e76d      	b.n	800323e <_svfiprintf_r+0x4a>
 8003362:	fb05 3202 	mla	r2, r5, r2, r3
 8003366:	2001      	movs	r0, #1
 8003368:	460f      	mov	r7, r1
 800336a:	e7a6      	b.n	80032ba <_svfiprintf_r+0xc6>
 800336c:	2300      	movs	r3, #0
 800336e:	3701      	adds	r7, #1
 8003370:	9305      	str	r3, [sp, #20]
 8003372:	4619      	mov	r1, r3
 8003374:	250a      	movs	r5, #10
 8003376:	4638      	mov	r0, r7
 8003378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800337c:	3a30      	subs	r2, #48	; 0x30
 800337e:	2a09      	cmp	r2, #9
 8003380:	d903      	bls.n	800338a <_svfiprintf_r+0x196>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0c8      	beq.n	8003318 <_svfiprintf_r+0x124>
 8003386:	9105      	str	r1, [sp, #20]
 8003388:	e7c6      	b.n	8003318 <_svfiprintf_r+0x124>
 800338a:	fb05 2101 	mla	r1, r5, r1, r2
 800338e:	2301      	movs	r3, #1
 8003390:	4607      	mov	r7, r0
 8003392:	e7f0      	b.n	8003376 <_svfiprintf_r+0x182>
 8003394:	ab03      	add	r3, sp, #12
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	4622      	mov	r2, r4
 800339a:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <_svfiprintf_r+0x1ec>)
 800339c:	a904      	add	r1, sp, #16
 800339e:	4640      	mov	r0, r8
 80033a0:	f3af 8000 	nop.w
 80033a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80033a8:	4681      	mov	r9, r0
 80033aa:	d1d6      	bne.n	800335a <_svfiprintf_r+0x166>
 80033ac:	89a3      	ldrh	r3, [r4, #12]
 80033ae:	065b      	lsls	r3, r3, #25
 80033b0:	f53f af35 	bmi.w	800321e <_svfiprintf_r+0x2a>
 80033b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033b6:	b01d      	add	sp, #116	; 0x74
 80033b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033bc:	ab03      	add	r3, sp, #12
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	4622      	mov	r2, r4
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <_svfiprintf_r+0x1ec>)
 80033c4:	a904      	add	r1, sp, #16
 80033c6:	4640      	mov	r0, r8
 80033c8:	f000 f882 	bl	80034d0 <_printf_i>
 80033cc:	e7ea      	b.n	80033a4 <_svfiprintf_r+0x1b0>
 80033ce:	bf00      	nop
 80033d0:	08003a26 	.word	0x08003a26
 80033d4:	08003a2c 	.word	0x08003a2c
 80033d8:	08003a30 	.word	0x08003a30
 80033dc:	00000000 	.word	0x00000000
 80033e0:	08003141 	.word	0x08003141

080033e4 <_printf_common>:
 80033e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e8:	4691      	mov	r9, r2
 80033ea:	461f      	mov	r7, r3
 80033ec:	688a      	ldr	r2, [r1, #8]
 80033ee:	690b      	ldr	r3, [r1, #16]
 80033f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033f4:	4293      	cmp	r3, r2
 80033f6:	bfb8      	it	lt
 80033f8:	4613      	movlt	r3, r2
 80033fa:	f8c9 3000 	str.w	r3, [r9]
 80033fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003402:	4606      	mov	r6, r0
 8003404:	460c      	mov	r4, r1
 8003406:	b112      	cbz	r2, 800340e <_printf_common+0x2a>
 8003408:	3301      	adds	r3, #1
 800340a:	f8c9 3000 	str.w	r3, [r9]
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	0699      	lsls	r1, r3, #26
 8003412:	bf42      	ittt	mi
 8003414:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003418:	3302      	addmi	r3, #2
 800341a:	f8c9 3000 	strmi.w	r3, [r9]
 800341e:	6825      	ldr	r5, [r4, #0]
 8003420:	f015 0506 	ands.w	r5, r5, #6
 8003424:	d107      	bne.n	8003436 <_printf_common+0x52>
 8003426:	f104 0a19 	add.w	sl, r4, #25
 800342a:	68e3      	ldr	r3, [r4, #12]
 800342c:	f8d9 2000 	ldr.w	r2, [r9]
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	42ab      	cmp	r3, r5
 8003434:	dc28      	bgt.n	8003488 <_printf_common+0xa4>
 8003436:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800343a:	6822      	ldr	r2, [r4, #0]
 800343c:	3300      	adds	r3, #0
 800343e:	bf18      	it	ne
 8003440:	2301      	movne	r3, #1
 8003442:	0692      	lsls	r2, r2, #26
 8003444:	d42d      	bmi.n	80034a2 <_printf_common+0xbe>
 8003446:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800344a:	4639      	mov	r1, r7
 800344c:	4630      	mov	r0, r6
 800344e:	47c0      	blx	r8
 8003450:	3001      	adds	r0, #1
 8003452:	d020      	beq.n	8003496 <_printf_common+0xb2>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	68e5      	ldr	r5, [r4, #12]
 8003458:	f8d9 2000 	ldr.w	r2, [r9]
 800345c:	f003 0306 	and.w	r3, r3, #6
 8003460:	2b04      	cmp	r3, #4
 8003462:	bf08      	it	eq
 8003464:	1aad      	subeq	r5, r5, r2
 8003466:	68a3      	ldr	r3, [r4, #8]
 8003468:	6922      	ldr	r2, [r4, #16]
 800346a:	bf0c      	ite	eq
 800346c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003470:	2500      	movne	r5, #0
 8003472:	4293      	cmp	r3, r2
 8003474:	bfc4      	itt	gt
 8003476:	1a9b      	subgt	r3, r3, r2
 8003478:	18ed      	addgt	r5, r5, r3
 800347a:	f04f 0900 	mov.w	r9, #0
 800347e:	341a      	adds	r4, #26
 8003480:	454d      	cmp	r5, r9
 8003482:	d11a      	bne.n	80034ba <_printf_common+0xd6>
 8003484:	2000      	movs	r0, #0
 8003486:	e008      	b.n	800349a <_printf_common+0xb6>
 8003488:	2301      	movs	r3, #1
 800348a:	4652      	mov	r2, sl
 800348c:	4639      	mov	r1, r7
 800348e:	4630      	mov	r0, r6
 8003490:	47c0      	blx	r8
 8003492:	3001      	adds	r0, #1
 8003494:	d103      	bne.n	800349e <_printf_common+0xba>
 8003496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349e:	3501      	adds	r5, #1
 80034a0:	e7c3      	b.n	800342a <_printf_common+0x46>
 80034a2:	18e1      	adds	r1, r4, r3
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	2030      	movs	r0, #48	; 0x30
 80034a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034ac:	4422      	add	r2, r4
 80034ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034b6:	3302      	adds	r3, #2
 80034b8:	e7c5      	b.n	8003446 <_printf_common+0x62>
 80034ba:	2301      	movs	r3, #1
 80034bc:	4622      	mov	r2, r4
 80034be:	4639      	mov	r1, r7
 80034c0:	4630      	mov	r0, r6
 80034c2:	47c0      	blx	r8
 80034c4:	3001      	adds	r0, #1
 80034c6:	d0e6      	beq.n	8003496 <_printf_common+0xb2>
 80034c8:	f109 0901 	add.w	r9, r9, #1
 80034cc:	e7d8      	b.n	8003480 <_printf_common+0x9c>
	...

080034d0 <_printf_i>:
 80034d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80034d8:	460c      	mov	r4, r1
 80034da:	7e09      	ldrb	r1, [r1, #24]
 80034dc:	b085      	sub	sp, #20
 80034de:	296e      	cmp	r1, #110	; 0x6e
 80034e0:	4617      	mov	r7, r2
 80034e2:	4606      	mov	r6, r0
 80034e4:	4698      	mov	r8, r3
 80034e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034e8:	f000 80b3 	beq.w	8003652 <_printf_i+0x182>
 80034ec:	d822      	bhi.n	8003534 <_printf_i+0x64>
 80034ee:	2963      	cmp	r1, #99	; 0x63
 80034f0:	d036      	beq.n	8003560 <_printf_i+0x90>
 80034f2:	d80a      	bhi.n	800350a <_printf_i+0x3a>
 80034f4:	2900      	cmp	r1, #0
 80034f6:	f000 80b9 	beq.w	800366c <_printf_i+0x19c>
 80034fa:	2958      	cmp	r1, #88	; 0x58
 80034fc:	f000 8083 	beq.w	8003606 <_printf_i+0x136>
 8003500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003504:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003508:	e032      	b.n	8003570 <_printf_i+0xa0>
 800350a:	2964      	cmp	r1, #100	; 0x64
 800350c:	d001      	beq.n	8003512 <_printf_i+0x42>
 800350e:	2969      	cmp	r1, #105	; 0x69
 8003510:	d1f6      	bne.n	8003500 <_printf_i+0x30>
 8003512:	6820      	ldr	r0, [r4, #0]
 8003514:	6813      	ldr	r3, [r2, #0]
 8003516:	0605      	lsls	r5, r0, #24
 8003518:	f103 0104 	add.w	r1, r3, #4
 800351c:	d52a      	bpl.n	8003574 <_printf_i+0xa4>
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6011      	str	r1, [r2, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	da03      	bge.n	800352e <_printf_i+0x5e>
 8003526:	222d      	movs	r2, #45	; 0x2d
 8003528:	425b      	negs	r3, r3
 800352a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800352e:	486f      	ldr	r0, [pc, #444]	; (80036ec <_printf_i+0x21c>)
 8003530:	220a      	movs	r2, #10
 8003532:	e039      	b.n	80035a8 <_printf_i+0xd8>
 8003534:	2973      	cmp	r1, #115	; 0x73
 8003536:	f000 809d 	beq.w	8003674 <_printf_i+0x1a4>
 800353a:	d808      	bhi.n	800354e <_printf_i+0x7e>
 800353c:	296f      	cmp	r1, #111	; 0x6f
 800353e:	d020      	beq.n	8003582 <_printf_i+0xb2>
 8003540:	2970      	cmp	r1, #112	; 0x70
 8003542:	d1dd      	bne.n	8003500 <_printf_i+0x30>
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	f043 0320 	orr.w	r3, r3, #32
 800354a:	6023      	str	r3, [r4, #0]
 800354c:	e003      	b.n	8003556 <_printf_i+0x86>
 800354e:	2975      	cmp	r1, #117	; 0x75
 8003550:	d017      	beq.n	8003582 <_printf_i+0xb2>
 8003552:	2978      	cmp	r1, #120	; 0x78
 8003554:	d1d4      	bne.n	8003500 <_printf_i+0x30>
 8003556:	2378      	movs	r3, #120	; 0x78
 8003558:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800355c:	4864      	ldr	r0, [pc, #400]	; (80036f0 <_printf_i+0x220>)
 800355e:	e055      	b.n	800360c <_printf_i+0x13c>
 8003560:	6813      	ldr	r3, [r2, #0]
 8003562:	1d19      	adds	r1, r3, #4
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6011      	str	r1, [r2, #0]
 8003568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800356c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003570:	2301      	movs	r3, #1
 8003572:	e08c      	b.n	800368e <_printf_i+0x1be>
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6011      	str	r1, [r2, #0]
 8003578:	f010 0f40 	tst.w	r0, #64	; 0x40
 800357c:	bf18      	it	ne
 800357e:	b21b      	sxthne	r3, r3
 8003580:	e7cf      	b.n	8003522 <_printf_i+0x52>
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	6825      	ldr	r5, [r4, #0]
 8003586:	1d18      	adds	r0, r3, #4
 8003588:	6010      	str	r0, [r2, #0]
 800358a:	0628      	lsls	r0, r5, #24
 800358c:	d501      	bpl.n	8003592 <_printf_i+0xc2>
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	e002      	b.n	8003598 <_printf_i+0xc8>
 8003592:	0668      	lsls	r0, r5, #25
 8003594:	d5fb      	bpl.n	800358e <_printf_i+0xbe>
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	4854      	ldr	r0, [pc, #336]	; (80036ec <_printf_i+0x21c>)
 800359a:	296f      	cmp	r1, #111	; 0x6f
 800359c:	bf14      	ite	ne
 800359e:	220a      	movne	r2, #10
 80035a0:	2208      	moveq	r2, #8
 80035a2:	2100      	movs	r1, #0
 80035a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035a8:	6865      	ldr	r5, [r4, #4]
 80035aa:	60a5      	str	r5, [r4, #8]
 80035ac:	2d00      	cmp	r5, #0
 80035ae:	f2c0 8095 	blt.w	80036dc <_printf_i+0x20c>
 80035b2:	6821      	ldr	r1, [r4, #0]
 80035b4:	f021 0104 	bic.w	r1, r1, #4
 80035b8:	6021      	str	r1, [r4, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d13d      	bne.n	800363a <_printf_i+0x16a>
 80035be:	2d00      	cmp	r5, #0
 80035c0:	f040 808e 	bne.w	80036e0 <_printf_i+0x210>
 80035c4:	4665      	mov	r5, ip
 80035c6:	2a08      	cmp	r2, #8
 80035c8:	d10b      	bne.n	80035e2 <_printf_i+0x112>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	07db      	lsls	r3, r3, #31
 80035ce:	d508      	bpl.n	80035e2 <_printf_i+0x112>
 80035d0:	6923      	ldr	r3, [r4, #16]
 80035d2:	6862      	ldr	r2, [r4, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	bfde      	ittt	le
 80035d8:	2330      	movle	r3, #48	; 0x30
 80035da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035de:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80035e2:	ebac 0305 	sub.w	r3, ip, r5
 80035e6:	6123      	str	r3, [r4, #16]
 80035e8:	f8cd 8000 	str.w	r8, [sp]
 80035ec:	463b      	mov	r3, r7
 80035ee:	aa03      	add	r2, sp, #12
 80035f0:	4621      	mov	r1, r4
 80035f2:	4630      	mov	r0, r6
 80035f4:	f7ff fef6 	bl	80033e4 <_printf_common>
 80035f8:	3001      	adds	r0, #1
 80035fa:	d14d      	bne.n	8003698 <_printf_i+0x1c8>
 80035fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003600:	b005      	add	sp, #20
 8003602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003606:	4839      	ldr	r0, [pc, #228]	; (80036ec <_printf_i+0x21c>)
 8003608:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	6821      	ldr	r1, [r4, #0]
 8003610:	1d1d      	adds	r5, r3, #4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6015      	str	r5, [r2, #0]
 8003616:	060a      	lsls	r2, r1, #24
 8003618:	d50b      	bpl.n	8003632 <_printf_i+0x162>
 800361a:	07ca      	lsls	r2, r1, #31
 800361c:	bf44      	itt	mi
 800361e:	f041 0120 	orrmi.w	r1, r1, #32
 8003622:	6021      	strmi	r1, [r4, #0]
 8003624:	b91b      	cbnz	r3, 800362e <_printf_i+0x15e>
 8003626:	6822      	ldr	r2, [r4, #0]
 8003628:	f022 0220 	bic.w	r2, r2, #32
 800362c:	6022      	str	r2, [r4, #0]
 800362e:	2210      	movs	r2, #16
 8003630:	e7b7      	b.n	80035a2 <_printf_i+0xd2>
 8003632:	064d      	lsls	r5, r1, #25
 8003634:	bf48      	it	mi
 8003636:	b29b      	uxthmi	r3, r3
 8003638:	e7ef      	b.n	800361a <_printf_i+0x14a>
 800363a:	4665      	mov	r5, ip
 800363c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003640:	fb02 3311 	mls	r3, r2, r1, r3
 8003644:	5cc3      	ldrb	r3, [r0, r3]
 8003646:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800364a:	460b      	mov	r3, r1
 800364c:	2900      	cmp	r1, #0
 800364e:	d1f5      	bne.n	800363c <_printf_i+0x16c>
 8003650:	e7b9      	b.n	80035c6 <_printf_i+0xf6>
 8003652:	6813      	ldr	r3, [r2, #0]
 8003654:	6825      	ldr	r5, [r4, #0]
 8003656:	6961      	ldr	r1, [r4, #20]
 8003658:	1d18      	adds	r0, r3, #4
 800365a:	6010      	str	r0, [r2, #0]
 800365c:	0628      	lsls	r0, r5, #24
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	d501      	bpl.n	8003666 <_printf_i+0x196>
 8003662:	6019      	str	r1, [r3, #0]
 8003664:	e002      	b.n	800366c <_printf_i+0x19c>
 8003666:	066a      	lsls	r2, r5, #25
 8003668:	d5fb      	bpl.n	8003662 <_printf_i+0x192>
 800366a:	8019      	strh	r1, [r3, #0]
 800366c:	2300      	movs	r3, #0
 800366e:	6123      	str	r3, [r4, #16]
 8003670:	4665      	mov	r5, ip
 8003672:	e7b9      	b.n	80035e8 <_printf_i+0x118>
 8003674:	6813      	ldr	r3, [r2, #0]
 8003676:	1d19      	adds	r1, r3, #4
 8003678:	6011      	str	r1, [r2, #0]
 800367a:	681d      	ldr	r5, [r3, #0]
 800367c:	6862      	ldr	r2, [r4, #4]
 800367e:	2100      	movs	r1, #0
 8003680:	4628      	mov	r0, r5
 8003682:	f7fc fdad 	bl	80001e0 <memchr>
 8003686:	b108      	cbz	r0, 800368c <_printf_i+0x1bc>
 8003688:	1b40      	subs	r0, r0, r5
 800368a:	6060      	str	r0, [r4, #4]
 800368c:	6863      	ldr	r3, [r4, #4]
 800368e:	6123      	str	r3, [r4, #16]
 8003690:	2300      	movs	r3, #0
 8003692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003696:	e7a7      	b.n	80035e8 <_printf_i+0x118>
 8003698:	6923      	ldr	r3, [r4, #16]
 800369a:	462a      	mov	r2, r5
 800369c:	4639      	mov	r1, r7
 800369e:	4630      	mov	r0, r6
 80036a0:	47c0      	blx	r8
 80036a2:	3001      	adds	r0, #1
 80036a4:	d0aa      	beq.n	80035fc <_printf_i+0x12c>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	079b      	lsls	r3, r3, #30
 80036aa:	d413      	bmi.n	80036d4 <_printf_i+0x204>
 80036ac:	68e0      	ldr	r0, [r4, #12]
 80036ae:	9b03      	ldr	r3, [sp, #12]
 80036b0:	4298      	cmp	r0, r3
 80036b2:	bfb8      	it	lt
 80036b4:	4618      	movlt	r0, r3
 80036b6:	e7a3      	b.n	8003600 <_printf_i+0x130>
 80036b8:	2301      	movs	r3, #1
 80036ba:	464a      	mov	r2, r9
 80036bc:	4639      	mov	r1, r7
 80036be:	4630      	mov	r0, r6
 80036c0:	47c0      	blx	r8
 80036c2:	3001      	adds	r0, #1
 80036c4:	d09a      	beq.n	80035fc <_printf_i+0x12c>
 80036c6:	3501      	adds	r5, #1
 80036c8:	68e3      	ldr	r3, [r4, #12]
 80036ca:	9a03      	ldr	r2, [sp, #12]
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	42ab      	cmp	r3, r5
 80036d0:	dcf2      	bgt.n	80036b8 <_printf_i+0x1e8>
 80036d2:	e7eb      	b.n	80036ac <_printf_i+0x1dc>
 80036d4:	2500      	movs	r5, #0
 80036d6:	f104 0919 	add.w	r9, r4, #25
 80036da:	e7f5      	b.n	80036c8 <_printf_i+0x1f8>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ac      	bne.n	800363a <_printf_i+0x16a>
 80036e0:	7803      	ldrb	r3, [r0, #0]
 80036e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036ea:	e76c      	b.n	80035c6 <_printf_i+0xf6>
 80036ec:	08003a37 	.word	0x08003a37
 80036f0:	08003a48 	.word	0x08003a48

080036f4 <memcpy>:
 80036f4:	b510      	push	{r4, lr}
 80036f6:	1e43      	subs	r3, r0, #1
 80036f8:	440a      	add	r2, r1
 80036fa:	4291      	cmp	r1, r2
 80036fc:	d100      	bne.n	8003700 <memcpy+0xc>
 80036fe:	bd10      	pop	{r4, pc}
 8003700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003708:	e7f7      	b.n	80036fa <memcpy+0x6>

0800370a <memmove>:
 800370a:	4288      	cmp	r0, r1
 800370c:	b510      	push	{r4, lr}
 800370e:	eb01 0302 	add.w	r3, r1, r2
 8003712:	d807      	bhi.n	8003724 <memmove+0x1a>
 8003714:	1e42      	subs	r2, r0, #1
 8003716:	4299      	cmp	r1, r3
 8003718:	d00a      	beq.n	8003730 <memmove+0x26>
 800371a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800371e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003722:	e7f8      	b.n	8003716 <memmove+0xc>
 8003724:	4283      	cmp	r3, r0
 8003726:	d9f5      	bls.n	8003714 <memmove+0xa>
 8003728:	1881      	adds	r1, r0, r2
 800372a:	1ad2      	subs	r2, r2, r3
 800372c:	42d3      	cmn	r3, r2
 800372e:	d100      	bne.n	8003732 <memmove+0x28>
 8003730:	bd10      	pop	{r4, pc}
 8003732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003736:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800373a:	e7f7      	b.n	800372c <memmove+0x22>

0800373c <_free_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4605      	mov	r5, r0
 8003740:	2900      	cmp	r1, #0
 8003742:	d045      	beq.n	80037d0 <_free_r+0x94>
 8003744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003748:	1f0c      	subs	r4, r1, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	bfb8      	it	lt
 800374e:	18e4      	addlt	r4, r4, r3
 8003750:	f000 f8d2 	bl	80038f8 <__malloc_lock>
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <_free_r+0x98>)
 8003756:	6813      	ldr	r3, [r2, #0]
 8003758:	4610      	mov	r0, r2
 800375a:	b933      	cbnz	r3, 800376a <_free_r+0x2e>
 800375c:	6063      	str	r3, [r4, #4]
 800375e:	6014      	str	r4, [r2, #0]
 8003760:	4628      	mov	r0, r5
 8003762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003766:	f000 b8c8 	b.w	80038fa <__malloc_unlock>
 800376a:	42a3      	cmp	r3, r4
 800376c:	d90c      	bls.n	8003788 <_free_r+0x4c>
 800376e:	6821      	ldr	r1, [r4, #0]
 8003770:	1862      	adds	r2, r4, r1
 8003772:	4293      	cmp	r3, r2
 8003774:	bf04      	itt	eq
 8003776:	681a      	ldreq	r2, [r3, #0]
 8003778:	685b      	ldreq	r3, [r3, #4]
 800377a:	6063      	str	r3, [r4, #4]
 800377c:	bf04      	itt	eq
 800377e:	1852      	addeq	r2, r2, r1
 8003780:	6022      	streq	r2, [r4, #0]
 8003782:	6004      	str	r4, [r0, #0]
 8003784:	e7ec      	b.n	8003760 <_free_r+0x24>
 8003786:	4613      	mov	r3, r2
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	b10a      	cbz	r2, 8003790 <_free_r+0x54>
 800378c:	42a2      	cmp	r2, r4
 800378e:	d9fa      	bls.n	8003786 <_free_r+0x4a>
 8003790:	6819      	ldr	r1, [r3, #0]
 8003792:	1858      	adds	r0, r3, r1
 8003794:	42a0      	cmp	r0, r4
 8003796:	d10b      	bne.n	80037b0 <_free_r+0x74>
 8003798:	6820      	ldr	r0, [r4, #0]
 800379a:	4401      	add	r1, r0
 800379c:	1858      	adds	r0, r3, r1
 800379e:	4282      	cmp	r2, r0
 80037a0:	6019      	str	r1, [r3, #0]
 80037a2:	d1dd      	bne.n	8003760 <_free_r+0x24>
 80037a4:	6810      	ldr	r0, [r2, #0]
 80037a6:	6852      	ldr	r2, [r2, #4]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	4401      	add	r1, r0
 80037ac:	6019      	str	r1, [r3, #0]
 80037ae:	e7d7      	b.n	8003760 <_free_r+0x24>
 80037b0:	d902      	bls.n	80037b8 <_free_r+0x7c>
 80037b2:	230c      	movs	r3, #12
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	e7d3      	b.n	8003760 <_free_r+0x24>
 80037b8:	6820      	ldr	r0, [r4, #0]
 80037ba:	1821      	adds	r1, r4, r0
 80037bc:	428a      	cmp	r2, r1
 80037be:	bf04      	itt	eq
 80037c0:	6811      	ldreq	r1, [r2, #0]
 80037c2:	6852      	ldreq	r2, [r2, #4]
 80037c4:	6062      	str	r2, [r4, #4]
 80037c6:	bf04      	itt	eq
 80037c8:	1809      	addeq	r1, r1, r0
 80037ca:	6021      	streq	r1, [r4, #0]
 80037cc:	605c      	str	r4, [r3, #4]
 80037ce:	e7c7      	b.n	8003760 <_free_r+0x24>
 80037d0:	bd38      	pop	{r3, r4, r5, pc}
 80037d2:	bf00      	nop
 80037d4:	200001a0 	.word	0x200001a0

080037d8 <_malloc_r>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	1ccd      	adds	r5, r1, #3
 80037dc:	f025 0503 	bic.w	r5, r5, #3
 80037e0:	3508      	adds	r5, #8
 80037e2:	2d0c      	cmp	r5, #12
 80037e4:	bf38      	it	cc
 80037e6:	250c      	movcc	r5, #12
 80037e8:	2d00      	cmp	r5, #0
 80037ea:	4606      	mov	r6, r0
 80037ec:	db01      	blt.n	80037f2 <_malloc_r+0x1a>
 80037ee:	42a9      	cmp	r1, r5
 80037f0:	d903      	bls.n	80037fa <_malloc_r+0x22>
 80037f2:	230c      	movs	r3, #12
 80037f4:	6033      	str	r3, [r6, #0]
 80037f6:	2000      	movs	r0, #0
 80037f8:	bd70      	pop	{r4, r5, r6, pc}
 80037fa:	f000 f87d 	bl	80038f8 <__malloc_lock>
 80037fe:	4a21      	ldr	r2, [pc, #132]	; (8003884 <_malloc_r+0xac>)
 8003800:	6814      	ldr	r4, [r2, #0]
 8003802:	4621      	mov	r1, r4
 8003804:	b991      	cbnz	r1, 800382c <_malloc_r+0x54>
 8003806:	4c20      	ldr	r4, [pc, #128]	; (8003888 <_malloc_r+0xb0>)
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	b91b      	cbnz	r3, 8003814 <_malloc_r+0x3c>
 800380c:	4630      	mov	r0, r6
 800380e:	f000 f863 	bl	80038d8 <_sbrk_r>
 8003812:	6020      	str	r0, [r4, #0]
 8003814:	4629      	mov	r1, r5
 8003816:	4630      	mov	r0, r6
 8003818:	f000 f85e 	bl	80038d8 <_sbrk_r>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	d124      	bne.n	800386a <_malloc_r+0x92>
 8003820:	230c      	movs	r3, #12
 8003822:	6033      	str	r3, [r6, #0]
 8003824:	4630      	mov	r0, r6
 8003826:	f000 f868 	bl	80038fa <__malloc_unlock>
 800382a:	e7e4      	b.n	80037f6 <_malloc_r+0x1e>
 800382c:	680b      	ldr	r3, [r1, #0]
 800382e:	1b5b      	subs	r3, r3, r5
 8003830:	d418      	bmi.n	8003864 <_malloc_r+0x8c>
 8003832:	2b0b      	cmp	r3, #11
 8003834:	d90f      	bls.n	8003856 <_malloc_r+0x7e>
 8003836:	600b      	str	r3, [r1, #0]
 8003838:	50cd      	str	r5, [r1, r3]
 800383a:	18cc      	adds	r4, r1, r3
 800383c:	4630      	mov	r0, r6
 800383e:	f000 f85c 	bl	80038fa <__malloc_unlock>
 8003842:	f104 000b 	add.w	r0, r4, #11
 8003846:	1d23      	adds	r3, r4, #4
 8003848:	f020 0007 	bic.w	r0, r0, #7
 800384c:	1ac3      	subs	r3, r0, r3
 800384e:	d0d3      	beq.n	80037f8 <_malloc_r+0x20>
 8003850:	425a      	negs	r2, r3
 8003852:	50e2      	str	r2, [r4, r3]
 8003854:	e7d0      	b.n	80037f8 <_malloc_r+0x20>
 8003856:	428c      	cmp	r4, r1
 8003858:	684b      	ldr	r3, [r1, #4]
 800385a:	bf16      	itet	ne
 800385c:	6063      	strne	r3, [r4, #4]
 800385e:	6013      	streq	r3, [r2, #0]
 8003860:	460c      	movne	r4, r1
 8003862:	e7eb      	b.n	800383c <_malloc_r+0x64>
 8003864:	460c      	mov	r4, r1
 8003866:	6849      	ldr	r1, [r1, #4]
 8003868:	e7cc      	b.n	8003804 <_malloc_r+0x2c>
 800386a:	1cc4      	adds	r4, r0, #3
 800386c:	f024 0403 	bic.w	r4, r4, #3
 8003870:	42a0      	cmp	r0, r4
 8003872:	d005      	beq.n	8003880 <_malloc_r+0xa8>
 8003874:	1a21      	subs	r1, r4, r0
 8003876:	4630      	mov	r0, r6
 8003878:	f000 f82e 	bl	80038d8 <_sbrk_r>
 800387c:	3001      	adds	r0, #1
 800387e:	d0cf      	beq.n	8003820 <_malloc_r+0x48>
 8003880:	6025      	str	r5, [r4, #0]
 8003882:	e7db      	b.n	800383c <_malloc_r+0x64>
 8003884:	200001a0 	.word	0x200001a0
 8003888:	200001a4 	.word	0x200001a4

0800388c <_realloc_r>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	4607      	mov	r7, r0
 8003890:	4614      	mov	r4, r2
 8003892:	460e      	mov	r6, r1
 8003894:	b921      	cbnz	r1, 80038a0 <_realloc_r+0x14>
 8003896:	4611      	mov	r1, r2
 8003898:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800389c:	f7ff bf9c 	b.w	80037d8 <_malloc_r>
 80038a0:	b922      	cbnz	r2, 80038ac <_realloc_r+0x20>
 80038a2:	f7ff ff4b 	bl	800373c <_free_r>
 80038a6:	4625      	mov	r5, r4
 80038a8:	4628      	mov	r0, r5
 80038aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ac:	f000 f826 	bl	80038fc <_malloc_usable_size_r>
 80038b0:	42a0      	cmp	r0, r4
 80038b2:	d20f      	bcs.n	80038d4 <_realloc_r+0x48>
 80038b4:	4621      	mov	r1, r4
 80038b6:	4638      	mov	r0, r7
 80038b8:	f7ff ff8e 	bl	80037d8 <_malloc_r>
 80038bc:	4605      	mov	r5, r0
 80038be:	2800      	cmp	r0, #0
 80038c0:	d0f2      	beq.n	80038a8 <_realloc_r+0x1c>
 80038c2:	4631      	mov	r1, r6
 80038c4:	4622      	mov	r2, r4
 80038c6:	f7ff ff15 	bl	80036f4 <memcpy>
 80038ca:	4631      	mov	r1, r6
 80038cc:	4638      	mov	r0, r7
 80038ce:	f7ff ff35 	bl	800373c <_free_r>
 80038d2:	e7e9      	b.n	80038a8 <_realloc_r+0x1c>
 80038d4:	4635      	mov	r5, r6
 80038d6:	e7e7      	b.n	80038a8 <_realloc_r+0x1c>

080038d8 <_sbrk_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	4c06      	ldr	r4, [pc, #24]	; (80038f4 <_sbrk_r+0x1c>)
 80038dc:	2300      	movs	r3, #0
 80038de:	4605      	mov	r5, r0
 80038e0:	4608      	mov	r0, r1
 80038e2:	6023      	str	r3, [r4, #0]
 80038e4:	f000 f812 	bl	800390c <_sbrk>
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d102      	bne.n	80038f2 <_sbrk_r+0x1a>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	b103      	cbz	r3, 80038f2 <_sbrk_r+0x1a>
 80038f0:	602b      	str	r3, [r5, #0]
 80038f2:	bd38      	pop	{r3, r4, r5, pc}
 80038f4:	200002c0 	.word	0x200002c0

080038f8 <__malloc_lock>:
 80038f8:	4770      	bx	lr

080038fa <__malloc_unlock>:
 80038fa:	4770      	bx	lr

080038fc <_malloc_usable_size_r>:
 80038fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003900:	1f18      	subs	r0, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	bfbc      	itt	lt
 8003906:	580b      	ldrlt	r3, [r1, r0]
 8003908:	18c0      	addlt	r0, r0, r3
 800390a:	4770      	bx	lr

0800390c <_sbrk>:
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <_sbrk+0x14>)
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	4602      	mov	r2, r0
 8003912:	b909      	cbnz	r1, 8003918 <_sbrk+0xc>
 8003914:	4903      	ldr	r1, [pc, #12]	; (8003924 <_sbrk+0x18>)
 8003916:	6019      	str	r1, [r3, #0]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	4402      	add	r2, r0
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	4770      	bx	lr
 8003920:	200001a8 	.word	0x200001a8
 8003924:	200002c4 	.word	0x200002c4

08003928 <_init>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	bf00      	nop
 800392c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392e:	bc08      	pop	{r3}
 8003930:	469e      	mov	lr, r3
 8003932:	4770      	bx	lr

08003934 <_fini>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	bf00      	nop
 8003938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393a:	bc08      	pop	{r3}
 800393c:	469e      	mov	lr, r3
 800393e:	4770      	bx	lr
