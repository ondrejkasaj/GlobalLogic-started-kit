
Humidity:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001894  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001a1c  08001a1c  00011a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a8c  08001a8c  00011a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a90  08001a90  00011a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000064  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000074  20000074  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006062  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001450  00000000  00000000  000260a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005d0  00000000  00000000  000274f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004f8  00000000  00000000  00027ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000031c1  00000000  00000000  00027fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006cfc  00000000  00000000  0002b181  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0006017f  00000000  00000000  00031e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00091ffc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001624  00000000  00000000  00092078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a04 	.word	0x08001a04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001a04 	.word	0x08001a04

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001d8:	b480      	push	{r7}
 80001da:	b087      	sub	sp, #28
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]
 80001e6:	2300      	movs	r3, #0
 80001e8:	613b      	str	r3, [r7, #16]
 80001ea:	2300      	movs	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]
 80001f2:	e076      	b.n	80002e2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001f4:	2201      	movs	r2, #1
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	fa02 f303 	lsl.w	r3, r2, r3
 80001fc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	693a      	ldr	r2, [r7, #16]
 8000204:	4013      	ands	r3, r2
 8000206:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000208:	68fa      	ldr	r2, [r7, #12]
 800020a:	693b      	ldr	r3, [r7, #16]
 800020c:	429a      	cmp	r2, r3
 800020e:	d165      	bne.n	80002dc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	2103      	movs	r1, #3
 800021a:	fa01 f303 	lsl.w	r3, r1, r3
 800021e:	43db      	mvns	r3, r3
 8000220:	401a      	ands	r2, r3
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	791b      	ldrb	r3, [r3, #4]
 800022e:	4619      	mov	r1, r3
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	005b      	lsls	r3, r3, #1
 8000234:	fa01 f303 	lsl.w	r3, r1, r3
 8000238:	431a      	orrs	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	791b      	ldrb	r3, [r3, #4]
 8000242:	2b01      	cmp	r3, #1
 8000244:	d003      	beq.n	800024e <GPIO_Init+0x76>
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	791b      	ldrb	r3, [r3, #4]
 800024a:	2b02      	cmp	r3, #2
 800024c:	d12e      	bne.n	80002ac <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689a      	ldr	r2, [r3, #8]
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	2103      	movs	r1, #3
 8000258:	fa01 f303 	lsl.w	r3, r1, r3
 800025c:	43db      	mvns	r3, r3
 800025e:	401a      	ands	r2, r3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	689a      	ldr	r2, [r3, #8]
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	795b      	ldrb	r3, [r3, #5]
 800026c:	4619      	mov	r1, r3
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
 8000276:	431a      	orrs	r2, r3
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	685a      	ldr	r2, [r3, #4]
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	b29b      	uxth	r3, r3
 8000284:	4619      	mov	r1, r3
 8000286:	2301      	movs	r3, #1
 8000288:	408b      	lsls	r3, r1
 800028a:	43db      	mvns	r3, r3
 800028c:	401a      	ands	r2, r3
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	7992      	ldrb	r2, [r2, #6]
 800029a:	4611      	mov	r1, r2
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	b292      	uxth	r2, r2
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	b292      	uxth	r2, r2
 80002a6:	431a      	orrs	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	68da      	ldr	r2, [r3, #12]
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	b29b      	uxth	r3, r3
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	2103      	movs	r1, #3
 80002b8:	fa01 f303 	lsl.w	r3, r1, r3
 80002bc:	43db      	mvns	r3, r3
 80002be:	401a      	ands	r2, r3
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	68da      	ldr	r2, [r3, #12]
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	79db      	ldrb	r3, [r3, #7]
 80002cc:	4619      	mov	r1, r3
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	431a      	orrs	r2, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	3301      	adds	r3, #1
 80002e0:	617b      	str	r3, [r7, #20]
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	2b0f      	cmp	r3, #15
 80002e6:	d985      	bls.n	80001f4 <GPIO_Init+0x1c>
    }
  }
}
 80002e8:	bf00      	nop
 80002ea:	371c      	adds	r7, #28
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000300:	2300      	movs	r3, #0
 8000302:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	691a      	ldr	r2, [r3, #16]
 8000308:	887b      	ldrh	r3, [r7, #2]
 800030a:	4013      	ands	r3, r2
 800030c:	2b00      	cmp	r3, #0
 800030e:	d002      	beq.n	8000316 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000310:	2301      	movs	r3, #1
 8000312:	73fb      	strb	r3, [r7, #15]
 8000314:	e001      	b.n	800031a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000316:	2300      	movs	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800031a:	7bfb      	ldrb	r3, [r7, #15]
}
 800031c:	4618      	mov	r0, r3
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	887a      	ldrh	r2, [r7, #2]
 8000338:	831a      	strh	r2, [r3, #24]
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr

08000346 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000346:	b480      	push	{r7}
 8000348:	b083      	sub	sp, #12
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
 800034e:	460b      	mov	r3, r1
 8000350:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	887a      	ldrh	r2, [r7, #2]
 8000356:	835a      	strh	r2, [r3, #26]
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	807b      	strh	r3, [r7, #2]
 8000370:	4613      	mov	r3, r2
 8000372:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000378:	2300      	movs	r3, #0
 800037a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800037c:	787a      	ldrb	r2, [r7, #1]
 800037e:	887b      	ldrh	r3, [r7, #2]
 8000380:	f003 0307 	and.w	r3, r3, #7
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800038c:	887b      	ldrh	r3, [r7, #2]
 800038e:	08db      	lsrs	r3, r3, #3
 8000390:	b29b      	uxth	r3, r3
 8000392:	461a      	mov	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3208      	adds	r2, #8
 8000398:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800039c:	887b      	ldrh	r3, [r7, #2]
 800039e:	f003 0307 	and.w	r3, r3, #7
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	210f      	movs	r1, #15
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	43db      	mvns	r3, r3
 80003ac:	8879      	ldrh	r1, [r7, #2]
 80003ae:	08c9      	lsrs	r1, r1, #3
 80003b0:	b289      	uxth	r1, r1
 80003b2:	4608      	mov	r0, r1
 80003b4:	ea02 0103 	and.w	r1, r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f100 0208 	add.w	r2, r0, #8
 80003be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003c2:	887b      	ldrh	r3, [r7, #2]
 80003c4:	08db      	lsrs	r3, r3, #3
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	461a      	mov	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3208      	adds	r2, #8
 80003ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003d8:	887b      	ldrh	r3, [r7, #2]
 80003da:	08db      	lsrs	r3, r3, #3
 80003dc:	b29b      	uxth	r3, r3
 80003de:	461a      	mov	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3208      	adds	r2, #8
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b089      	sub	sp, #36	; 0x24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000400:	2300      	movs	r3, #0
 8000402:	61bb      	str	r3, [r7, #24]
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
 8000408:	2300      	movs	r3, #0
 800040a:	61fb      	str	r3, [r7, #28]
 800040c:	2302      	movs	r3, #2
 800040e:	613b      	str	r3, [r7, #16]
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	2302      	movs	r3, #2
 8000416:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000418:	4b47      	ldr	r3, [pc, #284]	; (8000538 <RCC_GetClocksFreq+0x140>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	f003 030c 	and.w	r3, r3, #12
 8000420:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	2b04      	cmp	r3, #4
 8000426:	d007      	beq.n	8000438 <RCC_GetClocksFreq+0x40>
 8000428:	2b08      	cmp	r3, #8
 800042a:	d009      	beq.n	8000440 <RCC_GetClocksFreq+0x48>
 800042c:	2b00      	cmp	r3, #0
 800042e:	d13d      	bne.n	80004ac <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a42      	ldr	r2, [pc, #264]	; (800053c <RCC_GetClocksFreq+0x144>)
 8000434:	601a      	str	r2, [r3, #0]
      break;
 8000436:	e03d      	b.n	80004b4 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a41      	ldr	r2, [pc, #260]	; (8000540 <RCC_GetClocksFreq+0x148>)
 800043c:	601a      	str	r2, [r3, #0]
      break;
 800043e:	e039      	b.n	80004b4 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000440:	4b3d      	ldr	r3, [pc, #244]	; (8000538 <RCC_GetClocksFreq+0x140>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	0d9b      	lsrs	r3, r3, #22
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800044c:	4b3a      	ldr	r3, [pc, #232]	; (8000538 <RCC_GetClocksFreq+0x140>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000454:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d00c      	beq.n	8000476 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800045c:	4a38      	ldr	r2, [pc, #224]	; (8000540 <RCC_GetClocksFreq+0x148>)
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	fbb2 f3f3 	udiv	r3, r2, r3
 8000464:	4a34      	ldr	r2, [pc, #208]	; (8000538 <RCC_GetClocksFreq+0x140>)
 8000466:	6852      	ldr	r2, [r2, #4]
 8000468:	0992      	lsrs	r2, r2, #6
 800046a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800046e:	fb02 f303 	mul.w	r3, r2, r3
 8000472:	61fb      	str	r3, [r7, #28]
 8000474:	e00b      	b.n	800048e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000476:	4a31      	ldr	r2, [pc, #196]	; (800053c <RCC_GetClocksFreq+0x144>)
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	fbb2 f3f3 	udiv	r3, r2, r3
 800047e:	4a2e      	ldr	r2, [pc, #184]	; (8000538 <RCC_GetClocksFreq+0x140>)
 8000480:	6852      	ldr	r2, [r2, #4]
 8000482:	0992      	lsrs	r2, r2, #6
 8000484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000488:	fb02 f303 	mul.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800048e:	4b2a      	ldr	r3, [pc, #168]	; (8000538 <RCC_GetClocksFreq+0x140>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	0c1b      	lsrs	r3, r3, #16
 8000494:	f003 0303 	and.w	r3, r3, #3
 8000498:	3301      	adds	r3, #1
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800049e:	69fa      	ldr	r2, [r7, #28]
 80004a0:	693b      	ldr	r3, [r7, #16]
 80004a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	601a      	str	r2, [r3, #0]
      break;
 80004aa:	e003      	b.n	80004b4 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a23      	ldr	r2, [pc, #140]	; (800053c <RCC_GetClocksFreq+0x144>)
 80004b0:	601a      	str	r2, [r3, #0]
      break;
 80004b2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80004b4:	4b20      	ldr	r3, [pc, #128]	; (8000538 <RCC_GetClocksFreq+0x140>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80004bc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80004be:	69bb      	ldr	r3, [r7, #24]
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80004c4:	4a1f      	ldr	r2, [pc, #124]	; (8000544 <RCC_GetClocksFreq+0x14c>)
 80004c6:	69bb      	ldr	r3, [r7, #24]
 80004c8:	4413      	add	r3, r2
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	40da      	lsrs	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <RCC_GetClocksFreq+0x140>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80004e4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80004e6:	69bb      	ldr	r3, [r7, #24]
 80004e8:	0a9b      	lsrs	r3, r3, #10
 80004ea:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <RCC_GetClocksFreq+0x14c>)
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	4413      	add	r3, r2
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	685a      	ldr	r2, [r3, #4]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	40da      	lsrs	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <RCC_GetClocksFreq+0x140>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800050c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	0b5b      	lsrs	r3, r3, #13
 8000512:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <RCC_GetClocksFreq+0x14c>)
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	4413      	add	r3, r2
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	40da      	lsrs	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	60da      	str	r2, [r3, #12]
}
 800052c:	bf00      	nop
 800052e:	3724      	adds	r7, #36	; 0x24
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40023800 	.word	0x40023800
 800053c:	00f42400 	.word	0x00f42400
 8000540:	007a1200 	.word	0x007a1200
 8000544:	20000000 	.word	0x20000000

08000548 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d006      	beq.n	8000568 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <RCC_AHB1PeriphClockCmd+0x3c>)
 800055c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800055e:	4909      	ldr	r1, [pc, #36]	; (8000584 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4313      	orrs	r3, r2
 8000564:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000566:	e006      	b.n	8000576 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <RCC_AHB1PeriphClockCmd+0x3c>)
 800056a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	43db      	mvns	r3, r3
 8000570:	4904      	ldr	r1, [pc, #16]	; (8000584 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000572:	4013      	ands	r3, r2
 8000574:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800

08000588 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d006      	beq.n	80005a8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <RCC_APB1PeriphClockCmd+0x3c>)
 800059c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800059e:	4909      	ldr	r1, [pc, #36]	; (80005c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80005a6:	e006      	b.n	80005b6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80005aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4904      	ldr	r1, [pc, #16]	; (80005c4 <RCC_APB1PeriphClockCmd+0x3c>)
 80005b2:	4013      	ands	r3, r2
 80005b4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800

080005c8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80005d4:	78fb      	ldrb	r3, [r7, #3]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d006      	beq.n	80005e8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <RCC_APB2PeriphClockCmd+0x3c>)
 80005dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005de:	4909      	ldr	r1, [pc, #36]	; (8000604 <RCC_APB2PeriphClockCmd+0x3c>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80005e6:	e006      	b.n	80005f6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <RCC_APB2PeriphClockCmd+0x3c>)
 80005ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	43db      	mvns	r3, r3
 80005f0:	4904      	ldr	r1, [pc, #16]	; (8000604 <RCC_APB2PeriphClockCmd+0x3c>)
 80005f2:	4013      	ands	r3, r2
 80005f4:	644b      	str	r3, [r1, #68]	; 0x44
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800

08000608 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000612:	2300      	movs	r3, #0
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	8a1b      	ldrh	r3, [r3, #16]
 8000626:	b29b      	uxth	r3, r3
 8000628:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	88db      	ldrh	r3, [r3, #6]
 8000636:	461a      	mov	r2, r3
 8000638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063a:	4313      	orrs	r3, r2
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000640:	b29a      	uxth	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	899b      	ldrh	r3, [r3, #12]
 800064a:	b29b      	uxth	r3, r3
 800064c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000654:	f023 030c 	bic.w	r3, r3, #12
 8000658:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	889a      	ldrh	r2, [r3, #4]
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	891b      	ldrh	r3, [r3, #8]
 8000662:	4313      	orrs	r3, r2
 8000664:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800066a:	4313      	orrs	r3, r2
 800066c:	b29b      	uxth	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000672:	4313      	orrs	r3, r2
 8000674:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	8a9b      	ldrh	r3, [r3, #20]
 8000682:	b29b      	uxth	r3, r3
 8000684:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800068c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	899b      	ldrh	r3, [r3, #12]
 8000692:	461a      	mov	r2, r3
 8000694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000696:	4313      	orrs	r3, r2
 8000698:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	b29a      	uxth	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff fea6 	bl	80003f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a30      	ldr	r2, [pc, #192]	; (8000770 <USART_Init+0x168>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d003      	beq.n	80006bc <USART_Init+0xb4>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a2f      	ldr	r2, [pc, #188]	; (8000774 <USART_Init+0x16c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d102      	bne.n	80006c2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	623b      	str	r3, [r7, #32]
 80006c0:	e001      	b.n	80006c6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	899b      	ldrh	r3, [r3, #12]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	da0c      	bge.n	80006ec <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80006d2:	6a3a      	ldr	r2, [r7, #32]
 80006d4:	4613      	mov	r3, r2
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	009a      	lsls	r2, r3, #2
 80006dc:	441a      	add	r2, r3
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e8:	61fb      	str	r3, [r7, #28]
 80006ea:	e00b      	b.n	8000704 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80006ec:	6a3a      	ldr	r2, [r7, #32]
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	009a      	lsls	r2, r3, #2
 80006f6:	441a      	add	r2, r3
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <USART_Init+0x170>)
 8000708:	fba2 2303 	umull	r2, r3, r2, r3
 800070c:	095b      	lsrs	r3, r3, #5
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	2264      	movs	r2, #100	; 0x64
 8000718:	fb02 f303 	mul.w	r3, r2, r3
 800071c:	69fa      	ldr	r2, [r7, #28]
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	899b      	ldrh	r3, [r3, #12]
 8000726:	b29b      	uxth	r3, r3
 8000728:	b21b      	sxth	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	da0c      	bge.n	8000748 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	3332      	adds	r3, #50	; 0x32
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <USART_Init+0x170>)
 8000736:	fba2 2303 	umull	r2, r3, r2, r3
 800073a:	095b      	lsrs	r3, r3, #5
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000742:	4313      	orrs	r3, r2
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
 8000746:	e00b      	b.n	8000760 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	3332      	adds	r3, #50	; 0x32
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <USART_Init+0x170>)
 8000750:	fba2 2303 	umull	r2, r3, r2, r3
 8000754:	095b      	lsrs	r3, r3, #5
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800075c:	4313      	orrs	r3, r2
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	811a      	strh	r2, [r3, #8]
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40011000 	.word	0x40011000
 8000774:	40011400 	.word	0x40011400
 8000778:	51eb851f 	.word	0x51eb851f

0800077c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d008      	beq.n	80007a0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	899b      	ldrh	r3, [r3, #12]
 8000792:	b29b      	uxth	r3, r3
 8000794:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800079e:	e007      	b.n	80007b0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	899b      	ldrh	r3, [r3, #12]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	819a      	strh	r2, [r3, #12]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80007c8:	887b      	ldrh	r3, [r7, #2]
 80007ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	809a      	strh	r2, [r3, #4]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	887b      	ldrh	r3, [r7, #2]
 80007f8:	4013      	ands	r3, r2
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000800:	2301      	movs	r3, #1
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	e001      	b.n	800080a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_write>:
#include "glesk_uart.h"

int _write(int fd, char *str, int len)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
	int ret;

	if (fd != 1) return -1;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d002      	beq.n	8000830 <_write+0x18>
 800082a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082e:	e018      	b.n	8000862 <_write+0x4a>

	ret = uart_init(PRINTF_UART_NUM, PRINTF_UART_SPEED);
 8000830:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000834:	2003      	movs	r0, #3
 8000836:	f000 f85d 	bl	80008f4 <uart_init>
 800083a:	6178      	str	r0, [r7, #20]
	if (ret < 0) return -1;
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	2b00      	cmp	r3, #0
 8000840:	da02      	bge.n	8000848 <_write+0x30>
 8000842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000846:	e00c      	b.n	8000862 <_write+0x4a>

	ret = uart_write(PRINTF_UART_NUM, str, len);
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	68b9      	ldr	r1, [r7, #8]
 800084c:	2003      	movs	r0, #3
 800084e:	f000 f9b7 	bl	8000bc0 <uart_write>
 8000852:	6178      	str	r0, [r7, #20]
	if (ret < 0) return -1;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	da02      	bge.n	8000860 <_write+0x48>
 800085a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800085e:	e000      	b.n	8000862 <_write+0x4a>

	return len;
 8000860:	687b      	ldr	r3, [r7, #4]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <uart_get_base>:
	uint8_t speed;
	void *base;
} uart[GLESK_UART_MAX_NUM];

static void * __attribute__((unused)) uart_get_base(uint8_t uart_num)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	switch (uart_num){
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	3b01      	subs	r3, #1
 800087a:	2b07      	cmp	r3, #7
 800087c:	d822      	bhi.n	80008c4 <uart_get_base+0x58>
 800087e:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <uart_get_base+0x18>)
 8000880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000884:	080008a5 	.word	0x080008a5
 8000888:	080008a9 	.word	0x080008a9
 800088c:	080008ad 	.word	0x080008ad
 8000890:	080008b1 	.word	0x080008b1
 8000894:	080008b5 	.word	0x080008b5
 8000898:	080008b9 	.word	0x080008b9
 800089c:	080008bd 	.word	0x080008bd
 80008a0:	080008c1 	.word	0x080008c1
	case 1:
		return USART1;
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <uart_get_base+0x68>)
 80008a6:	e00e      	b.n	80008c6 <uart_get_base+0x5a>
	case 2:
		return USART2;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <uart_get_base+0x6c>)
 80008aa:	e00c      	b.n	80008c6 <uart_get_base+0x5a>
	case 3:
		return USART3;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <uart_get_base+0x70>)
 80008ae:	e00a      	b.n	80008c6 <uart_get_base+0x5a>
	case 4:
		return UART4;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <uart_get_base+0x74>)
 80008b2:	e008      	b.n	80008c6 <uart_get_base+0x5a>
	case 5:
		return UART5;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <uart_get_base+0x78>)
 80008b6:	e006      	b.n	80008c6 <uart_get_base+0x5a>
	case 6:
		return USART6;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <uart_get_base+0x7c>)
 80008ba:	e004      	b.n	80008c6 <uart_get_base+0x5a>
	case 7:
		return UART7;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <uart_get_base+0x80>)
 80008be:	e002      	b.n	80008c6 <uart_get_base+0x5a>
	case 8:
		return UART8;
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <uart_get_base+0x84>)
 80008c2:	e000      	b.n	80008c6 <uart_get_base+0x5a>
	default:
		return 0;
 80008c4:	2300      	movs	r3, #0
	}
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40011000 	.word	0x40011000
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40004800 	.word	0x40004800
 80008e0:	40004c00 	.word	0x40004c00
 80008e4:	40005000 	.word	0x40005000
 80008e8:	40011400 	.word	0x40011400
 80008ec:	40007800 	.word	0x40007800
 80008f0:	40007c00 	.word	0x40007c00

080008f4 <uart_init>:

int uart_init(uint8_t uart_num, uint32_t speed)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef uart_gpio_init;
	USART_InitTypeDef uart_init;

	void *uart_base;

	if (uart_num > 8) return -1;
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b08      	cmp	r3, #8
 8000904:	d902      	bls.n	800090c <uart_init+0x18>
 8000906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800090a:	e14b      	b.n	8000ba4 <uart_init+0x2b0>
	if (uart[uart_num].init) return 0;
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4aa7      	ldr	r2, [pc, #668]	; (8000bac <uart_init+0x2b8>)
 8000910:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <uart_init+0x28>
 8000918:	2300      	movs	r3, #0
 800091a:	e143      	b.n	8000ba4 <uart_init+0x2b0>

	uart_gpio_init.GPIO_Mode = GPIO_Mode_AF;
 800091c:	2302      	movs	r3, #2
 800091e:	f887 3020 	strb.w	r3, [r7, #32]
	uart_gpio_init.GPIO_OType = GPIO_OType_PP;
 8000922:	2300      	movs	r3, #0
 8000924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uart_gpio_init.GPIO_PuPd = GPIO_PuPd_UP;
 8000928:	2301      	movs	r3, #1
 800092a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uart_gpio_init.GPIO_Speed = GPIO_Speed_100MHz;
 800092e:	2303      	movs	r3, #3
 8000930:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	uart_init.USART_WordLength = USART_WordLength_8b;
 8000934:	2300      	movs	r3, #0
 8000936:	823b      	strh	r3, [r7, #16]
	uart_init.USART_StopBits = USART_StopBits_1;
 8000938:	2300      	movs	r3, #0
 800093a:	827b      	strh	r3, [r7, #18]
	uart_init.USART_Parity = USART_Parity_No;
 800093c:	2300      	movs	r3, #0
 800093e:	82bb      	strh	r3, [r7, #20]
	uart_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000940:	2300      	movs	r3, #0
 8000942:	833b      	strh	r3, [r7, #24]
	uart_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000944:	230c      	movs	r3, #12
 8000946:	82fb      	strh	r3, [r7, #22]

	switch (uart_num) {
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	3b01      	subs	r3, #1
 800094c:	2b07      	cmp	r3, #7
 800094e:	f200 8101 	bhi.w	8000b54 <uart_init+0x260>
 8000952:	a201      	add	r2, pc, #4	; (adr r2, 8000958 <uart_init+0x64>)
 8000954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000958:	08000979 	.word	0x08000979
 800095c:	080009b1 	.word	0x080009b1
 8000960:	080009e9 	.word	0x080009e9
 8000964:	08000a23 	.word	0x08000a23
 8000968:	08000a5b 	.word	0x08000a5b
 800096c:	08000aad 	.word	0x08000aad
 8000970:	08000ae3 	.word	0x08000ae3
 8000974:	08000b1d 	.word	0x08000b1d
	case 1:
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000978:	2101      	movs	r1, #1
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff fde4 	bl	8000548 <RCC_AHB1PeriphClockCmd>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000980:	2101      	movs	r1, #1
 8000982:	2010      	movs	r0, #16
 8000984:	f7ff fe20 	bl	80005c8 <RCC_APB2PeriphClockCmd>

		GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
 8000988:	2207      	movs	r2, #7
 800098a:	2109      	movs	r1, #9
 800098c:	4888      	ldr	r0, [pc, #544]	; (8000bb0 <uart_init+0x2bc>)
 800098e:	f7ff fce9 	bl	8000364 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 8000992:	2207      	movs	r2, #7
 8000994:	210a      	movs	r1, #10
 8000996:	4886      	ldr	r0, [pc, #536]	; (8000bb0 <uart_init+0x2bc>)
 8000998:	f7ff fce4 	bl	8000364 <GPIO_PinAFConfig>

		uart_gpio_init.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 800099c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009a0:	61fb      	str	r3, [r7, #28]
		GPIO_Init(GPIOA, &uart_gpio_init);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4881      	ldr	r0, [pc, #516]	; (8000bb0 <uart_init+0x2bc>)
 80009aa:	f7ff fc15 	bl	80001d8 <GPIO_Init>
		break;
 80009ae:	e0d4      	b.n	8000b5a <uart_init+0x266>
	case 2:
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80009b0:	2101      	movs	r1, #1
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff fdc8 	bl	8000548 <RCC_AHB1PeriphClockCmd>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80009b8:	2101      	movs	r1, #1
 80009ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80009be:	f7ff fde3 	bl	8000588 <RCC_APB1PeriphClockCmd>

		GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 80009c2:	2207      	movs	r2, #7
 80009c4:	2102      	movs	r1, #2
 80009c6:	487a      	ldr	r0, [pc, #488]	; (8000bb0 <uart_init+0x2bc>)
 80009c8:	f7ff fccc 	bl	8000364 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 80009cc:	2207      	movs	r2, #7
 80009ce:	2103      	movs	r1, #3
 80009d0:	4877      	ldr	r0, [pc, #476]	; (8000bb0 <uart_init+0x2bc>)
 80009d2:	f7ff fcc7 	bl	8000364 <GPIO_PinAFConfig>

		uart_gpio_init.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80009d6:	230c      	movs	r3, #12
 80009d8:	61fb      	str	r3, [r7, #28]
		GPIO_Init(GPIOA, &uart_gpio_init);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4873      	ldr	r0, [pc, #460]	; (8000bb0 <uart_init+0x2bc>)
 80009e2:	f7ff fbf9 	bl	80001d8 <GPIO_Init>
		break;
 80009e6:	e0b8      	b.n	8000b5a <uart_init+0x266>
	case 3:
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80009e8:	2101      	movs	r1, #1
 80009ea:	2008      	movs	r0, #8
 80009ec:	f7ff fdac 	bl	8000548 <RCC_AHB1PeriphClockCmd>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 80009f0:	2101      	movs	r1, #1
 80009f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80009f6:	f7ff fdc7 	bl	8000588 <RCC_APB1PeriphClockCmd>

		GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3);
 80009fa:	2207      	movs	r2, #7
 80009fc:	2108      	movs	r1, #8
 80009fe:	486d      	ldr	r0, [pc, #436]	; (8000bb4 <uart_init+0x2c0>)
 8000a00:	f7ff fcb0 	bl	8000364 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);
 8000a04:	2207      	movs	r2, #7
 8000a06:	2109      	movs	r1, #9
 8000a08:	486a      	ldr	r0, [pc, #424]	; (8000bb4 <uart_init+0x2c0>)
 8000a0a:	f7ff fcab 	bl	8000364 <GPIO_PinAFConfig>

		uart_gpio_init.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8000a0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a12:	61fb      	str	r3, [r7, #28]
		GPIO_Init(GPIOD, &uart_gpio_init);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4866      	ldr	r0, [pc, #408]	; (8000bb4 <uart_init+0x2c0>)
 8000a1c:	f7ff fbdc 	bl	80001d8 <GPIO_Init>
		break;
 8000a20:	e09b      	b.n	8000b5a <uart_init+0x266>
	case 4:
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000a22:	2101      	movs	r1, #1
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fd8f 	bl	8000548 <RCC_AHB1PeriphClockCmd>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000a30:	f7ff fdaa 	bl	8000588 <RCC_APB1PeriphClockCmd>

		GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_UART4);
 8000a34:	2208      	movs	r2, #8
 8000a36:	2100      	movs	r1, #0
 8000a38:	485d      	ldr	r0, [pc, #372]	; (8000bb0 <uart_init+0x2bc>)
 8000a3a:	f7ff fc93 	bl	8000364 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_UART4);
 8000a3e:	2208      	movs	r2, #8
 8000a40:	2101      	movs	r1, #1
 8000a42:	485b      	ldr	r0, [pc, #364]	; (8000bb0 <uart_init+0x2bc>)
 8000a44:	f7ff fc8e 	bl	8000364 <GPIO_PinAFConfig>

		uart_gpio_init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	61fb      	str	r3, [r7, #28]
		GPIO_Init(GPIOA, &uart_gpio_init);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4857      	ldr	r0, [pc, #348]	; (8000bb0 <uart_init+0x2bc>)
 8000a54:	f7ff fbc0 	bl	80001d8 <GPIO_Init>
		break;
 8000a58:	e07f      	b.n	8000b5a <uart_init+0x266>
	case 5:
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2004      	movs	r0, #4
 8000a5e:	f7ff fd73 	bl	8000548 <RCC_AHB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000a62:	2101      	movs	r1, #1
 8000a64:	2008      	movs	r0, #8
 8000a66:	f7ff fd6f 	bl	8000548 <RCC_AHB1PeriphClockCmd>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a70:	f7ff fd8a 	bl	8000588 <RCC_APB1PeriphClockCmd>

		GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_UART5);
 8000a74:	2208      	movs	r2, #8
 8000a76:	2102      	movs	r1, #2
 8000a78:	484e      	ldr	r0, [pc, #312]	; (8000bb4 <uart_init+0x2c0>)
 8000a7a:	f7ff fc73 	bl	8000364 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_UART5);
 8000a7e:	2208      	movs	r2, #8
 8000a80:	210c      	movs	r1, #12
 8000a82:	484d      	ldr	r0, [pc, #308]	; (8000bb8 <uart_init+0x2c4>)
 8000a84:	f7ff fc6e 	bl	8000364 <GPIO_PinAFConfig>

		uart_gpio_init.GPIO_Pin = GPIO_Pin_2;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	61fb      	str	r3, [r7, #28]
		GPIO_Init(GPIOD, &uart_gpio_init);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4848      	ldr	r0, [pc, #288]	; (8000bb4 <uart_init+0x2c0>)
 8000a94:	f7ff fba0 	bl	80001d8 <GPIO_Init>
		uart_gpio_init.GPIO_Pin = GPIO_Pin_12;
 8000a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9c:	61fb      	str	r3, [r7, #28]
		GPIO_Init(GPIOC, &uart_gpio_init);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4844      	ldr	r0, [pc, #272]	; (8000bb8 <uart_init+0x2c4>)
 8000aa6:	f7ff fb97 	bl	80001d8 <GPIO_Init>
		break;
 8000aaa:	e056      	b.n	8000b5a <uart_init+0x266>
	case 6:
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000aac:	2101      	movs	r1, #1
 8000aae:	2004      	movs	r0, #4
 8000ab0:	f7ff fd4a 	bl	8000548 <RCC_AHB1PeriphClockCmd>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2020      	movs	r0, #32
 8000ab8:	f7ff fd86 	bl	80005c8 <RCC_APB2PeriphClockCmd>

		GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6);
 8000abc:	2208      	movs	r2, #8
 8000abe:	2106      	movs	r1, #6
 8000ac0:	483d      	ldr	r0, [pc, #244]	; (8000bb8 <uart_init+0x2c4>)
 8000ac2:	f7ff fc4f 	bl	8000364 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
 8000ac6:	2208      	movs	r2, #8
 8000ac8:	2107      	movs	r1, #7
 8000aca:	483b      	ldr	r0, [pc, #236]	; (8000bb8 <uart_init+0x2c4>)
 8000acc:	f7ff fc4a 	bl	8000364 <GPIO_PinAFConfig>

		uart_gpio_init.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000ad0:	23c0      	movs	r3, #192	; 0xc0
 8000ad2:	61fb      	str	r3, [r7, #28]
		GPIO_Init(GPIOA, &uart_gpio_init);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4835      	ldr	r0, [pc, #212]	; (8000bb0 <uart_init+0x2bc>)
 8000adc:	f7ff fb7c 	bl	80001d8 <GPIO_Init>
		break;
 8000ae0:	e03b      	b.n	8000b5a <uart_init+0x266>
	case 7:
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2010      	movs	r0, #16
 8000ae6:	f7ff fd2f 	bl	8000548 <RCC_AHB1PeriphClockCmd>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART7, ENABLE);
 8000aea:	2101      	movs	r1, #1
 8000aec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000af0:	f7ff fd4a 	bl	8000588 <RCC_APB1PeriphClockCmd>

		GPIO_PinAFConfig(GPIOE, GPIO_PinSource7, GPIO_AF_UART7);
 8000af4:	2208      	movs	r2, #8
 8000af6:	2107      	movs	r1, #7
 8000af8:	4830      	ldr	r0, [pc, #192]	; (8000bbc <uart_init+0x2c8>)
 8000afa:	f7ff fc33 	bl	8000364 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOE, GPIO_PinSource8, GPIO_AF_UART7);
 8000afe:	2208      	movs	r2, #8
 8000b00:	2108      	movs	r1, #8
 8000b02:	482e      	ldr	r0, [pc, #184]	; (8000bbc <uart_init+0x2c8>)
 8000b04:	f7ff fc2e 	bl	8000364 <GPIO_PinAFConfig>

		uart_gpio_init.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8;
 8000b08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b0c:	61fb      	str	r3, [r7, #28]
		GPIO_Init(GPIOA, &uart_gpio_init);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4826      	ldr	r0, [pc, #152]	; (8000bb0 <uart_init+0x2bc>)
 8000b16:	f7ff fb5f 	bl	80001d8 <GPIO_Init>
		break;
 8000b1a:	e01e      	b.n	8000b5a <uart_init+0x266>
	case 8:
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	2010      	movs	r0, #16
 8000b20:	f7ff fd12 	bl	8000548 <RCC_AHB1PeriphClockCmd>
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART8, ENABLE);
 8000b24:	2101      	movs	r1, #1
 8000b26:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000b2a:	f7ff fd2d 	bl	8000588 <RCC_APB1PeriphClockCmd>

		GPIO_PinAFConfig(GPIOE, GPIO_PinSource0, GPIO_AF_UART8);
 8000b2e:	2208      	movs	r2, #8
 8000b30:	2100      	movs	r1, #0
 8000b32:	4822      	ldr	r0, [pc, #136]	; (8000bbc <uart_init+0x2c8>)
 8000b34:	f7ff fc16 	bl	8000364 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOE, GPIO_PinSource1, GPIO_AF_UART8);
 8000b38:	2208      	movs	r2, #8
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	481f      	ldr	r0, [pc, #124]	; (8000bbc <uart_init+0x2c8>)
 8000b3e:	f7ff fc11 	bl	8000364 <GPIO_PinAFConfig>

		uart_gpio_init.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8000b42:	2303      	movs	r3, #3
 8000b44:	61fb      	str	r3, [r7, #28]
		GPIO_Init(GPIOA, &uart_gpio_init);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4818      	ldr	r0, [pc, #96]	; (8000bb0 <uart_init+0x2bc>)
 8000b4e:	f7ff fb43 	bl	80001d8 <GPIO_Init>
		break;
 8000b52:	e002      	b.n	8000b5a <uart_init+0x266>
	default:
		return -1;
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b58:	e024      	b.n	8000ba4 <uart_init+0x2b0>
	}

	// Init USART
	uart_base = uart_get_base(uart_num);
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fe85 	bl	800086c <uart_get_base>
 8000b62:	6278      	str	r0, [r7, #36]	; 0x24
	uart_init.USART_BaudRate = speed;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	60fb      	str	r3, [r7, #12]

	USART_Init(uart_base, &uart_init);
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b70:	f7ff fd4a 	bl	8000608 <USART_Init>
	USART_Cmd(uart_base, ENABLE);
 8000b74:	2101      	movs	r1, #1
 8000b76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b78:	f7ff fe00 	bl	800077c <USART_Cmd>

	// Save config
	uart[uart_num].init = 1;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <uart_init+0x2b8>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	uart[uart_num].speed = speed;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	b2d1      	uxtb	r1, r2
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <uart_init+0x2b8>)
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4413      	add	r3, r2
 8000b92:	460a      	mov	r2, r1
 8000b94:	705a      	strb	r2, [r3, #1]
	uart[uart_num].base = uart_base;
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <uart_init+0x2b8>)
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba0:	605a      	str	r2, [r3, #4]

	return 0;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000002c 	.word	0x2000002c
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40020c00 	.word	0x40020c00
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <uart_write>:

	return len;
}

int uart_write(uint8_t uart_num, const char *str, ssize_t len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	73fb      	strb	r3, [r7, #15]
	ssize_t bytes_to_read = len;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	617b      	str	r3, [r7, #20]

	while (bytes_to_read) {
 8000bd2:	e021      	b.n	8000c18 <uart_write+0x58>
		if (str == NULL) return 0;
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <uart_write+0x1e>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e020      	b.n	8000c20 <uart_write+0x60>

		while (USART_GetFlagStatus(uart[uart_num].base, USART_FLAG_TC) == RESET);
 8000bde:	bf00      	nop
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <uart_write+0x68>)
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4413      	add	r3, r2
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fdf7 	bl	80007e0 <USART_GetFlagStatus>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f3      	beq.n	8000be0 <uart_write+0x20>
		USART_SendData(uart[uart_num].base, *str++);
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <uart_write+0x68>)
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	4413      	add	r3, r2
 8000c00:	6858      	ldr	r0, [r3, #4]
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	60ba      	str	r2, [r7, #8]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f7ff fdd5 	bl	80007bc <USART_SendData>

		--bytes_to_read;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
	while (bytes_to_read) {
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1da      	bne.n	8000bd4 <uart_write+0x14>
	}

	return len;
 8000c1e:	687b      	ldr	r3, [r7, #4]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000002c 	.word	0x2000002c

08000c2c <Display_Init>:
#include "DISPLAY_WH1602B_4Bit.h"
//#include <stdio.h>

static char empty_field[] = "                                ";
void Display_Init()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	delay_milis(40);
 8000c30:	2028      	movs	r0, #40	; 0x28
 8000c32:	f000 f9f5 	bl	8001020 <delay_milis>

	Display_Write_Ins(0x02); 	//as per documentation set 4-bit mode
 8000c36:	2002      	movs	r0, #2
 8000c38:	f000 f81e 	bl	8000c78 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f000 f9ef 	bl	8001020 <delay_milis>

//	Display_Write_Ins(0x28);
	Display_Write_Ins(TWO_LINE_MODE);
 8000c42:	2028      	movs	r0, #40	; 0x28
 8000c44:	f000 f818 	bl	8000c78 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000c48:	200a      	movs	r0, #10
 8000c4a:	f000 f9e9 	bl	8001020 <delay_milis>

//	Display_Write_Ins(0x0F);
	Display_Write_Ins(DISPLAY_ON | CURSOR_OFF | CURSOR_BLINK_OFF);
 8000c4e:	200c      	movs	r0, #12
 8000c50:	f000 f812 	bl	8000c78 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000c54:	200a      	movs	r0, #10
 8000c56:	f000 f9e3 	bl	8001020 <delay_milis>

//	Display_Write_Ins(0x01);
	Display_Write_Ins(DISPLAY_CLEAR);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 f80c 	bl	8000c78 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000c60:	200a      	movs	r0, #10
 8000c62:	f000 f9dd 	bl	8001020 <delay_milis>

//	Display_Write_Ins(0x06);
	Display_Write_Ins(INCREMENT_MODE | ENTIRE_SHIFT_OFF);
 8000c66:	2006      	movs	r0, #6
 8000c68:	f000 f806 	bl	8000c78 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f000 f9d7 	bl	8001020 <delay_milis>

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <Display_Write_Ins>:

void Display_Write_Ins(char instruction)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RS);
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	484a      	ldr	r0, [pc, #296]	; (8000db0 <Display_Write_Ins+0x138>)
 8000c86:	f7ff fb5e 	bl	8000346 <GPIO_ResetBits>
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RW);
 8000c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8e:	4848      	ldr	r0, [pc, #288]	; (8000db0 <Display_Write_Ins+0x138>)
 8000c90:	f7ff fb59 	bl	8000346 <GPIO_ResetBits>

	instruction & DISPLAY_BIT_7_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	da05      	bge.n	8000ca8 <Display_Write_Ins+0x30>
 8000c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca0:	4843      	ldr	r0, [pc, #268]	; (8000db0 <Display_Write_Ins+0x138>)
 8000ca2:	f7ff fb41 	bl	8000328 <GPIO_SetBits>
 8000ca6:	e004      	b.n	8000cb2 <Display_Write_Ins+0x3a>
 8000ca8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cac:	4840      	ldr	r0, [pc, #256]	; (8000db0 <Display_Write_Ins+0x138>)
 8000cae:	f7ff fb4a 	bl	8000346 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_6_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d005      	beq.n	8000cc8 <Display_Write_Ins+0x50>
 8000cbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc0:	483b      	ldr	r0, [pc, #236]	; (8000db0 <Display_Write_Ins+0x138>)
 8000cc2:	f7ff fb31 	bl	8000328 <GPIO_SetBits>
 8000cc6:	e004      	b.n	8000cd2 <Display_Write_Ins+0x5a>
 8000cc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ccc:	4838      	ldr	r0, [pc, #224]	; (8000db0 <Display_Write_Ins+0x138>)
 8000cce:	f7ff fb3a 	bl	8000346 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_5_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 0320 	and.w	r3, r3, #32
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d005      	beq.n	8000ce8 <Display_Write_Ins+0x70>
 8000cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce0:	4833      	ldr	r0, [pc, #204]	; (8000db0 <Display_Write_Ins+0x138>)
 8000ce2:	f7ff fb21 	bl	8000328 <GPIO_SetBits>
 8000ce6:	e004      	b.n	8000cf2 <Display_Write_Ins+0x7a>
 8000ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cec:	4830      	ldr	r0, [pc, #192]	; (8000db0 <Display_Write_Ins+0x138>)
 8000cee:	f7ff fb2a 	bl	8000346 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_4_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d005      	beq.n	8000d08 <Display_Write_Ins+0x90>
 8000cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d00:	482b      	ldr	r0, [pc, #172]	; (8000db0 <Display_Write_Ins+0x138>)
 8000d02:	f7ff fb11 	bl	8000328 <GPIO_SetBits>
 8000d06:	e004      	b.n	8000d12 <Display_Write_Ins+0x9a>
 8000d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0c:	4828      	ldr	r0, [pc, #160]	; (8000db0 <Display_Write_Ins+0x138>)
 8000d0e:	f7ff fb1a 	bl	8000346 <GPIO_ResetBits>

	Display_RW_pusle();
 8000d12:	f000 f939 	bl	8000f88 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8000d16:	200a      	movs	r0, #10
 8000d18:	f000 f982 	bl	8001020 <delay_milis>

	instruction & DISPLAY_BIT_3_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <Display_Write_Ins+0xba>
 8000d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2a:	4821      	ldr	r0, [pc, #132]	; (8000db0 <Display_Write_Ins+0x138>)
 8000d2c:	f7ff fafc 	bl	8000328 <GPIO_SetBits>
 8000d30:	e004      	b.n	8000d3c <Display_Write_Ins+0xc4>
 8000d32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d36:	481e      	ldr	r0, [pc, #120]	; (8000db0 <Display_Write_Ins+0x138>)
 8000d38:	f7ff fb05 	bl	8000346 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_2_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d005      	beq.n	8000d52 <Display_Write_Ins+0xda>
 8000d46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4a:	4819      	ldr	r0, [pc, #100]	; (8000db0 <Display_Write_Ins+0x138>)
 8000d4c:	f7ff faec 	bl	8000328 <GPIO_SetBits>
 8000d50:	e004      	b.n	8000d5c <Display_Write_Ins+0xe4>
 8000d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d56:	4816      	ldr	r0, [pc, #88]	; (8000db0 <Display_Write_Ins+0x138>)
 8000d58:	f7ff faf5 	bl	8000346 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_1_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d005      	beq.n	8000d72 <Display_Write_Ins+0xfa>
 8000d66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6a:	4811      	ldr	r0, [pc, #68]	; (8000db0 <Display_Write_Ins+0x138>)
 8000d6c:	f7ff fadc 	bl	8000328 <GPIO_SetBits>
 8000d70:	e004      	b.n	8000d7c <Display_Write_Ins+0x104>
 8000d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d76:	480e      	ldr	r0, [pc, #56]	; (8000db0 <Display_Write_Ins+0x138>)
 8000d78:	f7ff fae5 	bl	8000346 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_0_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d005      	beq.n	8000d92 <Display_Write_Ins+0x11a>
 8000d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8a:	4809      	ldr	r0, [pc, #36]	; (8000db0 <Display_Write_Ins+0x138>)
 8000d8c:	f7ff facc 	bl	8000328 <GPIO_SetBits>
 8000d90:	e004      	b.n	8000d9c <Display_Write_Ins+0x124>
 8000d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <Display_Write_Ins+0x138>)
 8000d98:	f7ff fad5 	bl	8000346 <GPIO_ResetBits>

	Display_RW_pusle();
 8000d9c:	f000 f8f4 	bl	8000f88 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8000da0:	200a      	movs	r0, #10
 8000da2:	f000 f93d 	bl	8001020 <delay_milis>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <Display_Write_Data>:

void Display_Write_Data(char data)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	GPIO_SetBits(DISPLAY_PORT, DISPLAY_RS);
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	484a      	ldr	r0, [pc, #296]	; (8000eec <Display_Write_Data+0x138>)
 8000dc2:	f7ff fab1 	bl	8000328 <GPIO_SetBits>
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RW);
 8000dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dca:	4848      	ldr	r0, [pc, #288]	; (8000eec <Display_Write_Data+0x138>)
 8000dcc:	f7ff fabb 	bl	8000346 <GPIO_ResetBits>

	data & DISPLAY_BIT_7_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	da05      	bge.n	8000de4 <Display_Write_Data+0x30>
 8000dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ddc:	4843      	ldr	r0, [pc, #268]	; (8000eec <Display_Write_Data+0x138>)
 8000dde:	f7ff faa3 	bl	8000328 <GPIO_SetBits>
 8000de2:	e004      	b.n	8000dee <Display_Write_Data+0x3a>
 8000de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de8:	4840      	ldr	r0, [pc, #256]	; (8000eec <Display_Write_Data+0x138>)
 8000dea:	f7ff faac 	bl	8000346 <GPIO_ResetBits>
	data & DISPLAY_BIT_6_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <Display_Write_Data+0x50>
 8000df8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfc:	483b      	ldr	r0, [pc, #236]	; (8000eec <Display_Write_Data+0x138>)
 8000dfe:	f7ff fa93 	bl	8000328 <GPIO_SetBits>
 8000e02:	e004      	b.n	8000e0e <Display_Write_Data+0x5a>
 8000e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e08:	4838      	ldr	r0, [pc, #224]	; (8000eec <Display_Write_Data+0x138>)
 8000e0a:	f7ff fa9c 	bl	8000346 <GPIO_ResetBits>
	data & DISPLAY_BIT_5_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 0320 	and.w	r3, r3, #32
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d005      	beq.n	8000e24 <Display_Write_Data+0x70>
 8000e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1c:	4833      	ldr	r0, [pc, #204]	; (8000eec <Display_Write_Data+0x138>)
 8000e1e:	f7ff fa83 	bl	8000328 <GPIO_SetBits>
 8000e22:	e004      	b.n	8000e2e <Display_Write_Data+0x7a>
 8000e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e28:	4830      	ldr	r0, [pc, #192]	; (8000eec <Display_Write_Data+0x138>)
 8000e2a:	f7ff fa8c 	bl	8000346 <GPIO_ResetBits>
	data & DISPLAY_BIT_4_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d005      	beq.n	8000e44 <Display_Write_Data+0x90>
 8000e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3c:	482b      	ldr	r0, [pc, #172]	; (8000eec <Display_Write_Data+0x138>)
 8000e3e:	f7ff fa73 	bl	8000328 <GPIO_SetBits>
 8000e42:	e004      	b.n	8000e4e <Display_Write_Data+0x9a>
 8000e44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e48:	4828      	ldr	r0, [pc, #160]	; (8000eec <Display_Write_Data+0x138>)
 8000e4a:	f7ff fa7c 	bl	8000346 <GPIO_ResetBits>

	Display_RW_pusle();
 8000e4e:	f000 f89b 	bl	8000f88 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8000e52:	200a      	movs	r0, #10
 8000e54:	f000 f8e4 	bl	8001020 <delay_milis>

	data & DISPLAY_BIT_3_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d005      	beq.n	8000e6e <Display_Write_Data+0xba>
 8000e62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e66:	4821      	ldr	r0, [pc, #132]	; (8000eec <Display_Write_Data+0x138>)
 8000e68:	f7ff fa5e 	bl	8000328 <GPIO_SetBits>
 8000e6c:	e004      	b.n	8000e78 <Display_Write_Data+0xc4>
 8000e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e72:	481e      	ldr	r0, [pc, #120]	; (8000eec <Display_Write_Data+0x138>)
 8000e74:	f7ff fa67 	bl	8000346 <GPIO_ResetBits>
	data & DISPLAY_BIT_2_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <Display_Write_Data+0xda>
 8000e82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e86:	4819      	ldr	r0, [pc, #100]	; (8000eec <Display_Write_Data+0x138>)
 8000e88:	f7ff fa4e 	bl	8000328 <GPIO_SetBits>
 8000e8c:	e004      	b.n	8000e98 <Display_Write_Data+0xe4>
 8000e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <Display_Write_Data+0x138>)
 8000e94:	f7ff fa57 	bl	8000346 <GPIO_ResetBits>
	data & DISPLAY_BIT_1_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <Display_Write_Data+0xfa>
 8000ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <Display_Write_Data+0x138>)
 8000ea8:	f7ff fa3e 	bl	8000328 <GPIO_SetBits>
 8000eac:	e004      	b.n	8000eb8 <Display_Write_Data+0x104>
 8000eae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <Display_Write_Data+0x138>)
 8000eb4:	f7ff fa47 	bl	8000346 <GPIO_ResetBits>
	data & DISPLAY_BIT_0_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <Display_Write_Data+0x11a>
 8000ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <Display_Write_Data+0x138>)
 8000ec8:	f7ff fa2e 	bl	8000328 <GPIO_SetBits>
 8000ecc:	e004      	b.n	8000ed8 <Display_Write_Data+0x124>
 8000ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <Display_Write_Data+0x138>)
 8000ed4:	f7ff fa37 	bl	8000346 <GPIO_ResetBits>

	Display_RW_pusle();
 8000ed8:	f000 f856 	bl	8000f88 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8000edc:	200a      	movs	r0, #10
 8000ede:	f000 f89f 	bl	8001020 <delay_milis>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000

08000ef0 <Display_Write_Data_Array>:

void Display_Write_Data_Array(char *data, uint8_t length)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
	if(length > DISPLAY_MAX_CHARACKTERS_COUNT)
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	2b20      	cmp	r3, #32
 8000f00:	d90c      	bls.n	8000f1c <Display_Write_Data_Array+0x2c>
	{
		error_signal(LED_PORT, RED_LED);
 8000f02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <Display_Write_Data_Array+0x44>)
 8000f08:	f000 f864 	bl	8000fd4 <error_signal>
	}
	while(length--)
 8000f0c:	e006      	b.n	8000f1c <Display_Write_Data_Array+0x2c>
	{
		Display_Write_Data(*data++);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff4c 	bl	8000db4 <Display_Write_Data>
	while(length--)
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	1e5a      	subs	r2, r3, #1
 8000f20:	70fa      	strb	r2, [r7, #3]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f3      	bne.n	8000f0e <Display_Write_Data_Array+0x1e>
	}
	delay_milis(DISPLAY_DELAY);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f000 f87a 	bl	8001020 <delay_milis>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020c00 	.word	0x40020c00

08000f38 <Display_init_GPIO>:

void Display_init_GPIO(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	delay_milis(400);
 8000f3e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f42:	f000 f86d 	bl	8001020 <delay_milis>
	setup_clock_for_GPIO(DISPLAY_PORT, ENABLE);
 8000f46:	2101      	movs	r1, #1
 8000f48:	480e      	ldr	r0, [pc, #56]	; (8000f84 <Display_init_GPIO+0x4c>)
 8000f4a:	f000 f881 	bl	8001050 <setup_clock_for_GPIO>
	GPIO_InitTypeDef DISPLAY_GPIO;
	DISPLAY_GPIO.GPIO_Mode = GPIO_Mode_OUT;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	713b      	strb	r3, [r7, #4]
	DISPLAY_GPIO.GPIO_Speed = GPIO_Speed_25MHz;
 8000f52:	2301      	movs	r3, #1
 8000f54:	717b      	strb	r3, [r7, #5]
	DISPLAY_GPIO.GPIO_OType = GPIO_OType_PP;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71bb      	strb	r3, [r7, #6]
	DISPLAY_GPIO.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]

	DISPLAY_GPIO.GPIO_Pin = DISPLAY_RS |  DISPLAY_RW | DISPLAY_ENA | DISPLAY_DB7 | DISPLAY_DB6 | DISPLAY_DB5 | DISPLAY_DB4;
 8000f5e:	f64f 4380 	movw	r3, #64640	; 0xfc80
 8000f62:	603b      	str	r3, [r7, #0]
	GPIO_Init(DISPLAY_PORT, &DISPLAY_GPIO);
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <Display_init_GPIO+0x4c>)
 8000f6a:	f7ff f935 	bl	80001d8 <GPIO_Init>
	GPIO_SetBits(DISPLAY_PORT, DISPLAY_GPIO.GPIO_Pin);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <Display_init_GPIO+0x4c>)
 8000f76:	f7ff f9d7 	bl	8000328 <GPIO_SetBits>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <Display_RW_pusle>:

//pulse
void Display_RW_pusle(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    GPIO_SetBits(DISPLAY_PORT, DISPLAY_ENA);
 8000f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <Display_RW_pusle+0x24>)
 8000f92:	f7ff f9c9 	bl	8000328 <GPIO_SetBits>
    delay_milis(DISPLAY_DELAY);
 8000f96:	200a      	movs	r0, #10
 8000f98:	f000 f842 	bl	8001020 <delay_milis>
    GPIO_ResetBits(DISPLAY_PORT, DISPLAY_ENA);
 8000f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <Display_RW_pusle+0x24>)
 8000fa2:	f7ff f9d0 	bl	8000346 <GPIO_ResetBits>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <Display_clear>:
	}

}

void Display_clear(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	Display_Write_Ins(DISPLAY_CLEAR);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff fe5f 	bl	8000c78 <Display_Write_Ins>
	delay_milis(2);
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f000 f830 	bl	8001020 <delay_milis>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <setup_Display>:
		Display_Write_Data(' ');
	}
}

void setup_Display(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	Display_init_GPIO();
 8000fc8:	f7ff ffb6 	bl	8000f38 <Display_init_GPIO>
	Display_Init();
 8000fcc:	f7ff fe2e 	bl	8000c2c <Display_Init>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <error_signal>:
	GPIO_Init(GPIOx, &gpio_led);
	GPIO_ResetBits(GPIOx, pin_for_LEDx);
}

void error_signal(GPIO_TypeDef* GPIOx, uint16_t pin_for_LEDx)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
	GPIO_SetBits(GPIOx, pin_for_LEDx);
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff f99f 	bl	8000328 <GPIO_SetBits>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <delay_milis1>:
	/*SysTick config*/
}


void delay_milis1(uint32_t milisecond)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	    /* For 1 us delay, we need to divide with 4M */
	    //uint32_t multiplier = RCC_Clocks.HCLK_Frequency / 4000000;

	/* Multiply millis with multipler */
	    /* Substract 10 */
	    milisecond = 1000 * milisecond * multiplier - 10;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001000:	fb02 f303 	mul.w	r3, r2, r3
 8001004:	3b0a      	subs	r3, #10
 8001006:	607b      	str	r3, [r7, #4]
	    /* 4 cycles for one loop */
	    while (milisecond--);
 8001008:	bf00      	nop
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1e5a      	subs	r2, r3, #1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1fa      	bne.n	800100a <delay_milis1+0x18>

}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <delay_milis>:

void delay_milis(uint32_t microsecond)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	    /* For 1 us delay, we need to divide with 4M */
	  //uint32_t  multiplier = RCC_Clocks.HCLK_Frequency / 4000000;

	/* Multiply micros with multipler */
	/* Substract 10 */
	microsecond = microsecond * multiplier - 10;
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	009a      	lsls	r2, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	3b0a      	subs	r3, #10
 8001036:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (microsecond--);
 8001038:	bf00      	nop
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	1e5a      	subs	r2, r3, #1
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1fa      	bne.n	800103a <delay_milis+0x1a>
   /*
	RCC_GetClocksFreq(&RCC_Clocks);
	timing_delay = RCC_Clocks.HCLK_Frequency/1000000 * microsecond;  // originally /10000
	while(timing_delay--);
   */
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <setup_clock_for_GPIO>:

void setup_clock_for_GPIO(GPIO_TypeDef* GPIOx, FunctionalState state)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
	switch ((int)GPIOx) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <setup_clock_for_GPIO+0x7c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d01c      	beq.n	800109e <setup_clock_for_GPIO+0x4e>
 8001064:	4a19      	ldr	r2, [pc, #100]	; (80010cc <setup_clock_for_GPIO+0x7c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	dc06      	bgt.n	8001078 <setup_clock_for_GPIO+0x28>
 800106a:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <setup_clock_for_GPIO+0x80>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d00a      	beq.n	8001086 <setup_clock_for_GPIO+0x36>
 8001070:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <setup_clock_for_GPIO+0x84>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <setup_clock_for_GPIO+0x42>
			break;
		case (int)GPIOE:
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, state); //APB1
			break;
		default:
			break;
 8001076:	e024      	b.n	80010c2 <setup_clock_for_GPIO+0x72>
	switch ((int)GPIOx) {
 8001078:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <setup_clock_for_GPIO+0x88>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d015      	beq.n	80010aa <setup_clock_for_GPIO+0x5a>
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <setup_clock_for_GPIO+0x8c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d018      	beq.n	80010b6 <setup_clock_for_GPIO+0x66>
			break;
 8001084:	e01d      	b.n	80010c2 <setup_clock_for_GPIO+0x72>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, state); //APB1
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	4619      	mov	r1, r3
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff fa5c 	bl	8000548 <RCC_AHB1PeriphClockCmd>
			break;
 8001090:	e017      	b.n	80010c2 <setup_clock_for_GPIO+0x72>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, state); //APB1
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	4619      	mov	r1, r3
 8001096:	2002      	movs	r0, #2
 8001098:	f7ff fa56 	bl	8000548 <RCC_AHB1PeriphClockCmd>
			break;
 800109c:	e011      	b.n	80010c2 <setup_clock_for_GPIO+0x72>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, state); //APB1
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	4619      	mov	r1, r3
 80010a2:	2004      	movs	r0, #4
 80010a4:	f7ff fa50 	bl	8000548 <RCC_AHB1PeriphClockCmd>
			break;
 80010a8:	e00b      	b.n	80010c2 <setup_clock_for_GPIO+0x72>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, state); //APB1
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	4619      	mov	r1, r3
 80010ae:	2008      	movs	r0, #8
 80010b0:	f7ff fa4a 	bl	8000548 <RCC_AHB1PeriphClockCmd>
			break;
 80010b4:	e005      	b.n	80010c2 <setup_clock_for_GPIO+0x72>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, state); //APB1
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	4619      	mov	r1, r3
 80010ba:	2010      	movs	r0, #16
 80010bc:	f7ff fa44 	bl	8000548 <RCC_AHB1PeriphClockCmd>
			break;
 80010c0:	bf00      	nop
	}
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021000 	.word	0x40021000

080010e0 <ex_humid_read>:

	return 0;
}

int ex_humid_read(u8 *humid, u8 *temp,u32 *counter)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
    u32 k=0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
	u8 got_response = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	u8 bit_iter;
	u8 byte_iter;
	u8 data[EX_HUMID_DAT_SZ] = {0};
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	711a      	strb	r2, [r3, #4]

	GPIO_InitTypeDef  ex_humid_gpio_init;

	ex_humid_gpio_init.GPIO_Pin = EX_HUMID_PIN;
 8001100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001104:	613b      	str	r3, [r7, #16]
	ex_humid_gpio_init.GPIO_Mode = GPIO_Mode_OUT;
 8001106:	2301      	movs	r3, #1
 8001108:	753b      	strb	r3, [r7, #20]
	ex_humid_gpio_init.GPIO_OType = GPIO_OType_OD;
 800110a:	2301      	movs	r3, #1
 800110c:	75bb      	strb	r3, [r7, #22]
	ex_humid_gpio_init.GPIO_PuPd  = GPIO_PuPd_UP;
 800110e:	2301      	movs	r3, #1
 8001110:	75fb      	strb	r3, [r7, #23]
	ex_humid_gpio_init.GPIO_Speed = GPIO_Speed_25MHz;  //originally 100MHz
 8001112:	2301      	movs	r3, #1
 8001114:	757b      	strb	r3, [r7, #21]

	RCC_AHB1PeriphClockCmd(EX_HUMID_PCLK, ENABLE);
 8001116:	2101      	movs	r1, #1
 8001118:	2008      	movs	r0, #8
 800111a:	f7ff fa15 	bl	8000548 <RCC_AHB1PeriphClockCmd>
	GPIO_Init(EX_HUMID_PORT, &ex_humid_gpio_init);
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4619      	mov	r1, r3
 8001124:	485b      	ldr	r0, [pc, #364]	; (8001294 <ex_humid_read+0x1b4>)
 8001126:	f7ff f857 	bl	80001d8 <GPIO_Init>

	if (!temp || !humid)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <ex_humid_read+0x56>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <ex_humid_read+0x5c>
		return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800113a:	e0a6      	b.n	800128a <ex_humid_read+0x1aa>

	GPIO_ResetBits(EX_HUMID_PORT, EX_HUMID_PIN);
 800113c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001140:	4854      	ldr	r0, [pc, #336]	; (8001294 <ex_humid_read+0x1b4>)
 8001142:	f7ff f900 	bl	8000346 <GPIO_ResetBits>

	delay_milis(4500);
 8001146:	f241 1094 	movw	r0, #4500	; 0x1194
 800114a:	f7ff ff69 	bl	8001020 <delay_milis>

	//delay_us(18000);	 //20ms
	//GPIO_SetBits(EX_HUMID_PORT, EX_HUMID_PIN);

	// Change mode to input
	EX_HUMID_PORT->MODER &= ~EX_HUMID_MODE;    // due to Pull up R automatically High...
 800114e:	4b51      	ldr	r3, [pc, #324]	; (8001294 <ex_humid_read+0x1b4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a50      	ldr	r2, [pc, #320]	; (8001294 <ex_humid_read+0x1b4>)
 8001154:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001158:	6013      	str	r3, [r2, #0]
	EX_HUMID_PORT->PUPDR &= ~EX_HUMID_PuPd;    // due to Pull up R automatically High...
 800115a:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <ex_humid_read+0x1b4>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	4a4d      	ldr	r2, [pc, #308]	; (8001294 <ex_humid_read+0x1b4>)
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	60d3      	str	r3, [r2, #12]

	//ex_humid_gpio_init.GPIO_Mode = GPIO_Mode_IN;
	//ex_humid_gpio_init.GPIO_PuPd  = GPIO_PuPd_NOPULL;


	delay_milis(10);//delay_us(40);   // 34 wait for 25us
 8001166:	200a      	movs	r0, #10
 8001168:	f7ff ff5a 	bl	8001020 <delay_milis>
	 //if (!(GPIO_ReadInputDataBit(EX_HUMID_PORT, EX_HUMID_PIN)))

	// If low

	if (!(GPIO_ReadInputDataBit(EX_HUMID_PORT, EX_HUMID_PIN)))
 800116c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001170:	4848      	ldr	r0, [pc, #288]	; (8001294 <ex_humid_read+0x1b4>)
 8001172:	f7ff f8bf 	bl	80002f4 <GPIO_ReadInputDataBit>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d116      	bne.n	80011aa <ex_humid_read+0xca>
	{

		delay_milis(21); //delay_us(80);   // wait for 90us
 800117c:	2015      	movs	r0, #21
 800117e:	f7ff ff4f 	bl	8001020 <delay_milis>
		if((GPIO_ReadInputDataBit(EX_HUMID_PORT, EX_HUMID_PIN)))
 8001182:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001186:	4843      	ldr	r0, [pc, #268]	; (8001294 <ex_humid_read+0x1b4>)
 8001188:	f7ff f8b4 	bl	80002f4 <GPIO_ReadInputDataBit>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <ex_humid_read+0xb8>
			got_response=1;
 8001192:	2301      	movs	r3, #1
 8001194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		while ((GPIO_ReadInputDataBit(EX_HUMID_PORT, EX_HUMID_PIN)));  // wait for low...
 8001198:	bf00      	nop
 800119a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800119e:	483d      	ldr	r0, [pc, #244]	; (8001294 <ex_humid_read+0x1b4>)
 80011a0:	f7ff f8a8 	bl	80002f4 <GPIO_ReadInputDataBit>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f7      	bne.n	800119a <ex_humid_read+0xba>
	}

	if (!got_response)
 80011aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <ex_humid_read+0xd8>
		return -1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b6:	e068      	b.n	800128a <ex_humid_read+0x1aa>


	for (byte_iter = 0; byte_iter < 5; ++byte_iter) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80011be:	e059      	b.n	8001274 <ex_humid_read+0x194>
		u8 i=0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		for (bit_iter = 0; bit_iter < 8; bit_iter++) {
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011cc:	e040      	b.n	8001250 <ex_humid_read+0x170>
			// Wait for high
			while (!(GPIO_ReadInputDataBit(EX_HUMID_PORT, EX_HUMID_PIN))); // wait for HIGH
 80011ce:	bf00      	nop
 80011d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d4:	482f      	ldr	r0, [pc, #188]	; (8001294 <ex_humid_read+0x1b4>)
 80011d6:	f7ff f88d 	bl	80002f4 <GPIO_ReadInputDataBit>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f7      	beq.n	80011d0 <ex_humid_read+0xf0>
			delay_milis(10); //delay_us(40);   // wait for 30us
 80011e0:	200a      	movs	r0, #10
 80011e2:	f7ff ff1d 	bl	8001020 <delay_milis>



			if((GPIO_ReadInputDataBit(EX_HUMID_PORT, EX_HUMID_PIN))==0)
 80011e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ea:	482a      	ldr	r0, [pc, #168]	; (8001294 <ex_humid_read+0x1b4>)
 80011ec:	f7ff f882 	bl	80002f4 <GPIO_ReadInputDataBit>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d110      	bne.n	8001218 <ex_humid_read+0x138>
			{
			 i&= ~(1<<(7-bit_iter));   // write 0
 80011f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2201      	movs	r2, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	b25b      	sxtb	r3, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	b25a      	sxtb	r2, r3
 800120a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800120e:	4013      	ands	r3, r2
 8001210:	b25b      	sxtb	r3, r3
 8001212:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001216:	e00d      	b.n	8001234 <ex_humid_read+0x154>
			}
		    else  i|= (1<<(7-bit_iter));  // if the pin is high, write 1
 8001218:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800121c:	f1c3 0307 	rsb	r3, r3, #7
 8001220:	2201      	movs	r2, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	b25a      	sxtb	r2, r3
 8001228:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800122c:	4313      	orrs	r3, r2
 800122e:	b25b      	sxtb	r3, r3
 8001230:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			while (GPIO_ReadInputDataBit(EX_HUMID_PORT, EX_HUMID_PIN));    // Wait for LOW
 8001234:	bf00      	nop
 8001236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123a:	4816      	ldr	r0, [pc, #88]	; (8001294 <ex_humid_read+0x1b4>)
 800123c:	f7ff f85a 	bl	80002f4 <GPIO_ReadInputDataBit>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f7      	bne.n	8001236 <ex_humid_read+0x156>
		for (bit_iter = 0; bit_iter < 8; bit_iter++) {
 8001246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800124a:	3301      	adds	r3, #1
 800124c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001250:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001254:	2b07      	cmp	r3, #7
 8001256:	d9ba      	bls.n	80011ce <ex_humid_read+0xee>
		} // end of bit_iter loop
	 data[byte_iter]=i;
 8001258:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800125c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001260:	4413      	add	r3, r2
 8001262:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001266:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (byte_iter = 0; byte_iter < 5; ++byte_iter) {
 800126a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800126e:	3301      	adds	r3, #1
 8001270:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001274:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001278:	2b04      	cmp	r3, #4
 800127a:	d9a1      	bls.n	80011c0 <ex_humid_read+0xe0>
	}

	//if (data[4] != (u8)(data[3] + data[2] + data[1] + data[0])) return -1;

	*humid = data[0];
 800127c:	7e3a      	ldrb	r2, [r7, #24]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	701a      	strb	r2, [r3, #0]
	*temp = data[2];
 8001282:	7eba      	ldrb	r2, [r7, #26]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	701a      	strb	r2, [r3, #0]
	return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3728      	adds	r7, #40	; 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40020c00 	.word	0x40020c00

08001298 <main>:
#include "drivers/DISPLAY_WH1602B_4Bit.h"
#include "drivers/Buttons.h"
#include "glesk_ex_humid.h"

int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
	u8 humid;
	u8 temp;
    u32 counter;
	printf("Program start\r\n");
 800129e:	4837      	ldr	r0, [pc, #220]	; (800137c <main+0xe4>)
 80012a0:	f000 fb60 	bl	8001964 <puts>

	Display_clear();
 80012a4:	f7ff fe84 	bl	8000fb0 <Display_clear>
	setup_Display();
 80012a8:	f7ff fe8c 	bl	8000fc4 <setup_Display>
	//Init_ONBOARD_BUTTONs();
	char tmp[32];
	uint16_t len = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	84fb      	strh	r3, [r7, #38]	; 0x26

	while(1)
	{

		 if (ex_humid_read(&humid, &temp,&counter) == 0)
 80012b0:	f107 0220 	add.w	r2, r7, #32
 80012b4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012b8:	f107 0325 	add.w	r3, r7, #37	; 0x25
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff0f 	bl	80010e0 <ex_humid_read>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10c      	bne.n	80012e2 <main+0x4a>
		 {
			printf("Humidity: %d percent\r\n", humid);
 80012c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012cc:	4619      	mov	r1, r3
 80012ce:	482c      	ldr	r0, [pc, #176]	; (8001380 <main+0xe8>)
 80012d0:	f000 fafa 	bl	80018c8 <iprintf>
			printf("Temp: %d C\r\n", temp);
 80012d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012d8:	4619      	mov	r1, r3
 80012da:	482a      	ldr	r0, [pc, #168]	; (8001384 <main+0xec>)
 80012dc:	f000 faf4 	bl	80018c8 <iprintf>
 80012e0:	e002      	b.n	80012e8 <main+0x50>
		 }
		 else
		 {
			printf("Can't get data\r\n");
 80012e2:	4829      	ldr	r0, [pc, #164]	; (8001388 <main+0xf0>)
 80012e4:	f000 fb3e 	bl	8001964 <puts>
		 }
		 delay_milis1(200);
 80012e8:	20c8      	movs	r0, #200	; 0xc8
 80012ea:	f7ff fe82 	bl	8000ff2 <delay_milis1>


		 sprintf(tmp, "%d", humid);
 80012ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012f2:	461a      	mov	r2, r3
 80012f4:	463b      	mov	r3, r7
 80012f6:	4925      	ldr	r1, [pc, #148]	; (800138c <main+0xf4>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 facf 	bl	800189c <siprintf>
		 len = strlen(tmp);
 80012fe:	463b      	mov	r3, r7
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ff61 	bl	80001c8 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	84fb      	strh	r3, [r7, #38]	; 0x26

		Display_Write_Ins(GO_TO_START_FIRST_LINE);
 800130a:	2080      	movs	r0, #128	; 0x80
 800130c:	f7ff fcb4 	bl	8000c78 <Display_Write_Ins>
		Display_Write_Data_Array("HUMIDITY: ",10);
 8001310:	210a      	movs	r1, #10
 8001312:	481f      	ldr	r0, [pc, #124]	; (8001390 <main+0xf8>)
 8001314:	f7ff fdec 	bl	8000ef0 <Display_Write_Data_Array>
		Display_Write_Ins(GO_TO_START_FIRST_LINE+13);
 8001318:	208d      	movs	r0, #141	; 0x8d
 800131a:	f7ff fcad 	bl	8000c78 <Display_Write_Ins>

		Display_Write_Data_Array(tmp, len);
 800131e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001320:	b2da      	uxtb	r2, r3
 8001322:	463b      	mov	r3, r7
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fde2 	bl	8000ef0 <Display_Write_Data_Array>
		Display_Write_Ins(GO_TO_START_FIRST_LINE+15);
 800132c:	208f      	movs	r0, #143	; 0x8f
 800132e:	f7ff fca3 	bl	8000c78 <Display_Write_Ins>
		Display_Write_Data_Array("%",1);
 8001332:	2101      	movs	r1, #1
 8001334:	4817      	ldr	r0, [pc, #92]	; (8001394 <main+0xfc>)
 8001336:	f7ff fddb 	bl	8000ef0 <Display_Write_Data_Array>

		sprintf(tmp, "%d", temp);
 800133a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800133e:	461a      	mov	r2, r3
 8001340:	463b      	mov	r3, r7
 8001342:	4912      	ldr	r1, [pc, #72]	; (800138c <main+0xf4>)
 8001344:	4618      	mov	r0, r3
 8001346:	f000 faa9 	bl	800189c <siprintf>
		len = strlen(tmp);
 800134a:	463b      	mov	r3, r7
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ff3b 	bl	80001c8 <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	84fb      	strh	r3, [r7, #38]	; 0x26
		Display_Write_Ins(GO_TO_START_SECOND_LINE);
 8001356:	20c0      	movs	r0, #192	; 0xc0
 8001358:	f7ff fc8e 	bl	8000c78 <Display_Write_Ins>
		Display_Write_Data_Array("TEMPERATURE: ",12);
 800135c:	210c      	movs	r1, #12
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <main+0x100>)
 8001360:	f7ff fdc6 	bl	8000ef0 <Display_Write_Data_Array>
		Display_Write_Ins(GO_TO_START_SECOND_LINE+13);
 8001364:	20cd      	movs	r0, #205	; 0xcd
 8001366:	f7ff fc87 	bl	8000c78 <Display_Write_Ins>
		Display_Write_Data_Array(tmp, len);
 800136a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800136c:	b2da      	uxtb	r2, r3
 800136e:	463b      	mov	r3, r7
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fdbc 	bl	8000ef0 <Display_Write_Data_Array>
		 if (ex_humid_read(&humid, &temp,&counter) == 0)
 8001378:	e79a      	b.n	80012b0 <main+0x18>
 800137a:	bf00      	nop
 800137c:	08001a1c 	.word	0x08001a1c
 8001380:	08001a2c 	.word	0x08001a2c
 8001384:	08001a44 	.word	0x08001a44
 8001388:	08001a54 	.word	0x08001a54
 800138c:	08001a64 	.word	0x08001a64
 8001390:	08001a68 	.word	0x08001a68
 8001394:	08001a74 	.word	0x08001a74
 8001398:	08001a78 	.word	0x08001a78

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013a2:	e003      	b.n	80013ac <LoopCopyDataInit>

080013a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013aa:	3104      	adds	r1, #4

080013ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013b4:	d3f6      	bcc.n	80013a4 <CopyDataInit>
  ldr  r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013b8:	e002      	b.n	80013c0 <LoopFillZerobss>

080013ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013bc:	f842 3b04 	str.w	r3, [r2], #4

080013c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013c4:	d3f9      	bcc.n	80013ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013c6:	f000 f841 	bl	800144c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f000 faf7 	bl	80019bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff ff63 	bl	8001298 <main>
  bx  lr    
 80013d2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013d8:	08001a94 	.word	0x08001a94
  ldr  r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013e0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80013e4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80013e8:	20000074 	.word	0x20000074

080013ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC_IRQHandler>

080013ee <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001400:	e7fe      	b.n	8001400 <HardFault_Handler+0x4>

08001402 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001406:	e7fe      	b.n	8001406 <MemManage_Handler+0x4>

08001408 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800140c:	e7fe      	b.n	800140c <BusFault_Handler+0x4>

0800140e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001412:	e7fe      	b.n	8001412 <UsageFault_Handler+0x4>

08001414 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <SystemInit+0x60>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001456:	4a15      	ldr	r2, [pc, #84]	; (80014ac <SystemInit+0x60>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <SystemInit+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <SystemInit+0x64>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <SystemInit+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <SystemInit+0x64>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <SystemInit+0x64>)
 8001478:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800147c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <SystemInit+0x64>)
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <SystemInit+0x68>)
 8001486:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <SystemInit+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <SystemInit+0x64>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800149a:	f000 f80d 	bl	80014b8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800149e:	4b03      	ldr	r3, [pc, #12]	; (80014ac <SystemInit+0x60>)
 80014a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014a4:	609a      	str	r2, [r3, #8]
#endif
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00
 80014b0:	40023800 	.word	0x40023800
 80014b4:	24003010 	.word	0x24003010

080014b8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <SetSysClock+0xe8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a35      	ldr	r2, [pc, #212]	; (80015a0 <SetSysClock+0xe8>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <SetSysClock+0xe8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d103      	bne.n	80014f0 <SetSysClock+0x38>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80014ee:	d1f0      	bne.n	80014d2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <SetSysClock+0xe8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80014fc:	2301      	movs	r3, #1
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	e001      	b.n	8001506 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d142      	bne.n	8001592 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <SetSysClock+0xe8>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <SetSysClock+0xe8>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <SetSysClock+0xec>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <SetSysClock+0xec>)
 800151e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001522:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <SetSysClock+0xe8>)
 8001526:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <SetSysClock+0xe8>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <SetSysClock+0xe8>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <SetSysClock+0xe8>)
 8001532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001536:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <SetSysClock+0xe8>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <SetSysClock+0xe8>)
 800153e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001542:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <SetSysClock+0xe8>)
 8001546:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <SetSysClock+0xf0>)
 8001548:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <SetSysClock+0xe8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <SetSysClock+0xe8>)
 8001550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001554:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001556:	bf00      	nop
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <SetSysClock+0xe8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f9      	beq.n	8001558 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <SetSysClock+0xf4>)
 8001566:	f240 7205 	movw	r2, #1797	; 0x705
 800156a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <SetSysClock+0xe8>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <SetSysClock+0xe8>)
 8001572:	f023 0303 	bic.w	r3, r3, #3
 8001576:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <SetSysClock+0xe8>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <SetSysClock+0xe8>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001584:	bf00      	nop
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <SetSysClock+0xe8>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b08      	cmp	r3, #8
 8001590:	d1f9      	bne.n	8001586 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40007000 	.word	0x40007000
 80015a8:	04401908 	.word	0x04401908
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	int div = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80015c0:	e004      	b.n	80015cc <ts_itoa+0x1c>
		div *= base;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	fb02 f303 	mul.w	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d2f3      	bcs.n	80015c2 <ts_itoa+0x12>

	while (div != 0)
 80015da:	e029      	b.n	8001630 <ts_itoa+0x80>
	{
		int num = d/div;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e4:	613b      	str	r3, [r7, #16]
		d = d%div;
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80015ee:	fb02 f201 	mul.w	r2, r2, r1
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	60bb      	str	r3, [r7, #8]
		div /= base;
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	2b09      	cmp	r3, #9
 8001604:	dd0a      	ble.n	800161c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1c58      	adds	r0, r3, #1
 8001610:	68f9      	ldr	r1, [r7, #12]
 8001612:	6008      	str	r0, [r1, #0]
 8001614:	3237      	adds	r2, #55	; 0x37
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	e009      	b.n	8001630 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1c58      	adds	r0, r3, #1
 8001626:	68f9      	ldr	r1, [r7, #12]
 8001628:	6008      	str	r0, [r1, #0]
 800162a:	3230      	adds	r2, #48	; 0x30
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1d2      	bne.n	80015dc <ts_itoa+0x2c>
	}
}
 8001636:	bf00      	nop
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b088      	sub	sp, #32
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8001652:	e07d      	b.n	8001750 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b25      	cmp	r3, #37	; 0x25
 800165a:	d171      	bne.n	8001740 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	3301      	adds	r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d01e      	beq.n	80016a8 <ts_formatstring+0x66>
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	dc06      	bgt.n	800167c <ts_formatstring+0x3a>
 800166e:	2b58      	cmp	r3, #88	; 0x58
 8001670:	d050      	beq.n	8001714 <ts_formatstring+0xd2>
 8001672:	2b63      	cmp	r3, #99	; 0x63
 8001674:	d00e      	beq.n	8001694 <ts_formatstring+0x52>
 8001676:	2b25      	cmp	r3, #37	; 0x25
 8001678:	d058      	beq.n	800172c <ts_formatstring+0xea>
 800167a:	e05d      	b.n	8001738 <ts_formatstring+0xf6>
 800167c:	2b73      	cmp	r3, #115	; 0x73
 800167e:	d02b      	beq.n	80016d8 <ts_formatstring+0x96>
 8001680:	2b73      	cmp	r3, #115	; 0x73
 8001682:	dc02      	bgt.n	800168a <ts_formatstring+0x48>
 8001684:	2b69      	cmp	r3, #105	; 0x69
 8001686:	d00f      	beq.n	80016a8 <ts_formatstring+0x66>
 8001688:	e056      	b.n	8001738 <ts_formatstring+0xf6>
 800168a:	2b75      	cmp	r3, #117	; 0x75
 800168c:	d037      	beq.n	80016fe <ts_formatstring+0xbc>
 800168e:	2b78      	cmp	r3, #120	; 0x78
 8001690:	d040      	beq.n	8001714 <ts_formatstring+0xd2>
 8001692:	e051      	b.n	8001738 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	1d1a      	adds	r2, r3, #4
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	60fa      	str	r2, [r7, #12]
 80016a2:	b2ca      	uxtb	r2, r1
 80016a4:	701a      	strb	r2, [r3, #0]
				break;
 80016a6:	e047      	b.n	8001738 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	1d1a      	adds	r2, r3, #4
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da07      	bge.n	80016c8 <ts_formatstring+0x86>
					{
						val *= -1;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	425b      	negs	r3, r3
 80016bc:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	60fa      	str	r2, [r7, #12]
 80016c4:	222d      	movs	r2, #45	; 0x2d
 80016c6:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80016c8:	69f9      	ldr	r1, [r7, #28]
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	220a      	movs	r2, #10
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff6d 	bl	80015b0 <ts_itoa>
				}
				break;
 80016d6:	e02f      	b.n	8001738 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	1d1a      	adds	r2, r3, #4
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80016e2:	e007      	b.n	80016f4 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	1c53      	adds	r3, r2, #1
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1c59      	adds	r1, r3, #1
 80016ee:	60f9      	str	r1, [r7, #12]
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f3      	bne.n	80016e4 <ts_formatstring+0xa2>
					}
				}
				break;
 80016fc:	e01c      	b.n	8001738 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	1d1a      	adds	r2, r3, #4
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	220a      	movs	r2, #10
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff4f 	bl	80015b0 <ts_itoa>
				break;
 8001712:	e011      	b.n	8001738 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	1d1a      	adds	r2, r3, #4
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	2210      	movs	r2, #16
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff43 	bl	80015b0 <ts_itoa>
				break;
 800172a:	e005      	b.n	8001738 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	60fa      	str	r2, [r7, #12]
 8001732:	2225      	movs	r2, #37	; 0x25
 8001734:	701a      	strb	r2, [r3, #0]
				  break;
 8001736:	bf00      	nop
			}
			fmt++;
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	3301      	adds	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	e007      	b.n	8001750 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	1c53      	adds	r3, r2, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1c59      	adds	r1, r3, #1
 800174a:	60f9      	str	r1, [r7, #12]
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f47f af7d 	bne.w	8001654 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	461a      	mov	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	1ad3      	subs	r3, r2, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	int length = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800177e:	e081      	b.n	8001884 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b25      	cmp	r3, #37	; 0x25
 8001786:	d177      	bne.n	8001878 <ts_formatlength+0x108>
		{
			++fmt;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3301      	adds	r3, #1
 800178c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	3b58      	subs	r3, #88	; 0x58
 8001794:	2b20      	cmp	r3, #32
 8001796:	d86a      	bhi.n	800186e <ts_formatlength+0xfe>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <ts_formatlength+0x30>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	08001861 	.word	0x08001861
 80017a4:	0800186f 	.word	0x0800186f
 80017a8:	0800186f 	.word	0x0800186f
 80017ac:	0800186f 	.word	0x0800186f
 80017b0:	0800186f 	.word	0x0800186f
 80017b4:	0800186f 	.word	0x0800186f
 80017b8:	0800186f 	.word	0x0800186f
 80017bc:	0800186f 	.word	0x0800186f
 80017c0:	0800186f 	.word	0x0800186f
 80017c4:	0800186f 	.word	0x0800186f
 80017c8:	0800186f 	.word	0x0800186f
 80017cc:	08001825 	.word	0x08001825
 80017d0:	08001833 	.word	0x08001833
 80017d4:	0800186f 	.word	0x0800186f
 80017d8:	0800186f 	.word	0x0800186f
 80017dc:	0800186f 	.word	0x0800186f
 80017e0:	0800186f 	.word	0x0800186f
 80017e4:	08001833 	.word	0x08001833
 80017e8:	0800186f 	.word	0x0800186f
 80017ec:	0800186f 	.word	0x0800186f
 80017f0:	0800186f 	.word	0x0800186f
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	0800186f 	.word	0x0800186f
 80017fc:	0800186f 	.word	0x0800186f
 8001800:	0800186f 	.word	0x0800186f
 8001804:	0800186f 	.word	0x0800186f
 8001808:	0800186f 	.word	0x0800186f
 800180c:	08001841 	.word	0x08001841
 8001810:	0800186f 	.word	0x0800186f
 8001814:	08001833 	.word	0x08001833
 8001818:	0800186f 	.word	0x0800186f
 800181c:	0800186f 	.word	0x0800186f
 8001820:	08001861 	.word	0x08001861
			{
			  case 'c':
		  		  va_arg(va, int);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	3304      	adds	r3, #4
 8001828:	603b      	str	r3, [r7, #0]
				  ++length;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3301      	adds	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
				  break;
 8001830:	e025      	b.n	800187e <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	330b      	adds	r3, #11
 8001836:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	3304      	adds	r3, #4
 800183c:	603b      	str	r3, [r7, #0]
				  break;
 800183e:	e01e      	b.n	800187e <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	1d1a      	adds	r2, r3, #4
 8001844:	603a      	str	r2, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 800184a:	e002      	b.n	8001852 <ts_formatlength+0xe2>
			  			  ++length;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3301      	adds	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	60ba      	str	r2, [r7, #8]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f6      	bne.n	800184c <ts_formatlength+0xdc>
			  	  }
				  break;
 800185e:	e00e      	b.n	800187e <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3308      	adds	r3, #8
 8001864:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	3304      	adds	r3, #4
 800186a:	603b      	str	r3, [r7, #0]
				  break;
 800186c:	e007      	b.n	800187e <ts_formatlength+0x10e>
			  default:
				  ++length;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
				  break;
 8001874:	bf00      	nop
 8001876:	e002      	b.n	800187e <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3301      	adds	r3, #1
 8001882:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	f47f af79 	bne.w	8001780 <ts_formatlength+0x10>
	}
	return length;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800189c:	b40e      	push	{r1, r2, r3}
 800189e:	b580      	push	{r7, lr}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	69f9      	ldr	r1, [r7, #28]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fec6 	bl	8001642 <ts_formatstring>
 80018b6:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80018b8:	68fb      	ldr	r3, [r7, #12]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018c4:	b003      	add	sp, #12
 80018c6:	4770      	bx	lr

080018c8 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80018c8:	b40f      	push	{r0, r1, r2, r3}
 80018ca:	b5b0      	push	{r4, r5, r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
	int length = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 80018da:	6839      	ldr	r1, [r7, #0]
 80018dc:	6a38      	ldr	r0, [r7, #32]
 80018de:	f7ff ff47 	bl	8001770 <ts_formatlength>
 80018e2:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 80018e4:	466b      	mov	r3, sp
 80018e6:	461d      	mov	r5, r3
		char buf[length];
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	1e43      	subs	r3, r0, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4603      	mov	r3, r0
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	f04f 0400 	mov.w	r4, #0
 80018fe:	00d4      	lsls	r4, r2, #3
 8001900:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001904:	00cb      	lsls	r3, r1, #3
 8001906:	4603      	mov	r3, r0
 8001908:	4619      	mov	r1, r3
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	f04f 0400 	mov.w	r4, #0
 8001916:	00d4      	lsls	r4, r2, #3
 8001918:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800191c:	00cb      	lsls	r3, r1, #3
 800191e:	4603      	mov	r3, r0
 8001920:	3307      	adds	r3, #7
 8001922:	08db      	lsrs	r3, r3, #3
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	ebad 0d03 	sub.w	sp, sp, r3
 800192a:	466b      	mov	r3, sp
 800192c:	3300      	adds	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8001930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001934:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	6a39      	ldr	r1, [r7, #32]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fe80 	bl	8001642 <ts_formatstring>
 8001942:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4619      	mov	r1, r3
 800194a:	2001      	movs	r0, #1
 800194c:	f7fe ff64 	bl	8000818 <_write>
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	46ad      	mov	sp, r5
		va_end(va);
	}
	return length;
 8001954:	68fb      	ldr	r3, [r7, #12]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001960:	b004      	add	sp, #16
 8001962:	4770      	bx	lr

08001964 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7fe fc2b 	bl	80001c8 <strlen>
 8001972:	4603      	mov	r3, r0
 8001974:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	2001      	movs	r0, #1
 8001980:	f7fe ff4a 	bl	8000818 <_write>
 8001984:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8001986:	2201      	movs	r2, #1
 8001988:	490b      	ldr	r1, [pc, #44]	; (80019b8 <puts+0x54>)
 800198a:	2001      	movs	r0, #1
 800198c:	f7fe ff44 	bl	8000818 <_write>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4413      	add	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	3301      	adds	r3, #1
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d102      	bne.n	80019a8 <puts+0x44>
	{
		res = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e002      	b.n	80019ae <puts+0x4a>
	}
	else
	{
		res = EOF;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ac:	617b      	str	r3, [r7, #20]
	}

	return res;
 80019ae:	697b      	ldr	r3, [r7, #20]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	08001a88 	.word	0x08001a88

080019bc <__libc_init_array>:
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	4e0d      	ldr	r6, [pc, #52]	; (80019f4 <__libc_init_array+0x38>)
 80019c0:	4c0d      	ldr	r4, [pc, #52]	; (80019f8 <__libc_init_array+0x3c>)
 80019c2:	1ba4      	subs	r4, r4, r6
 80019c4:	10a4      	asrs	r4, r4, #2
 80019c6:	2500      	movs	r5, #0
 80019c8:	42a5      	cmp	r5, r4
 80019ca:	d109      	bne.n	80019e0 <__libc_init_array+0x24>
 80019cc:	4e0b      	ldr	r6, [pc, #44]	; (80019fc <__libc_init_array+0x40>)
 80019ce:	4c0c      	ldr	r4, [pc, #48]	; (8001a00 <__libc_init_array+0x44>)
 80019d0:	f000 f818 	bl	8001a04 <_init>
 80019d4:	1ba4      	subs	r4, r4, r6
 80019d6:	10a4      	asrs	r4, r4, #2
 80019d8:	2500      	movs	r5, #0
 80019da:	42a5      	cmp	r5, r4
 80019dc:	d105      	bne.n	80019ea <__libc_init_array+0x2e>
 80019de:	bd70      	pop	{r4, r5, r6, pc}
 80019e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019e4:	4798      	blx	r3
 80019e6:	3501      	adds	r5, #1
 80019e8:	e7ee      	b.n	80019c8 <__libc_init_array+0xc>
 80019ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019ee:	4798      	blx	r3
 80019f0:	3501      	adds	r5, #1
 80019f2:	e7f2      	b.n	80019da <__libc_init_array+0x1e>
 80019f4:	08001a8c 	.word	0x08001a8c
 80019f8:	08001a8c 	.word	0x08001a8c
 80019fc:	08001a8c 	.word	0x08001a8c
 8001a00:	08001a90 	.word	0x08001a90

08001a04 <_init>:
 8001a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a06:	bf00      	nop
 8001a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0a:	bc08      	pop	{r3}
 8001a0c:	469e      	mov	lr, r3
 8001a0e:	4770      	bx	lr

08001a10 <_fini>:
 8001a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a12:	bf00      	nop
 8001a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a16:	bc08      	pop	{r3}
 8001a18:	469e      	mov	lr, r3
 8001a1a:	4770      	bx	lr
